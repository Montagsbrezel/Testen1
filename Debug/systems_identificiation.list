
systems_identificiation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08008698  08008698  00009698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a40  08008a40  0000a6c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a40  08008a40  00009a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a48  08008a48  0000a6c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008a48  08008a48  00009a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a50  08008a50  00009a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006c0  20000000  08008a54  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a6c0  2**0
                  CONTENTS
 10 .bss          00000a8c  200006c0  200006c0  0000a6c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000114c  2000114c  0000a6c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a6c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d48  00000000  00000000  0000a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002387  00000000  00000000  0001d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  0001f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092f  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281b0  00000000  00000000  00020ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e54e  00000000  00000000  00048e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4a20  00000000  00000000  000573e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013be05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000450c  00000000  00000000  0013be48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  00140354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200006c0 	.word	0x200006c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008680 	.word	0x08008680

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200006c4 	.word	0x200006c4
 80001ec:	08008680 	.word	0x08008680

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f000 fcb6 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f818 	bl	8000ef4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f93c 	bl	8001140 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 8000ec8:	f000 f888 	bl	8000fdc <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 8000ecc:	f000 f8d8 	bl	8001080 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000ed0:	f000 f904 	bl	80010dc <_ZL22MX_USB_OTG_FS_PCD_Initv>
   */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  printf("%f", 1.2445);
 8000ed4:	a305      	add	r3, pc, #20	@ (adr r3, 8000eec <main+0x34>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <main+0x30>)
 8000edc:	f002 ff64 	bl	8003da8 <printf>
 8000ee0:	e7f8      	b.n	8000ed4 <main+0x1c>
 8000ee2:	bf00      	nop
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	08008698 	.word	0x08008698
 8000eec:	d4fdf3b6 	.word	0xd4fdf3b6
 8000ef0:	3ff3e978 	.word	0x3ff3e978

08000ef4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval Error Handler
  */
void SystemClock_Config(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b094      	sub	sp, #80	@ 0x50
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	f107 0320 	add.w	r3, r7, #32
 8000efe:	2230      	movs	r2, #48	@ 0x30
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 ffa5 	bl	8003e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <_Z18SystemClock_Configv+0xe0>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f20:	4a2c      	ldr	r2, [pc, #176]	@ (8000fd4 <_Z18SystemClock_Configv+0xe0>)
 8000f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <_Z18SystemClock_Configv+0xe0>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <_Z18SystemClock_Configv+0xe4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a26      	ldr	r2, [pc, #152]	@ (8000fd8 <_Z18SystemClock_Configv+0xe4>)
 8000f3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <_Z18SystemClock_Configv+0xe4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f54:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f64:	2304      	movs	r3, #4
 8000f66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f68:	23a8      	movs	r3, #168	@ 0xa8
 8000f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f70:	2307      	movs	r3, #7
 8000f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fbf7 	bl	800276c <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf14      	ite	ne
 8000f84:	2301      	movne	r3, #1
 8000f86:	2300      	moveq	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000f8e:	f000 f985 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	230f      	movs	r3, #15
 8000f94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f96:	2302      	movs	r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f9e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fa2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2105      	movs	r1, #5
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f001 fe53 	bl	8002c5c <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf14      	ite	ne
 8000fbc:	2301      	movne	r3, #1
 8000fbe:	2300      	moveq	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000fc6:	f000 f969 	bl	800129c <Error_Handler>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3750      	adds	r7, #80	@ 0x50
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <_ZL11MX_ETH_Initv+0x8c>)
 8000fe2:	4a22      	ldr	r2, [pc, #136]	@ (800106c <_ZL11MX_ETH_Initv+0x90>)
 8000fe4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <_ZL11MX_ETH_Initv+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000fec:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <_ZL11MX_ETH_Initv+0x94>)
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <_ZL11MX_ETH_Initv+0x94>)
 8000ff4:	22e1      	movs	r2, #225	@ 0xe1
 8000ff6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <_ZL11MX_ETH_Initv+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <_ZL11MX_ETH_Initv+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001004:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <_ZL11MX_ETH_Initv+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800100a:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <_ZL11MX_ETH_Initv+0x8c>)
 800100c:	4a18      	ldr	r2, [pc, #96]	@ (8001070 <_ZL11MX_ETH_Initv+0x94>)
 800100e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <_ZL11MX_ETH_Initv+0x8c>)
 8001012:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001016:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001018:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <_ZL11MX_ETH_Initv+0x8c>)
 800101a:	4a16      	ldr	r2, [pc, #88]	@ (8001074 <_ZL11MX_ETH_Initv+0x98>)
 800101c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <_ZL11MX_ETH_Initv+0x8c>)
 8001020:	4a15      	ldr	r2, [pc, #84]	@ (8001078 <_ZL11MX_ETH_Initv+0x9c>)
 8001022:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <_ZL11MX_ETH_Initv+0x8c>)
 8001026:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800102a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800102c:	480e      	ldr	r0, [pc, #56]	@ (8001068 <_ZL11MX_ETH_Initv+0x8c>)
 800102e:	f000 fd79 	bl	8001b24 <HAL_ETH_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf14      	ite	ne
 8001038:	2301      	movne	r3, #1
 800103a:	2300      	moveq	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 8001042:	f000 f92b 	bl	800129c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001046:	2238      	movs	r2, #56	@ 0x38
 8001048:	2100      	movs	r1, #0
 800104a:	480c      	ldr	r0, [pc, #48]	@ (800107c <_ZL11MX_ETH_Initv+0xa0>)
 800104c:	f002 ff01 	bl	8003e52 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <_ZL11MX_ETH_Initv+0xa0>)
 8001052:	2221      	movs	r2, #33	@ 0x21
 8001054:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <_ZL11MX_ETH_Initv+0xa0>)
 8001058:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800105c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <_ZL11MX_ETH_Initv+0xa0>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000854 	.word	0x20000854
 800106c:	40028000 	.word	0x40028000
 8001070:	20000e30 	.word	0x20000e30
 8001074:	200007b4 	.word	0x200007b4
 8001078:	20000714 	.word	0x20000714
 800107c:	200006dc 	.word	0x200006dc

08001080 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001086:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b6:	4807      	ldr	r0, [pc, #28]	@ (80010d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80010b8:	f001 fff0 	bl	800309c <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80010cc:	f000 f8e6 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000904 	.word	0x20000904
 80010d8:	40004800 	.word	0x40004800

080010dc <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80010e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80010ea:	2204      	movs	r2, #4
 80010ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80010f0:	2202      	movs	r2, #2
 80010f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001102:	2201      	movs	r2, #1
 8001104:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001106:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001108:	2200      	movs	r2, #0
 800110a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800110e:	2200      	movs	r2, #0
 8001110:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001114:	2201      	movs	r2, #1
 8001116:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 800111a:	2200      	movs	r2, #0
 800111c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>)
 8001120:	f001 fa15 	bl	800254e <HAL_PCD_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	bf14      	ite	ne
 800112a:	2301      	movne	r3, #1
 800112c:	2300      	moveq	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x5c>
  {
    Error_Handler();
 8001134:	f000 f8b2 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000094c 	.word	0x2000094c

08001140 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08c      	sub	sp, #48	@ 0x30
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	4b4c      	ldr	r3, [pc, #304]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a4b      	ldr	r2, [pc, #300]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b49      	ldr	r3, [pc, #292]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	4b45      	ldr	r3, [pc, #276]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a44      	ldr	r2, [pc, #272]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b42      	ldr	r3, [pc, #264]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a3d      	ldr	r2, [pc, #244]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b37      	ldr	r3, [pc, #220]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a36      	ldr	r2, [pc, #216]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b30      	ldr	r3, [pc, #192]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a2f      	ldr	r2, [pc, #188]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b29      	ldr	r3, [pc, #164]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a28      	ldr	r2, [pc, #160]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <_ZL12MX_GPIO_Initv+0x14c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001204:	4822      	ldr	r0, [pc, #136]	@ (8001290 <_ZL12MX_GPIO_Initv+0x150>)
 8001206:	f001 f989 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2140      	movs	r1, #64	@ 0x40
 800120e:	4821      	ldr	r0, [pc, #132]	@ (8001294 <_ZL12MX_GPIO_Initv+0x154>)
 8001210:	f001 f984 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	481b      	ldr	r0, [pc, #108]	@ (8001298 <_ZL12MX_GPIO_Initv+0x158>)
 800122c:	f000 ffca 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001230:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4811      	ldr	r0, [pc, #68]	@ (8001290 <_ZL12MX_GPIO_Initv+0x150>)
 800124a:	f000 ffbb 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800124e:	2340      	movs	r3, #64	@ 0x40
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	480b      	ldr	r0, [pc, #44]	@ (8001294 <_ZL12MX_GPIO_Initv+0x154>)
 8001266:	f000 ffad 	bl	80021c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800126a:	2380      	movs	r3, #128	@ 0x80
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <_ZL12MX_GPIO_Initv+0x154>)
 800127e:	f000 ffa1 	bl	80021c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001282:	bf00      	nop
 8001284:	3730      	adds	r7, #48	@ 0x30
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400
 8001294:	40021800 	.word	0x40021800
 8001298:	40020800 	.word	0x40020800

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012da:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <HAL_MspInit+0x4c>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08e      	sub	sp, #56	@ 0x38
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a55      	ldr	r2, [pc, #340]	@ (800146c <HAL_ETH_MspInit+0x174>)
 8001316:	4293      	cmp	r3, r2
 8001318:	f040 80a4 	bne.w	8001464 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
 8001320:	4b53      	ldr	r3, [pc, #332]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	4a52      	ldr	r2, [pc, #328]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 8001326:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800132a:	6313      	str	r3, [r2, #48]	@ 0x30
 800132c:	4b50      	ldr	r3, [pc, #320]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001334:	623b      	str	r3, [r7, #32]
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	4b4c      	ldr	r3, [pc, #304]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001340:	4a4b      	ldr	r2, [pc, #300]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 8001342:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001346:	6313      	str	r3, [r2, #48]	@ 0x30
 8001348:	4b49      	ldr	r3, [pc, #292]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	4b45      	ldr	r3, [pc, #276]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	4a44      	ldr	r2, [pc, #272]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 800135e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001362:	6313      	str	r3, [r2, #48]	@ 0x30
 8001364:	4b42      	ldr	r3, [pc, #264]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	4b3e      	ldr	r3, [pc, #248]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4a3d      	ldr	r2, [pc, #244]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001380:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6313      	str	r3, [r2, #48]	@ 0x30
 800139c:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4b30      	ldr	r3, [pc, #192]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b0:	4a2f      	ldr	r2, [pc, #188]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 80013b2:	f043 0302 	orr.w	r3, r3, #2
 80013b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	4a28      	ldr	r2, [pc, #160]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 80013ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d4:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <HAL_ETH_MspInit+0x178>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013e0:	2332      	movs	r3, #50	@ 0x32
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f0:	230b      	movs	r3, #11
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	481e      	ldr	r0, [pc, #120]	@ (8001474 <HAL_ETH_MspInit+0x17c>)
 80013fc:	f000 fee2 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001400:	2386      	movs	r3, #134	@ 0x86
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001410:	230b      	movs	r3, #11
 8001412:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	4817      	ldr	r0, [pc, #92]	@ (8001478 <HAL_ETH_MspInit+0x180>)
 800141c:	f000 fed2 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001420:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001432:	230b      	movs	r3, #11
 8001434:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	480f      	ldr	r0, [pc, #60]	@ (800147c <HAL_ETH_MspInit+0x184>)
 800143e:	f000 fec1 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001442:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001454:	230b      	movs	r3, #11
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	4808      	ldr	r0, [pc, #32]	@ (8001480 <HAL_ETH_MspInit+0x188>)
 8001460:	f000 feb0 	bl	80021c4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001464:	bf00      	nop
 8001466:	3738      	adds	r7, #56	@ 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40028000 	.word	0x40028000
 8001470:	40023800 	.word	0x40023800
 8001474:	40020800 	.word	0x40020800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40021800 	.word	0x40021800

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	@ (8001508 <HAL_UART_MspInit+0x84>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12c      	bne.n	8001500 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a17      	ldr	r2, [pc, #92]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a10      	ldr	r2, [pc, #64]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <HAL_UART_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f0:	2307      	movs	r3, #7
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <HAL_UART_MspInit+0x8c>)
 80014fc:	f000 fe62 	bl	80021c4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001500:	bf00      	nop
 8001502:	3728      	adds	r7, #40	@ 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40004800 	.word	0x40004800
 800150c:	40023800 	.word	0x40023800
 8001510:	40020c00 	.word	0x40020c00

08001514 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001534:	d13f      	bne.n	80015b6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <HAL_PCD_MspInit+0xac>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a20      	ldr	r2, [pc, #128]	@ (80015c0 <HAL_PCD_MspInit+0xac>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <HAL_PCD_MspInit+0xac>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001552:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001564:	230a      	movs	r3, #10
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4815      	ldr	r0, [pc, #84]	@ (80015c4 <HAL_PCD_MspInit+0xb0>)
 8001570:	f000 fe28 	bl	80021c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001574:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	480e      	ldr	r0, [pc, #56]	@ (80015c4 <HAL_PCD_MspInit+0xb0>)
 800158a:	f000 fe1b 	bl	80021c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_PCD_MspInit+0xac>)
 8001590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001592:	4a0b      	ldr	r2, [pc, #44]	@ (80015c0 <HAL_PCD_MspInit+0xac>)
 8001594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001598:	6353      	str	r3, [r2, #52]	@ 0x34
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_PCD_MspInit+0xac>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <HAL_PCD_MspInit+0xac>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_PCD_MspInit+0xac>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80015b6:	bf00      	nop
 80015b8:	3728      	adds	r7, #40	@ 0x28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161e:	f000 f957 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}

08001626 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_kill>:

int _kill(int pid, int sig)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001640:	f002 fc56 	bl	8003ef0 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2216      	movs	r2, #22
 8001648:	601a      	str	r2, [r3, #0]
  return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_exit>:

void _exit (int status)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800165e:	f04f 31ff 	mov.w	r1, #4294967295
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffe7 	bl	8001636 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <_exit+0x12>

0800166c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800167e:	f3af 8000 	nop.w
 8001682:	4601      	mov	r1, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf0      	blt.n	800167e <_read+0x12>
  }

  return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e009      	b.n	80016cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf1      	blt.n	80016b8 <_write+0x12>
  }
  return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_close>:

int _close(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001706:	605a      	str	r2, [r3, #4]
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_isatty>:

int _isatty(int file)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <_sbrk+0x5c>)
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <_sbrk+0x60>)
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800175c:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <_sbrk+0x64>)
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <_sbrk+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d207      	bcs.n	8001788 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001778:	f002 fbba 	bl	8003ef0 <__errno>
 800177c:	4603      	mov	r3, r0
 800177e:	220c      	movs	r2, #12
 8001780:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	e009      	b.n	800179c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <_sbrk+0x64>)
 8001798:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20030000 	.word	0x20030000
 80017a8:	00000400 	.word	0x00000400
 80017ac:	20000e38 	.word	0x20000e38
 80017b0:	20001150 	.word	0x20001150

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <SystemInit+0x20>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017be:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <SystemInit+0x20>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001810 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017dc:	f7ff ffea 	bl	80017b4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480c      	ldr	r0, [pc, #48]	@ (8001814 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017e2:	490d      	ldr	r1, [pc, #52]	@ (8001818 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e4:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001824 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001806:	f002 fb79 	bl	8003efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7ff fb55 	bl	8000eb8 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001810:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 800181c:	08008a54 	.word	0x08008a54
  ldr r2, =_sbss
 8001820:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 8001824:	2000114c 	.word	0x2000114c

08001828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001830:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <HAL_Init+0x40>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800183a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_Init+0x40>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_Init+0x40>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f931 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fd22 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f93b 	bl	8001b0a <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f911 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000e3c 	.word	0x20000e3c

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000e3c 	.word	0x20000e3c

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	@ (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	@ 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff47 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff5c 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffb0 	bl	8001a78 <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e08a      	b.n	8001c4c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d106      	bne.n	8001b4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2223      	movs	r2, #35	@ 0x23
 8001b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fbd5 	bl	80012f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b40      	ldr	r3, [pc, #256]	@ (8001c54 <HAL_ETH_Init+0x130>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a3f      	ldr	r2, [pc, #252]	@ (8001c54 <HAL_ETH_Init+0x130>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c54 <HAL_ETH_Init+0x130>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <HAL_ETH_Init+0x134>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c58 <HAL_ETH_Init+0x134>)
 8001b70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b74:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b76:	4b38      	ldr	r3, [pc, #224]	@ (8001c58 <HAL_ETH_Init+0x134>)
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	4936      	ldr	r1, [pc, #216]	@ (8001c58 <HAL_ETH_Init+0x134>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b84:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <HAL_ETH_Init+0x134>)
 8001b86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba0:	f7ff feaa 	bl	80018f8 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ba6:	e011      	b.n	8001bcc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001ba8:	f7ff fea6 	bl	80018f8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001bb6:	d909      	bls.n	8001bcc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	22e0      	movs	r2, #224	@ 0xe0
 8001bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e03f      	b.n	8001c4c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1e4      	bne.n	8001ba8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f97a 	bl	8001ed8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fa25 	bl	8002034 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fa7b 	bl	80020e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f9e3 	bl	8001fc4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c1e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c22:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001c36:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2210      	movs	r2, #16
 8001c46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40013800 	.word	0x40013800

08001c5c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4b53      	ldr	r3, [pc, #332]	@ (8001dc0 <ETH_SetMACConfig+0x164>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	7b9b      	ldrb	r3, [r3, #14]
 8001c7a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	7c12      	ldrb	r2, [r2, #16]
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d102      	bne.n	8001c8a <ETH_SetMACConfig+0x2e>
 8001c84:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c88:	e000      	b.n	8001c8c <ETH_SetMACConfig+0x30>
 8001c8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	7c52      	ldrb	r2, [r2, #17]
 8001c92:	2a00      	cmp	r2, #0
 8001c94:	d102      	bne.n	8001c9c <ETH_SetMACConfig+0x40>
 8001c96:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c9a:	e000      	b.n	8001c9e <ETH_SetMACConfig+0x42>
 8001c9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c9e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ca4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	7fdb      	ldrb	r3, [r3, #31]
 8001caa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cac:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	7f92      	ldrb	r2, [r2, #30]
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d102      	bne.n	8001cc2 <ETH_SetMACConfig+0x66>
 8001cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc0:	e000      	b.n	8001cc4 <ETH_SetMACConfig+0x68>
 8001cc2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001cc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	7f1b      	ldrb	r3, [r3, #28]
 8001cca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ccc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cd2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	791b      	ldrb	r3, [r3, #4]
 8001cd8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d102      	bne.n	8001cec <ETH_SetMACConfig+0x90>
 8001ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cea:	e000      	b.n	8001cee <ETH_SetMACConfig+0x92>
 8001cec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	7bdb      	ldrb	r3, [r3, #15]
 8001cf4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cf6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cfc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d04:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001d06:	4313      	orrs	r3, r2
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff fdf6 	bl	8001910 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d42:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	d101      	bne.n	8001d52 <ETH_SetMACConfig+0xf6>
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	e000      	b.n	8001d54 <ETH_SetMACConfig+0xf8>
 8001d52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d54:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d62:	2a01      	cmp	r2, #1
 8001d64:	d101      	bne.n	8001d6a <ETH_SetMACConfig+0x10e>
 8001d66:	2208      	movs	r2, #8
 8001d68:	e000      	b.n	8001d6c <ETH_SetMACConfig+0x110>
 8001d6a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d6c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001d74:	2a01      	cmp	r2, #1
 8001d76:	d101      	bne.n	8001d7c <ETH_SetMACConfig+0x120>
 8001d78:	2204      	movs	r2, #4
 8001d7a:	e000      	b.n	8001d7e <ETH_SetMACConfig+0x122>
 8001d7c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001d86:	2a01      	cmp	r2, #1
 8001d88:	d101      	bne.n	8001d8e <ETH_SetMACConfig+0x132>
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	e000      	b.n	8001d90 <ETH_SetMACConfig+0x134>
 8001d8e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d90:	4313      	orrs	r3, r2
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7ff fdb1 	bl	8001910 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	fd20810f 	.word	0xfd20810f

08001dc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <ETH_SetDMAConfig+0x110>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7b1b      	ldrb	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <ETH_SetDMAConfig+0x2c>
 8001dea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dee:	e000      	b.n	8001df2 <ETH_SetDMAConfig+0x2e>
 8001df0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	7b5b      	ldrb	r3, [r3, #13]
 8001df6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001df8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	7f52      	ldrb	r2, [r2, #29]
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d102      	bne.n	8001e08 <ETH_SetDMAConfig+0x44>
 8001e02:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e06:	e000      	b.n	8001e0a <ETH_SetDMAConfig+0x46>
 8001e08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	7b9b      	ldrb	r3, [r3, #14]
 8001e10:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e12:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e18:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	7f1b      	ldrb	r3, [r3, #28]
 8001e1e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7f9b      	ldrb	r3, [r3, #30]
 8001e26:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e28:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e36:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff fd58 	bl	8001910 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	791b      	ldrb	r3, [r3, #4]
 8001e72:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e78:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e7e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e84:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e8c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e8e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e96:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e9c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ea6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001eaa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff fd29 	bl	8001910 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	f8de3f23 	.word	0xf8de3f23

08001ed8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0a6      	sub	sp, #152	@ 0x98
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f44:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fe7f 	bl	8001c5c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f62:	2301      	movs	r3, #1
 8001f64:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f92:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f94:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f98:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f9e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff05 	bl	8001dc4 <ETH_SetDMAConfig>
}
 8001fba:	bf00      	nop
 8001fbc:	3798      	adds	r7, #152	@ 0x98
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3305      	adds	r3, #5
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	3204      	adds	r2, #4
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <ETH_MACAddressConfig+0x68>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3303      	adds	r3, #3
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	061a      	lsls	r2, r3, #24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3301      	adds	r3, #1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	4313      	orrs	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <ETH_MACAddressConfig+0x6c>)
 8002016:	4413      	add	r3, r2
 8002018:	461a      	mov	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	6013      	str	r3, [r2, #0]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40028040 	.word	0x40028040
 8002030:	40028044 	.word	0x40028044

08002034 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e03e      	b.n	80020c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	3206      	adds	r2, #6
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d80c      	bhi.n	80020a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68d9      	ldr	r1, [r3, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	461a      	mov	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	e004      	b.n	80020ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	461a      	mov	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d9bd      	bls.n	8002042 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d8:	611a      	str	r2, [r3, #16]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	e048      	b.n	8002186 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6919      	ldr	r1, [r3, #16]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2200      	movs	r2, #0
 8002110:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002130:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	3212      	adds	r2, #18
 8002152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d80c      	bhi.n	8002176 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6919      	ldr	r1, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	461a      	mov	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	e004      	b.n	8002180 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	461a      	mov	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3301      	adds	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d9b3      	bls.n	80020f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b6:	60da      	str	r2, [r3, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e177      	b.n	80024d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	f040 8166 	bne.w	80024ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d005      	beq.n	8002216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	2b02      	cmp	r3, #2
 8002214:	d130      	bne.n	8002278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 0201 	and.w	r2, r3, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b03      	cmp	r3, #3
 8002282:	d017      	beq.n	80022b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d123      	bne.n	8002308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	08da      	lsrs	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3208      	adds	r2, #8
 80022c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0203 	and.w	r2, r3, #3
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80c0 	beq.w	80024ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b66      	ldr	r3, [pc, #408]	@ (80024e8 <HAL_GPIO_Init+0x324>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	4a65      	ldr	r2, [pc, #404]	@ (80024e8 <HAL_GPIO_Init+0x324>)
 8002354:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002358:	6453      	str	r3, [r2, #68]	@ 0x44
 800235a:	4b63      	ldr	r3, [pc, #396]	@ (80024e8 <HAL_GPIO_Init+0x324>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002366:	4a61      	ldr	r2, [pc, #388]	@ (80024ec <HAL_GPIO_Init+0x328>)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <HAL_GPIO_Init+0x32c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d037      	beq.n	8002402 <HAL_GPIO_Init+0x23e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a57      	ldr	r2, [pc, #348]	@ (80024f4 <HAL_GPIO_Init+0x330>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d031      	beq.n	80023fe <HAL_GPIO_Init+0x23a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a56      	ldr	r2, [pc, #344]	@ (80024f8 <HAL_GPIO_Init+0x334>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <HAL_GPIO_Init+0x236>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a55      	ldr	r2, [pc, #340]	@ (80024fc <HAL_GPIO_Init+0x338>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d025      	beq.n	80023f6 <HAL_GPIO_Init+0x232>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a54      	ldr	r2, [pc, #336]	@ (8002500 <HAL_GPIO_Init+0x33c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01f      	beq.n	80023f2 <HAL_GPIO_Init+0x22e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a53      	ldr	r2, [pc, #332]	@ (8002504 <HAL_GPIO_Init+0x340>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d019      	beq.n	80023ee <HAL_GPIO_Init+0x22a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <HAL_GPIO_Init+0x344>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0x226>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a51      	ldr	r2, [pc, #324]	@ (800250c <HAL_GPIO_Init+0x348>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00d      	beq.n	80023e6 <HAL_GPIO_Init+0x222>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a50      	ldr	r2, [pc, #320]	@ (8002510 <HAL_GPIO_Init+0x34c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x21e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002514 <HAL_GPIO_Init+0x350>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_GPIO_Init+0x21a>
 80023da:	2309      	movs	r3, #9
 80023dc:	e012      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023de:	230a      	movs	r3, #10
 80023e0:	e010      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023e2:	2308      	movs	r3, #8
 80023e4:	e00e      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023e6:	2307      	movs	r3, #7
 80023e8:	e00c      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023ea:	2306      	movs	r3, #6
 80023ec:	e00a      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023ee:	2305      	movs	r3, #5
 80023f0:	e008      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023f2:	2304      	movs	r3, #4
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023f6:	2303      	movs	r3, #3
 80023f8:	e004      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e002      	b.n	8002404 <HAL_GPIO_Init+0x240>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_GPIO_Init+0x240>
 8002402:	2300      	movs	r3, #0
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	f002 0203 	and.w	r2, r2, #3
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	4093      	lsls	r3, r2
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002414:	4935      	ldr	r1, [pc, #212]	@ (80024ec <HAL_GPIO_Init+0x328>)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002422:	4b3d      	ldr	r3, [pc, #244]	@ (8002518 <HAL_GPIO_Init+0x354>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002446:	4a34      	ldr	r2, [pc, #208]	@ (8002518 <HAL_GPIO_Init+0x354>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800244c:	4b32      	ldr	r3, [pc, #200]	@ (8002518 <HAL_GPIO_Init+0x354>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002470:	4a29      	ldr	r2, [pc, #164]	@ (8002518 <HAL_GPIO_Init+0x354>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002476:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <HAL_GPIO_Init+0x354>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249a:	4a1f      	ldr	r2, [pc, #124]	@ (8002518 <HAL_GPIO_Init+0x354>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_GPIO_Init+0x354>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <HAL_GPIO_Init+0x354>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	2b0f      	cmp	r3, #15
 80024d4:	f67f ae84 	bls.w	80021e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3724      	adds	r7, #36	@ 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40013800 	.word	0x40013800
 80024f0:	40020000 	.word	0x40020000
 80024f4:	40020400 	.word	0x40020400
 80024f8:	40020800 	.word	0x40020800
 80024fc:	40020c00 	.word	0x40020c00
 8002500:	40021000 	.word	0x40021000
 8002504:	40021400 	.word	0x40021400
 8002508:	40021800 	.word	0x40021800
 800250c:	40021c00 	.word	0x40021c00
 8002510:	40022000 	.word	0x40022000
 8002514:	40022400 	.word	0x40022400
 8002518:	40013c00 	.word	0x40013c00

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002538:	e003      	b.n	8002542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	619a      	str	r2, [r3, #24]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af02      	add	r7, sp, #8
 8002554:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e101      	b.n	8002764 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe ffca 	bl	8001514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2203      	movs	r2, #3
 8002584:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800258e:	d102      	bne.n	8002596 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f8a6 	bl	80036ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7c1a      	ldrb	r2, [r3, #16]
 80025a8:	f88d 2000 	strb.w	r2, [sp]
 80025ac:	3304      	adds	r3, #4
 80025ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b0:	f001 f838 	bl	8003624 <USB_CoreInit>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0ce      	b.n	8002764 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f001 f89e 	bl	800370e <USB_SetCurrentMode>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0bf      	b.n	8002764 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]
 80025e8:	e04a      	b.n	8002680 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3315      	adds	r3, #21
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3314      	adds	r3, #20
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	b298      	uxth	r0, r3
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	332e      	adds	r3, #46	@ 0x2e
 8002626:	4602      	mov	r2, r0
 8002628:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3318      	adds	r3, #24
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	331c      	adds	r3, #28
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3320      	adds	r3, #32
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3324      	adds	r3, #36	@ 0x24
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	3301      	adds	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	791b      	ldrb	r3, [r3, #4]
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	429a      	cmp	r2, r3
 8002688:	d3af      	bcc.n	80025ea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
 800268e:	e044      	b.n	800271a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	3301      	adds	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3b5      	bcc.n	8002690 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7c1a      	ldrb	r2, [r3, #16]
 800272c:	f88d 2000 	strb.w	r2, [sp]
 8002730:	3304      	adds	r3, #4
 8002732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002734:	f001 f838 	bl	80037a8 <USB_DevInit>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00c      	b.n	8002764 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f001 fa00 	bl	8003b62 <USB_DevDisconnect>

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e267      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d075      	beq.n	8002876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800278a:	4b88      	ldr	r3, [pc, #544]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d00c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002796:	4b85      	ldr	r3, [pc, #532]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d112      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a2:	4b82      	ldr	r3, [pc, #520]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ae:	d10b      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b0:	4b7e      	ldr	r3, [pc, #504]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d05b      	beq.n	8002874 <HAL_RCC_OscConfig+0x108>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d157      	bne.n	8002874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e242      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_OscConfig+0x74>
 80027d2:	4b76      	ldr	r3, [pc, #472]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a75      	ldr	r2, [pc, #468]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80027d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x98>
 80027ea:	4b70      	ldr	r3, [pc, #448]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a6f      	ldr	r2, [pc, #444]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b6d      	ldr	r3, [pc, #436]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6c      	ldr	r2, [pc, #432]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xb0>
 8002804:	4b69      	ldr	r3, [pc, #420]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a68      	ldr	r2, [pc, #416]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b66      	ldr	r3, [pc, #408]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a65      	ldr	r2, [pc, #404]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff f868 	bl	80018f8 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff f864 	bl	80018f8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	@ 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e207      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b5b      	ldr	r3, [pc, #364]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xc0>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff f854 	bl	80018f8 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff f850 	bl	80018f8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	@ 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1f3      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b51      	ldr	r3, [pc, #324]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0xe8>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002882:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800288e:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289a:	4b44      	ldr	r3, [pc, #272]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b41      	ldr	r3, [pc, #260]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1c7      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4937      	ldr	r1, [pc, #220]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b34      	ldr	r3, [pc, #208]	@ (80029b0 <HAL_RCC_OscConfig+0x244>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7ff f809 	bl	80018f8 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7ff f805 	bl	80018f8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1a8      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4925      	ldr	r1, [pc, #148]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <HAL_RCC_OscConfig+0x244>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe ffe8 	bl	80018f8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7fe ffe4 	bl	80018f8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e187      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d036      	beq.n	80029c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <HAL_RCC_OscConfig+0x248>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe ffc8 	bl	80018f8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7fe ffc4 	bl	80018f8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e167      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_OscConfig+0x240>)
 8002980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x200>
 800298a:	e01b      	b.n	80029c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_OscConfig+0x248>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7fe ffb1 	bl	80018f8 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002998:	e00e      	b.n	80029b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299a:	f7fe ffad 	bl	80018f8 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d907      	bls.n	80029b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e150      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
 80029ac:	40023800 	.word	0x40023800
 80029b0:	42470000 	.word	0x42470000
 80029b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b88      	ldr	r3, [pc, #544]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ea      	bne.n	800299a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8097 	beq.w	8002b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b81      	ldr	r3, [pc, #516]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4a7c      	ldr	r2, [pc, #496]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f2:	4b7a      	ldr	r3, [pc, #488]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b77      	ldr	r3, [pc, #476]	@ (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b74      	ldr	r3, [pc, #464]	@ (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a73      	ldr	r2, [pc, #460]	@ (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe ff6d 	bl	80018f8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe ff69 	bl	80018f8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e10c      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b6a      	ldr	r3, [pc, #424]	@ (8002be0 <HAL_RCC_OscConfig+0x474>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x2ea>
 8002a48:	4b64      	ldr	r3, [pc, #400]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a63      	ldr	r2, [pc, #396]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a54:	e01c      	b.n	8002a90 <HAL_RCC_OscConfig+0x324>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x30c>
 8002a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	4a5e      	ldr	r2, [pc, #376]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a76:	e00b      	b.n	8002a90 <HAL_RCC_OscConfig+0x324>
 8002a78:	4b58      	ldr	r3, [pc, #352]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a57      	ldr	r2, [pc, #348]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a84:	4b55      	ldr	r3, [pc, #340]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a54      	ldr	r2, [pc, #336]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002a8a:	f023 0304 	bic.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d015      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe ff2e 	bl	80018f8 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe ff2a 	bl	80018f8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0cb      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab6:	4b49      	ldr	r3, [pc, #292]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ee      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x334>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe ff18 	bl	80018f8 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe ff14 	bl	80018f8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0b5      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1ee      	bne.n	8002acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b39      	ldr	r3, [pc, #228]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	4a38      	ldr	r2, [pc, #224]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80a1 	beq.w	8002c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0a:	4b34      	ldr	r3, [pc, #208]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d05c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d141      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b31      	ldr	r3, [pc, #196]	@ (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fee8 	bl	80018f8 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe fee4 	bl	80018f8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e087      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b27      	ldr	r3, [pc, #156]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	019b      	lsls	r3, r3, #6
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	061b      	lsls	r3, r3, #24
 8002b6e:	491b      	ldr	r1, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b1b      	ldr	r3, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe febd 	bl	80018f8 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe feb9 	bl	80018f8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e05c      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b94:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x416>
 8002ba0:	e054      	b.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b10      	ldr	r3, [pc, #64]	@ (8002be4 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fea6 	bl	80018f8 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fea2 	bl	80018f8 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e045      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_RCC_OscConfig+0x470>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x444>
 8002bce:	e03d      	b.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e038      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40007000 	.word	0x40007000
 8002be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <HAL_RCC_OscConfig+0x4ec>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d028      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d121      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d11a      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	3b01      	subs	r3, #1
 8002c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800

08002c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0cc      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b68      	ldr	r3, [pc, #416]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d90c      	bls.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b65      	ldr	r3, [pc, #404]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b63      	ldr	r3, [pc, #396]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0b8      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d020      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a58      	ldr	r2, [pc, #352]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc8:	4b53      	ldr	r3, [pc, #332]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a52      	ldr	r2, [pc, #328]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	494d      	ldr	r1, [pc, #308]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d044      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e07f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d003      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e06f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e067      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b37      	ldr	r3, [pc, #220]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4934      	ldr	r1, [pc, #208]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4c:	f7fe fdd4 	bl	80018f8 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe fdd0 	bl	80018f8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e04f      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d20c      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e032      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4916      	ldr	r1, [pc, #88]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dce:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	490e      	ldr	r1, [pc, #56]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de2:	f000 f821 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	490a      	ldr	r1, [pc, #40]	@ (8002e1c <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	5ccb      	ldrb	r3, [r1, r3]
 8002df6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfa:	4a09      	ldr	r2, [pc, #36]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002dfe:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe fd34 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40023c00 	.word	0x40023c00
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	0800869c 	.word	0x0800869c
 8002e20:	20000000 	.word	0x20000000
 8002e24:	20000004 	.word	0x20000004

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b094      	sub	sp, #80	@ 0x50
 8002e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e40:	4b79      	ldr	r3, [pc, #484]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d00d      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x40>
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	f200 80e1 	bhi.w	8003014 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x34>
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5a:	e0db      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e60:	e0db      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e62:	4b73      	ldr	r3, [pc, #460]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e66:	e0d8      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e68:	4b6f      	ldr	r3, [pc, #444]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e72:	4b6d      	ldr	r3, [pc, #436]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	2200      	movs	r2, #0
 8002e86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e92:	2300      	movs	r3, #0
 8002e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	0159      	lsls	r1, r3, #5
 8002ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eac:	0150      	lsls	r0, r2, #5
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	1a51      	subs	r1, r2, r1
 8002eb6:	6139      	str	r1, [r7, #16]
 8002eb8:	4629      	mov	r1, r5
 8002eba:	eb63 0301 	sbc.w	r3, r3, r1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ecc:	4659      	mov	r1, fp
 8002ece:	018b      	lsls	r3, r1, #6
 8002ed0:	4651      	mov	r1, sl
 8002ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	018a      	lsls	r2, r1, #6
 8002eda:	4651      	mov	r1, sl
 8002edc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee0:	4659      	mov	r1, fp
 8002ee2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efa:	4690      	mov	r8, r2
 8002efc:	4699      	mov	r9, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	eb18 0303 	adds.w	r3, r8, r3
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	462b      	mov	r3, r5
 8002f08:	eb49 0303 	adc.w	r3, r9, r3
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1a:	4629      	mov	r1, r5
 8002f1c:	024b      	lsls	r3, r1, #9
 8002f1e:	4621      	mov	r1, r4
 8002f20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f24:	4621      	mov	r1, r4
 8002f26:	024a      	lsls	r2, r1, #9
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2e:	2200      	movs	r2, #0
 8002f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f38:	f7fd fe46 	bl	8000bc8 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4613      	mov	r3, r2
 8002f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f44:	e058      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f46:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	4611      	mov	r1, r2
 8002f52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f56:	623b      	str	r3, [r7, #32]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	0159      	lsls	r1, r3, #5
 8002f6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f72:	0150      	lsls	r0, r2, #5
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4641      	mov	r1, r8
 8002f7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f7e:	4649      	mov	r1, r9
 8002f80:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f98:	ebb2 040a 	subs.w	r4, r2, sl
 8002f9c:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	00eb      	lsls	r3, r5, #3
 8002faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fae:	00e2      	lsls	r2, r4, #3
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	461d      	mov	r5, r3
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	18e3      	adds	r3, r4, r3
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	464b      	mov	r3, r9
 8002fbc:	eb45 0303 	adc.w	r3, r5, r3
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fce:	4629      	mov	r1, r5
 8002fd0:	028b      	lsls	r3, r1, #10
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd8:	4621      	mov	r1, r4
 8002fda:	028a      	lsls	r2, r1, #10
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	61fa      	str	r2, [r7, #28]
 8002fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fec:	f7fd fdec 	bl	8000bc8 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	3301      	adds	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800300a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003012:	e002      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCC_GetSysClockFreq+0x204>)
 8003016:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800301c:	4618      	mov	r0, r3
 800301e:	3750      	adds	r7, #80	@ 0x50
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	007a1200 	.word	0x007a1200

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	@ (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000000 	.word	0x20000000

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	080086ac 	.word	0x080086ac

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffdc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0b5b      	lsrs	r3, r3, #13
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	080086ac 	.word	0x080086ac

0800309c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e042      	b.n	8003134 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f9de 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	@ 0x24
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f82b 	bl	800313c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800313c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003140:	b0c0      	sub	sp, #256	@ 0x100
 8003142:	af00      	add	r7, sp, #0
 8003144:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003158:	68d9      	ldr	r1, [r3, #12]
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	ea40 0301 	orr.w	r3, r0, r1
 8003164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	431a      	orrs	r2, r3
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	431a      	orrs	r2, r3
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003194:	f021 010c 	bic.w	r1, r1, #12
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031a2:	430b      	orrs	r3, r1
 80031a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b6:	6999      	ldr	r1, [r3, #24]
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	ea40 0301 	orr.w	r3, r0, r1
 80031c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b8f      	ldr	r3, [pc, #572]	@ (8003408 <UART_SetConfig+0x2cc>)
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d005      	beq.n	80031dc <UART_SetConfig+0xa0>
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4b8d      	ldr	r3, [pc, #564]	@ (800340c <UART_SetConfig+0x2d0>)
 80031d8:	429a      	cmp	r2, r3
 80031da:	d104      	bne.n	80031e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7ff ff4a 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 80031e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031e4:	e003      	b.n	80031ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031e6:	f7ff ff31 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 80031ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f8:	f040 810c 	bne.w	8003414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003200:	2200      	movs	r2, #0
 8003202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003206:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800320a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	1891      	adds	r1, r2, r2
 8003214:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003216:	415b      	adcs	r3, r3
 8003218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800321a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800321e:	4621      	mov	r1, r4
 8003220:	eb12 0801 	adds.w	r8, r2, r1
 8003224:	4629      	mov	r1, r5
 8003226:	eb43 0901 	adc.w	r9, r3, r1
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323e:	4690      	mov	r8, r2
 8003240:	4699      	mov	r9, r3
 8003242:	4623      	mov	r3, r4
 8003244:	eb18 0303 	adds.w	r3, r8, r3
 8003248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800324c:	462b      	mov	r3, r5
 800324e:	eb49 0303 	adc.w	r3, r9, r3
 8003252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003262:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800326a:	460b      	mov	r3, r1
 800326c:	18db      	adds	r3, r3, r3
 800326e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003270:	4613      	mov	r3, r2
 8003272:	eb42 0303 	adc.w	r3, r2, r3
 8003276:	657b      	str	r3, [r7, #84]	@ 0x54
 8003278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800327c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003280:	f7fd fca2 	bl	8000bc8 <__aeabi_uldivmod>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4b61      	ldr	r3, [pc, #388]	@ (8003410 <UART_SetConfig+0x2d4>)
 800328a:	fba3 2302 	umull	r2, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	011c      	lsls	r4, r3, #4
 8003292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003296:	2200      	movs	r2, #0
 8003298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800329c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032a4:	4642      	mov	r2, r8
 80032a6:	464b      	mov	r3, r9
 80032a8:	1891      	adds	r1, r2, r2
 80032aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032ac:	415b      	adcs	r3, r3
 80032ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032b4:	4641      	mov	r1, r8
 80032b6:	eb12 0a01 	adds.w	sl, r2, r1
 80032ba:	4649      	mov	r1, r9
 80032bc:	eb43 0b01 	adc.w	fp, r3, r1
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032d4:	4692      	mov	sl, r2
 80032d6:	469b      	mov	fp, r3
 80032d8:	4643      	mov	r3, r8
 80032da:	eb1a 0303 	adds.w	r3, sl, r3
 80032de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032e2:	464b      	mov	r3, r9
 80032e4:	eb4b 0303 	adc.w	r3, fp, r3
 80032e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003300:	460b      	mov	r3, r1
 8003302:	18db      	adds	r3, r3, r3
 8003304:	643b      	str	r3, [r7, #64]	@ 0x40
 8003306:	4613      	mov	r3, r2
 8003308:	eb42 0303 	adc.w	r3, r2, r3
 800330c:	647b      	str	r3, [r7, #68]	@ 0x44
 800330e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003316:	f7fd fc57 	bl	8000bc8 <__aeabi_uldivmod>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4611      	mov	r1, r2
 8003320:	4b3b      	ldr	r3, [pc, #236]	@ (8003410 <UART_SetConfig+0x2d4>)
 8003322:	fba3 2301 	umull	r2, r3, r3, r1
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2264      	movs	r2, #100	@ 0x64
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	1acb      	subs	r3, r1, r3
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003336:	4b36      	ldr	r3, [pc, #216]	@ (8003410 <UART_SetConfig+0x2d4>)
 8003338:	fba3 2302 	umull	r2, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003344:	441c      	add	r4, r3
 8003346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003350:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	1891      	adds	r1, r2, r2
 800335e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003360:	415b      	adcs	r3, r3
 8003362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003368:	4641      	mov	r1, r8
 800336a:	1851      	adds	r1, r2, r1
 800336c:	6339      	str	r1, [r7, #48]	@ 0x30
 800336e:	4649      	mov	r1, r9
 8003370:	414b      	adcs	r3, r1
 8003372:	637b      	str	r3, [r7, #52]	@ 0x34
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003380:	4659      	mov	r1, fp
 8003382:	00cb      	lsls	r3, r1, #3
 8003384:	4651      	mov	r1, sl
 8003386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800338a:	4651      	mov	r1, sl
 800338c:	00ca      	lsls	r2, r1, #3
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	4603      	mov	r3, r0
 8003394:	4642      	mov	r2, r8
 8003396:	189b      	adds	r3, r3, r2
 8003398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800339c:	464b      	mov	r3, r9
 800339e:	460a      	mov	r2, r1
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033bc:	460b      	mov	r3, r1
 80033be:	18db      	adds	r3, r3, r3
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c2:	4613      	mov	r3, r2
 80033c4:	eb42 0303 	adc.w	r3, r2, r3
 80033c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033d2:	f7fd fbf9 	bl	8000bc8 <__aeabi_uldivmod>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <UART_SetConfig+0x2d4>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2164      	movs	r1, #100	@ 0x64
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	3332      	adds	r3, #50	@ 0x32
 80033ee:	4a08      	ldr	r2, [pc, #32]	@ (8003410 <UART_SetConfig+0x2d4>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	f003 0207 	and.w	r2, r3, #7
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4422      	add	r2, r4
 8003402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003404:	e106      	b.n	8003614 <UART_SetConfig+0x4d8>
 8003406:	bf00      	nop
 8003408:	40011000 	.word	0x40011000
 800340c:	40011400 	.word	0x40011400
 8003410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003418:	2200      	movs	r2, #0
 800341a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800341e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003426:	4642      	mov	r2, r8
 8003428:	464b      	mov	r3, r9
 800342a:	1891      	adds	r1, r2, r2
 800342c:	6239      	str	r1, [r7, #32]
 800342e:	415b      	adcs	r3, r3
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24
 8003432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003436:	4641      	mov	r1, r8
 8003438:	1854      	adds	r4, r2, r1
 800343a:	4649      	mov	r1, r9
 800343c:	eb43 0501 	adc.w	r5, r3, r1
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	00eb      	lsls	r3, r5, #3
 800344a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344e:	00e2      	lsls	r2, r4, #3
 8003450:	4614      	mov	r4, r2
 8003452:	461d      	mov	r5, r3
 8003454:	4643      	mov	r3, r8
 8003456:	18e3      	adds	r3, r4, r3
 8003458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800345c:	464b      	mov	r3, r9
 800345e:	eb45 0303 	adc.w	r3, r5, r3
 8003462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003472:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003482:	4629      	mov	r1, r5
 8003484:	008b      	lsls	r3, r1, #2
 8003486:	4621      	mov	r1, r4
 8003488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348c:	4621      	mov	r1, r4
 800348e:	008a      	lsls	r2, r1, #2
 8003490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003494:	f7fd fb98 	bl	8000bc8 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4b60      	ldr	r3, [pc, #384]	@ (8003620 <UART_SetConfig+0x4e4>)
 800349e:	fba3 2302 	umull	r2, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	011c      	lsls	r4, r3, #4
 80034a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034b8:	4642      	mov	r2, r8
 80034ba:	464b      	mov	r3, r9
 80034bc:	1891      	adds	r1, r2, r2
 80034be:	61b9      	str	r1, [r7, #24]
 80034c0:	415b      	adcs	r3, r3
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c8:	4641      	mov	r1, r8
 80034ca:	1851      	adds	r1, r2, r1
 80034cc:	6139      	str	r1, [r7, #16]
 80034ce:	4649      	mov	r1, r9
 80034d0:	414b      	adcs	r3, r1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034e0:	4659      	mov	r1, fp
 80034e2:	00cb      	lsls	r3, r1, #3
 80034e4:	4651      	mov	r1, sl
 80034e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ea:	4651      	mov	r1, sl
 80034ec:	00ca      	lsls	r2, r1, #3
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	4603      	mov	r3, r0
 80034f4:	4642      	mov	r2, r8
 80034f6:	189b      	adds	r3, r3, r2
 80034f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034fc:	464b      	mov	r3, r9
 80034fe:	460a      	mov	r2, r1
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003512:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003520:	4649      	mov	r1, r9
 8003522:	008b      	lsls	r3, r1, #2
 8003524:	4641      	mov	r1, r8
 8003526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800352a:	4641      	mov	r1, r8
 800352c:	008a      	lsls	r2, r1, #2
 800352e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003532:	f7fd fb49 	bl	8000bc8 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4611      	mov	r1, r2
 800353c:	4b38      	ldr	r3, [pc, #224]	@ (8003620 <UART_SetConfig+0x4e4>)
 800353e:	fba3 2301 	umull	r2, r3, r3, r1
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2264      	movs	r2, #100	@ 0x64
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	1acb      	subs	r3, r1, r3
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	3332      	adds	r3, #50	@ 0x32
 8003550:	4a33      	ldr	r2, [pc, #204]	@ (8003620 <UART_SetConfig+0x4e4>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800355c:	441c      	add	r4, r3
 800355e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003562:	2200      	movs	r2, #0
 8003564:	673b      	str	r3, [r7, #112]	@ 0x70
 8003566:	677a      	str	r2, [r7, #116]	@ 0x74
 8003568:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	1891      	adds	r1, r2, r2
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	415b      	adcs	r3, r3
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800357c:	4641      	mov	r1, r8
 800357e:	1851      	adds	r1, r2, r1
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	4649      	mov	r1, r9
 8003584:	414b      	adcs	r3, r1
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003594:	4659      	mov	r1, fp
 8003596:	00cb      	lsls	r3, r1, #3
 8003598:	4651      	mov	r1, sl
 800359a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359e:	4651      	mov	r1, sl
 80035a0:	00ca      	lsls	r2, r1, #3
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	4642      	mov	r2, r8
 80035aa:	189b      	adds	r3, r3, r2
 80035ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ae:	464b      	mov	r3, r9
 80035b0:	460a      	mov	r2, r1
 80035b2:	eb42 0303 	adc.w	r3, r2, r3
 80035b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80035c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035d0:	4649      	mov	r1, r9
 80035d2:	008b      	lsls	r3, r1, #2
 80035d4:	4641      	mov	r1, r8
 80035d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035da:	4641      	mov	r1, r8
 80035dc:	008a      	lsls	r2, r1, #2
 80035de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035e2:	f7fd faf1 	bl	8000bc8 <__aeabi_uldivmod>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003620 <UART_SetConfig+0x4e4>)
 80035ec:	fba3 1302 	umull	r1, r3, r3, r2
 80035f0:	095b      	lsrs	r3, r3, #5
 80035f2:	2164      	movs	r1, #100	@ 0x64
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	3332      	adds	r3, #50	@ 0x32
 80035fe:	4a08      	ldr	r2, [pc, #32]	@ (8003620 <UART_SetConfig+0x4e4>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	f003 020f 	and.w	r2, r3, #15
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4422      	add	r2, r4
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	bf00      	nop
 8003616:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800361a:	46bd      	mov	sp, r7
 800361c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003620:	51eb851f 	.word	0x51eb851f

08003624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003624:	b084      	sub	sp, #16
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	f107 001c 	add.w	r0, r7, #28
 8003632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003636:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800363a:	2b01      	cmp	r3, #1
 800363c:	d123      	bne.n	8003686 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003666:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 faa0 	bl	8003bc0 <USB_CoreReset>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e01b      	b.n	80036be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa94 	bl	8003bc0 <USB_CoreReset>
 8003698:	4603      	mov	r3, r0
 800369a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800369c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80036b0:	e005      	b.n	80036be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036be:	7fbb      	ldrb	r3, [r7, #30]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10b      	bne.n	80036dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f043 0206 	orr.w	r2, r3, #6
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036e8:	b004      	add	sp, #16
 80036ea:	4770      	bx	lr

080036ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 0201 	bic.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d115      	bne.n	800375c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800373c:	200a      	movs	r0, #10
 800373e:	f7fe f8e7 	bl	8001910 <HAL_Delay>
      ms += 10U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	330a      	adds	r3, #10
 8003746:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fa2b 	bl	8003ba4 <USB_GetMode>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d01e      	beq.n	8003792 <USB_SetCurrentMode+0x84>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2bc7      	cmp	r3, #199	@ 0xc7
 8003758:	d9f0      	bls.n	800373c <USB_SetCurrentMode+0x2e>
 800375a:	e01a      	b.n	8003792 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800376e:	200a      	movs	r0, #10
 8003770:	f7fe f8ce 	bl	8001910 <HAL_Delay>
      ms += 10U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	330a      	adds	r3, #10
 8003778:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa12 	bl	8003ba4 <USB_GetMode>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <USB_SetCurrentMode+0x84>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2bc7      	cmp	r3, #199	@ 0xc7
 800378a:	d9f0      	bls.n	800376e <USB_SetCurrentMode+0x60>
 800378c:	e001      	b.n	8003792 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e005      	b.n	800379e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2bc8      	cmp	r3, #200	@ 0xc8
 8003796:	d101      	bne.n	800379c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a8:	b084      	sub	sp, #16
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	e009      	b.n	80037dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	3340      	adds	r3, #64	@ 0x40
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	2200      	movs	r2, #0
 80037d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3301      	adds	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b0e      	cmp	r3, #14
 80037e0:	d9f2      	bls.n	80037c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11c      	bne.n	8003824 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037f8:	f043 0302 	orr.w	r3, r3, #2
 80037fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38
 8003822:	e00b      	b.n	800383c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003828:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003834:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003842:	461a      	mov	r2, r3
 8003844:	2300      	movs	r3, #0
 8003846:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003848:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10d      	bne.n	800386c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003858:	2100      	movs	r1, #0
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f968 	bl	8003b30 <USB_SetDevSpeed>
 8003860:	e008      	b.n	8003874 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003862:	2101      	movs	r1, #1
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f963 	bl	8003b30 <USB_SetDevSpeed>
 800386a:	e003      	b.n	8003874 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800386c:	2103      	movs	r1, #3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f95e 	bl	8003b30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003874:	2110      	movs	r1, #16
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8fa 	bl	8003a70 <USB_FlushTxFifo>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f924 	bl	8003ad4 <USB_FlushRxFifo>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389c:	461a      	mov	r2, r3
 800389e:	2300      	movs	r3, #0
 80038a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a8:	461a      	mov	r2, r3
 80038aa:	2300      	movs	r3, #0
 80038ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b4:	461a      	mov	r2, r3
 80038b6:	2300      	movs	r3, #0
 80038b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	e043      	b.n	8003948 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038d6:	d118      	bne.n	800390a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ea:	461a      	mov	r2, r3
 80038ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e013      	b.n	800391c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003900:	461a      	mov	r2, r3
 8003902:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e008      	b.n	800391c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003916:	461a      	mov	r2, r3
 8003918:	2300      	movs	r3, #0
 800391a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	015a      	lsls	r2, r3, #5
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003928:	461a      	mov	r2, r3
 800392a:	2300      	movs	r3, #0
 800392c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800393a:	461a      	mov	r2, r3
 800393c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003940:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	3301      	adds	r3, #1
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800394c:	461a      	mov	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4293      	cmp	r3, r2
 8003952:	d3b5      	bcc.n	80038c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e043      	b.n	80039e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800396c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003970:	d118      	bne.n	80039a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10a      	bne.n	800398e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003984:	461a      	mov	r2, r3
 8003986:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e013      	b.n	80039b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399a:	461a      	mov	r2, r3
 800399c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e008      	b.n	80039b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b0:	461a      	mov	r2, r3
 80039b2:	2300      	movs	r3, #0
 80039b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c2:	461a      	mov	r2, r3
 80039c4:	2300      	movs	r3, #0
 80039c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	3301      	adds	r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039e6:	461a      	mov	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d3b5      	bcc.n	800395a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a00:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a0e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f043 0210 	orr.w	r2, r3, #16
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <USB_DevInit+0x2c4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f043 0208 	orr.w	r2, r3, #8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a54:	f043 0304 	orr.w	r3, r3, #4
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a68:	b004      	add	sp, #16
 8003a6a:	4770      	bx	lr
 8003a6c:	803c3800 	.word	0x803c3800

08003a70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3301      	adds	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a8a:	d901      	bls.n	8003a90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e01b      	b.n	8003ac8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	daf2      	bge.n	8003a7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	019b      	lsls	r3, r3, #6
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ab4:	d901      	bls.n	8003aba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e006      	b.n	8003ac8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0320 	and.w	r3, r3, #32
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d0f0      	beq.n	8003aa8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003aec:	d901      	bls.n	8003af2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e018      	b.n	8003b24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	daf2      	bge.n	8003ae0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2210      	movs	r2, #16
 8003b02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3301      	adds	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b10:	d901      	bls.n	8003b16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e006      	b.n	8003b24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d0f0      	beq.n	8003b04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003b7c:	f023 0303 	bic.w	r3, r3, #3
 8003b80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bd8:	d901      	bls.n	8003bde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e01b      	b.n	8003c16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	daf2      	bge.n	8003bcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c02:	d901      	bls.n	8003c08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e006      	b.n	8003c16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d0f0      	beq.n	8003bf6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <std>:
 8003c24:	2300      	movs	r3, #0
 8003c26:	b510      	push	{r4, lr}
 8003c28:	4604      	mov	r4, r0
 8003c2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c32:	6083      	str	r3, [r0, #8]
 8003c34:	8181      	strh	r1, [r0, #12]
 8003c36:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c38:	81c2      	strh	r2, [r0, #14]
 8003c3a:	6183      	str	r3, [r0, #24]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	2208      	movs	r2, #8
 8003c40:	305c      	adds	r0, #92	@ 0x5c
 8003c42:	f000 f906 	bl	8003e52 <memset>
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <std+0x58>)
 8003c48:	6223      	str	r3, [r4, #32]
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <std+0x5c>)
 8003c4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <std+0x60>)
 8003c50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <std+0x64>)
 8003c54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c56:	4b0d      	ldr	r3, [pc, #52]	@ (8003c8c <std+0x68>)
 8003c58:	61e4      	str	r4, [r4, #28]
 8003c5a:	429c      	cmp	r4, r3
 8003c5c:	d006      	beq.n	8003c6c <std+0x48>
 8003c5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c62:	4294      	cmp	r4, r2
 8003c64:	d002      	beq.n	8003c6c <std+0x48>
 8003c66:	33d0      	adds	r3, #208	@ 0xd0
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d105      	bne.n	8003c78 <std+0x54>
 8003c6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c74:	f000 b966 	b.w	8003f44 <__retarget_lock_init_recursive>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08003dcd 	.word	0x08003dcd
 8003c80:	08003def 	.word	0x08003def
 8003c84:	08003e27 	.word	0x08003e27
 8003c88:	08003e4b 	.word	0x08003e4b
 8003c8c:	20000e40 	.word	0x20000e40

08003c90 <stdio_exit_handler>:
 8003c90:	4a02      	ldr	r2, [pc, #8]	@ (8003c9c <stdio_exit_handler+0xc>)
 8003c92:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <stdio_exit_handler+0x10>)
 8003c94:	4803      	ldr	r0, [pc, #12]	@ (8003ca4 <stdio_exit_handler+0x14>)
 8003c96:	f000 b869 	b.w	8003d6c <_fwalk_sglue>
 8003c9a:	bf00      	nop
 8003c9c:	2000000c 	.word	0x2000000c
 8003ca0:	080064f5 	.word	0x080064f5
 8003ca4:	20000020 	.word	0x20000020

08003ca8 <cleanup_stdio>:
 8003ca8:	6841      	ldr	r1, [r0, #4]
 8003caa:	4b0c      	ldr	r3, [pc, #48]	@ (8003cdc <cleanup_stdio+0x34>)
 8003cac:	4299      	cmp	r1, r3
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	d001      	beq.n	8003cb8 <cleanup_stdio+0x10>
 8003cb4:	f002 fc1e 	bl	80064f4 <_fclose_r>
 8003cb8:	68a1      	ldr	r1, [r4, #8]
 8003cba:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <cleanup_stdio+0x38>)
 8003cbc:	4299      	cmp	r1, r3
 8003cbe:	d002      	beq.n	8003cc6 <cleanup_stdio+0x1e>
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f002 fc17 	bl	80064f4 <_fclose_r>
 8003cc6:	68e1      	ldr	r1, [r4, #12]
 8003cc8:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <cleanup_stdio+0x3c>)
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	d004      	beq.n	8003cd8 <cleanup_stdio+0x30>
 8003cce:	4620      	mov	r0, r4
 8003cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd4:	f002 bc0e 	b.w	80064f4 <_fclose_r>
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	20000e40 	.word	0x20000e40
 8003ce0:	20000ea8 	.word	0x20000ea8
 8003ce4:	20000f10 	.word	0x20000f10

08003ce8 <global_stdio_init.part.0>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <global_stdio_init.part.0+0x30>)
 8003cec:	4c0b      	ldr	r4, [pc, #44]	@ (8003d1c <global_stdio_init.part.0+0x34>)
 8003cee:	4a0c      	ldr	r2, [pc, #48]	@ (8003d20 <global_stdio_init.part.0+0x38>)
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2104      	movs	r1, #4
 8003cf8:	f7ff ff94 	bl	8003c24 <std>
 8003cfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d00:	2201      	movs	r2, #1
 8003d02:	2109      	movs	r1, #9
 8003d04:	f7ff ff8e 	bl	8003c24 <std>
 8003d08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d12:	2112      	movs	r1, #18
 8003d14:	f7ff bf86 	b.w	8003c24 <std>
 8003d18:	20000f78 	.word	0x20000f78
 8003d1c:	20000e40 	.word	0x20000e40
 8003d20:	08003c91 	.word	0x08003c91

08003d24 <__sfp_lock_acquire>:
 8003d24:	4801      	ldr	r0, [pc, #4]	@ (8003d2c <__sfp_lock_acquire+0x8>)
 8003d26:	f000 b90f 	b.w	8003f48 <__retarget_lock_acquire_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	20000f82 	.word	0x20000f82

08003d30 <__sfp_lock_release>:
 8003d30:	4801      	ldr	r0, [pc, #4]	@ (8003d38 <__sfp_lock_release+0x8>)
 8003d32:	f000 b90a 	b.w	8003f4a <__retarget_lock_release_recursive>
 8003d36:	bf00      	nop
 8003d38:	20000f82 	.word	0x20000f82

08003d3c <__sinit>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4604      	mov	r4, r0
 8003d40:	f7ff fff0 	bl	8003d24 <__sfp_lock_acquire>
 8003d44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d46:	b11b      	cbz	r3, 8003d50 <__sinit+0x14>
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f7ff bff0 	b.w	8003d30 <__sfp_lock_release>
 8003d50:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <__sinit+0x28>)
 8003d52:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <__sinit+0x2c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f5      	bne.n	8003d48 <__sinit+0xc>
 8003d5c:	f7ff ffc4 	bl	8003ce8 <global_stdio_init.part.0>
 8003d60:	e7f2      	b.n	8003d48 <__sinit+0xc>
 8003d62:	bf00      	nop
 8003d64:	08003ca9 	.word	0x08003ca9
 8003d68:	20000f78 	.word	0x20000f78

08003d6c <_fwalk_sglue>:
 8003d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	4607      	mov	r7, r0
 8003d72:	4688      	mov	r8, r1
 8003d74:	4614      	mov	r4, r2
 8003d76:	2600      	movs	r6, #0
 8003d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d80:	d505      	bpl.n	8003d8e <_fwalk_sglue+0x22>
 8003d82:	6824      	ldr	r4, [r4, #0]
 8003d84:	2c00      	cmp	r4, #0
 8003d86:	d1f7      	bne.n	8003d78 <_fwalk_sglue+0xc>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d8e:	89ab      	ldrh	r3, [r5, #12]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d907      	bls.n	8003da4 <_fwalk_sglue+0x38>
 8003d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	d003      	beq.n	8003da4 <_fwalk_sglue+0x38>
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c0      	blx	r8
 8003da2:	4306      	orrs	r6, r0
 8003da4:	3568      	adds	r5, #104	@ 0x68
 8003da6:	e7e9      	b.n	8003d7c <_fwalk_sglue+0x10>

08003da8 <printf>:
 8003da8:	b40f      	push	{r0, r1, r2, r3}
 8003daa:	b507      	push	{r0, r1, r2, lr}
 8003dac:	4906      	ldr	r1, [pc, #24]	@ (8003dc8 <printf+0x20>)
 8003dae:	ab04      	add	r3, sp, #16
 8003db0:	6808      	ldr	r0, [r1, #0]
 8003db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db6:	6881      	ldr	r1, [r0, #8]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	f000 fc35 	bl	8004628 <_vfprintf_r>
 8003dbe:	b003      	add	sp, #12
 8003dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dc4:	b004      	add	sp, #16
 8003dc6:	4770      	bx	lr
 8003dc8:	20000018 	.word	0x20000018

08003dcc <__sread>:
 8003dcc:	b510      	push	{r4, lr}
 8003dce:	460c      	mov	r4, r1
 8003dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd4:	f000 f868 	bl	8003ea8 <_read_r>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	bfab      	itete	ge
 8003ddc:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8003dde:	89a3      	ldrhlt	r3, [r4, #12]
 8003de0:	181b      	addge	r3, r3, r0
 8003de2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003de6:	bfac      	ite	ge
 8003de8:	6523      	strge	r3, [r4, #80]	@ 0x50
 8003dea:	81a3      	strhlt	r3, [r4, #12]
 8003dec:	bd10      	pop	{r4, pc}

08003dee <__swrite>:
 8003dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df2:	461f      	mov	r7, r3
 8003df4:	898b      	ldrh	r3, [r1, #12]
 8003df6:	05db      	lsls	r3, r3, #23
 8003df8:	4605      	mov	r5, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	4616      	mov	r6, r2
 8003dfe:	d505      	bpl.n	8003e0c <__swrite+0x1e>
 8003e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e04:	2302      	movs	r3, #2
 8003e06:	2200      	movs	r2, #0
 8003e08:	f000 f83c 	bl	8003e84 <_lseek_r>
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	4632      	mov	r2, r6
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e22:	f000 b853 	b.w	8003ecc <_write_r>

08003e26 <__sseek>:
 8003e26:	b510      	push	{r4, lr}
 8003e28:	460c      	mov	r4, r1
 8003e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2e:	f000 f829 	bl	8003e84 <_lseek_r>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	bf15      	itete	ne
 8003e38:	6520      	strne	r0, [r4, #80]	@ 0x50
 8003e3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003e3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003e42:	81a3      	strheq	r3, [r4, #12]
 8003e44:	bf18      	it	ne
 8003e46:	81a3      	strhne	r3, [r4, #12]
 8003e48:	bd10      	pop	{r4, pc}

08003e4a <__sclose>:
 8003e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4e:	f000 b809 	b.w	8003e64 <_close_r>

08003e52 <memset>:
 8003e52:	4402      	add	r2, r0
 8003e54:	4603      	mov	r3, r0
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d100      	bne.n	8003e5c <memset+0xa>
 8003e5a:	4770      	bx	lr
 8003e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e60:	e7f9      	b.n	8003e56 <memset+0x4>
	...

08003e64 <_close_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d06      	ldr	r5, [pc, #24]	@ (8003e80 <_close_r+0x1c>)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fd fc35 	bl	80016de <_close>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d102      	bne.n	8003e7e <_close_r+0x1a>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b103      	cbz	r3, 8003e7e <_close_r+0x1a>
 8003e7c:	6023      	str	r3, [r4, #0]
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	20000f7c 	.word	0x20000f7c

08003e84 <_lseek_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4d07      	ldr	r5, [pc, #28]	@ (8003ea4 <_lseek_r+0x20>)
 8003e88:	4604      	mov	r4, r0
 8003e8a:	4608      	mov	r0, r1
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	2200      	movs	r2, #0
 8003e90:	602a      	str	r2, [r5, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f7fd fc4a 	bl	800172c <_lseek>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_lseek_r+0x1e>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_lseek_r+0x1e>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000f7c 	.word	0x20000f7c

08003ea8 <_read_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4d07      	ldr	r5, [pc, #28]	@ (8003ec8 <_read_r+0x20>)
 8003eac:	4604      	mov	r4, r0
 8003eae:	4608      	mov	r0, r1
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	602a      	str	r2, [r5, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f7fd fbd8 	bl	800166c <_read>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_read_r+0x1e>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_read_r+0x1e>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	20000f7c 	.word	0x20000f7c

08003ecc <_write_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4d07      	ldr	r5, [pc, #28]	@ (8003eec <_write_r+0x20>)
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	4608      	mov	r0, r1
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	602a      	str	r2, [r5, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	f7fd fbe3 	bl	80016a6 <_write>
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	d102      	bne.n	8003eea <_write_r+0x1e>
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	b103      	cbz	r3, 8003eea <_write_r+0x1e>
 8003ee8:	6023      	str	r3, [r4, #0]
 8003eea:	bd38      	pop	{r3, r4, r5, pc}
 8003eec:	20000f7c 	.word	0x20000f7c

08003ef0 <__errno>:
 8003ef0:	4b01      	ldr	r3, [pc, #4]	@ (8003ef8 <__errno+0x8>)
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000018 	.word	0x20000018

08003efc <__libc_init_array>:
 8003efc:	b570      	push	{r4, r5, r6, lr}
 8003efe:	4d0d      	ldr	r5, [pc, #52]	@ (8003f34 <__libc_init_array+0x38>)
 8003f00:	4c0d      	ldr	r4, [pc, #52]	@ (8003f38 <__libc_init_array+0x3c>)
 8003f02:	1b64      	subs	r4, r4, r5
 8003f04:	10a4      	asrs	r4, r4, #2
 8003f06:	2600      	movs	r6, #0
 8003f08:	42a6      	cmp	r6, r4
 8003f0a:	d109      	bne.n	8003f20 <__libc_init_array+0x24>
 8003f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8003f3c <__libc_init_array+0x40>)
 8003f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8003f40 <__libc_init_array+0x44>)
 8003f10:	f004 fbb6 	bl	8008680 <_init>
 8003f14:	1b64      	subs	r4, r4, r5
 8003f16:	10a4      	asrs	r4, r4, #2
 8003f18:	2600      	movs	r6, #0
 8003f1a:	42a6      	cmp	r6, r4
 8003f1c:	d105      	bne.n	8003f2a <__libc_init_array+0x2e>
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f24:	4798      	blx	r3
 8003f26:	3601      	adds	r6, #1
 8003f28:	e7ee      	b.n	8003f08 <__libc_init_array+0xc>
 8003f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2e:	4798      	blx	r3
 8003f30:	3601      	adds	r6, #1
 8003f32:	e7f2      	b.n	8003f1a <__libc_init_array+0x1e>
 8003f34:	08008a48 	.word	0x08008a48
 8003f38:	08008a48 	.word	0x08008a48
 8003f3c:	08008a48 	.word	0x08008a48
 8003f40:	08008a50 	.word	0x08008a50

08003f44 <__retarget_lock_init_recursive>:
 8003f44:	4770      	bx	lr

08003f46 <__retarget_lock_close_recursive>:
 8003f46:	4770      	bx	lr

08003f48 <__retarget_lock_acquire_recursive>:
 8003f48:	4770      	bx	lr

08003f4a <__retarget_lock_release_recursive>:
 8003f4a:	4770      	bx	lr

08003f4c <register_fini>:
 8003f4c:	4b02      	ldr	r3, [pc, #8]	@ (8003f58 <register_fini+0xc>)
 8003f4e:	b113      	cbz	r3, 8003f56 <register_fini+0xa>
 8003f50:	4802      	ldr	r0, [pc, #8]	@ (8003f5c <register_fini+0x10>)
 8003f52:	f000 b805 	b.w	8003f60 <atexit>
 8003f56:	4770      	bx	lr
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	08006ba5 	.word	0x08006ba5

08003f60 <atexit>:
 8003f60:	2300      	movs	r3, #0
 8003f62:	4601      	mov	r1, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f002 be80 	b.w	8006c6c <__register_exitproc>

08003f6c <_malloc_trim_r>:
 8003f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f70:	4606      	mov	r6, r0
 8003f72:	2008      	movs	r0, #8
 8003f74:	4689      	mov	r9, r1
 8003f76:	f002 fe29 	bl	8006bcc <sysconf>
 8003f7a:	4f24      	ldr	r7, [pc, #144]	@ (800400c <_malloc_trim_r+0xa0>)
 8003f7c:	4680      	mov	r8, r0
 8003f7e:	4630      	mov	r0, r6
 8003f80:	f000 fb44 	bl	800460c <__malloc_lock>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	685d      	ldr	r5, [r3, #4]
 8003f88:	f025 0503 	bic.w	r5, r5, #3
 8003f8c:	f1a5 0411 	sub.w	r4, r5, #17
 8003f90:	eba4 0409 	sub.w	r4, r4, r9
 8003f94:	4444      	add	r4, r8
 8003f96:	fbb4 f4f8 	udiv	r4, r4, r8
 8003f9a:	3c01      	subs	r4, #1
 8003f9c:	fb08 f404 	mul.w	r4, r8, r4
 8003fa0:	45a0      	cmp	r8, r4
 8003fa2:	dd05      	ble.n	8003fb0 <_malloc_trim_r+0x44>
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f000 fb37 	bl	8004618 <__malloc_unlock>
 8003faa:	2000      	movs	r0, #0
 8003fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f002 fde6 	bl	8006b84 <_sbrk_r>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	442b      	add	r3, r5
 8003fbc:	4298      	cmp	r0, r3
 8003fbe:	d1f1      	bne.n	8003fa4 <_malloc_trim_r+0x38>
 8003fc0:	4261      	negs	r1, r4
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f002 fdde 	bl	8006b84 <_sbrk_r>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d110      	bne.n	8003fee <_malloc_trim_r+0x82>
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f002 fdd8 	bl	8006b84 <_sbrk_r>
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	1a83      	subs	r3, r0, r2
 8003fd8:	2b0f      	cmp	r3, #15
 8003fda:	dde3      	ble.n	8003fa4 <_malloc_trim_r+0x38>
 8003fdc:	490c      	ldr	r1, [pc, #48]	@ (8004010 <_malloc_trim_r+0xa4>)
 8003fde:	6809      	ldr	r1, [r1, #0]
 8003fe0:	1a40      	subs	r0, r0, r1
 8003fe2:	490c      	ldr	r1, [pc, #48]	@ (8004014 <_malloc_trim_r+0xa8>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6008      	str	r0, [r1, #0]
 8003fea:	6053      	str	r3, [r2, #4]
 8003fec:	e7da      	b.n	8003fa4 <_malloc_trim_r+0x38>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <_malloc_trim_r+0xa8>)
 8003ff2:	1b2d      	subs	r5, r5, r4
 8003ff4:	f045 0501 	orr.w	r5, r5, #1
 8003ff8:	605d      	str	r5, [r3, #4]
 8003ffa:	6813      	ldr	r3, [r2, #0]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	1b1b      	subs	r3, r3, r4
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	f000 fb09 	bl	8004618 <__malloc_unlock>
 8004006:	2001      	movs	r0, #1
 8004008:	e7d0      	b.n	8003fac <_malloc_trim_r+0x40>
 800400a:	bf00      	nop
 800400c:	2000014c 	.word	0x2000014c
 8004010:	20000144 	.word	0x20000144
 8004014:	20000f88 	.word	0x20000f88

08004018 <_free_r>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	4604      	mov	r4, r0
 800401c:	460f      	mov	r7, r1
 800401e:	2900      	cmp	r1, #0
 8004020:	f000 80b1 	beq.w	8004186 <_free_r+0x16e>
 8004024:	f000 faf2 	bl	800460c <__malloc_lock>
 8004028:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800402c:	4d56      	ldr	r5, [pc, #344]	@ (8004188 <_free_r+0x170>)
 800402e:	f022 0001 	bic.w	r0, r2, #1
 8004032:	f1a7 0308 	sub.w	r3, r7, #8
 8004036:	eb03 0c00 	add.w	ip, r3, r0
 800403a:	68a9      	ldr	r1, [r5, #8]
 800403c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8004040:	4561      	cmp	r1, ip
 8004042:	f026 0603 	bic.w	r6, r6, #3
 8004046:	f002 0201 	and.w	r2, r2, #1
 800404a:	d11b      	bne.n	8004084 <_free_r+0x6c>
 800404c:	4406      	add	r6, r0
 800404e:	b93a      	cbnz	r2, 8004060 <_free_r+0x48>
 8004050:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	4416      	add	r6, r2
 8004058:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800405c:	60ca      	str	r2, [r1, #12]
 800405e:	6091      	str	r1, [r2, #8]
 8004060:	f046 0201 	orr.w	r2, r6, #1
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	60ab      	str	r3, [r5, #8]
 8004068:	4b48      	ldr	r3, [pc, #288]	@ (800418c <_free_r+0x174>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	42b3      	cmp	r3, r6
 800406e:	d804      	bhi.n	800407a <_free_r+0x62>
 8004070:	4b47      	ldr	r3, [pc, #284]	@ (8004190 <_free_r+0x178>)
 8004072:	4620      	mov	r0, r4
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	f7ff ff79 	bl	8003f6c <_malloc_trim_r>
 800407a:	4620      	mov	r0, r4
 800407c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004080:	f000 baca 	b.w	8004618 <__malloc_unlock>
 8004084:	f8cc 6004 	str.w	r6, [ip, #4]
 8004088:	2a00      	cmp	r2, #0
 800408a:	d138      	bne.n	80040fe <_free_r+0xe6>
 800408c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8004090:	1a5b      	subs	r3, r3, r1
 8004092:	4408      	add	r0, r1
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	f105 0708 	add.w	r7, r5, #8
 800409a:	42b9      	cmp	r1, r7
 800409c:	d031      	beq.n	8004102 <_free_r+0xea>
 800409e:	68df      	ldr	r7, [r3, #12]
 80040a0:	60cf      	str	r7, [r1, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	eb0c 0106 	add.w	r1, ip, r6
 80040a8:	6849      	ldr	r1, [r1, #4]
 80040aa:	07c9      	lsls	r1, r1, #31
 80040ac:	d40b      	bmi.n	80040c6 <_free_r+0xae>
 80040ae:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80040b2:	4430      	add	r0, r6
 80040b4:	bb3a      	cbnz	r2, 8004106 <_free_r+0xee>
 80040b6:	4e37      	ldr	r6, [pc, #220]	@ (8004194 <_free_r+0x17c>)
 80040b8:	42b1      	cmp	r1, r6
 80040ba:	d124      	bne.n	8004106 <_free_r+0xee>
 80040bc:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80040c0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f040 0101 	orr.w	r1, r0, #1
 80040ca:	6059      	str	r1, [r3, #4]
 80040cc:	5018      	str	r0, [r3, r0]
 80040ce:	2a00      	cmp	r2, #0
 80040d0:	d1d3      	bne.n	800407a <_free_r+0x62>
 80040d2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80040d6:	d21b      	bcs.n	8004110 <_free_r+0xf8>
 80040d8:	08c2      	lsrs	r2, r0, #3
 80040da:	2101      	movs	r1, #1
 80040dc:	0940      	lsrs	r0, r0, #5
 80040de:	4081      	lsls	r1, r0
 80040e0:	6868      	ldr	r0, [r5, #4]
 80040e2:	3201      	adds	r2, #1
 80040e4:	4301      	orrs	r1, r0
 80040e6:	6069      	str	r1, [r5, #4]
 80040e8:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80040ec:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80040f0:	3908      	subs	r1, #8
 80040f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80040f6:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80040fa:	60c3      	str	r3, [r0, #12]
 80040fc:	e7bd      	b.n	800407a <_free_r+0x62>
 80040fe:	2200      	movs	r2, #0
 8004100:	e7d0      	b.n	80040a4 <_free_r+0x8c>
 8004102:	2201      	movs	r2, #1
 8004104:	e7ce      	b.n	80040a4 <_free_r+0x8c>
 8004106:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800410a:	60ce      	str	r6, [r1, #12]
 800410c:	60b1      	str	r1, [r6, #8]
 800410e:	e7da      	b.n	80040c6 <_free_r+0xae>
 8004110:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8004114:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8004118:	d214      	bcs.n	8004144 <_free_r+0x12c>
 800411a:	0982      	lsrs	r2, r0, #6
 800411c:	3238      	adds	r2, #56	@ 0x38
 800411e:	1c51      	adds	r1, r2, #1
 8004120:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004124:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004128:	428e      	cmp	r6, r1
 800412a:	d125      	bne.n	8004178 <_free_r+0x160>
 800412c:	2001      	movs	r0, #1
 800412e:	1092      	asrs	r2, r2, #2
 8004130:	fa00 f202 	lsl.w	r2, r0, r2
 8004134:	6868      	ldr	r0, [r5, #4]
 8004136:	4302      	orrs	r2, r0
 8004138:	606a      	str	r2, [r5, #4]
 800413a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800413e:	60b3      	str	r3, [r6, #8]
 8004140:	60cb      	str	r3, [r1, #12]
 8004142:	e79a      	b.n	800407a <_free_r+0x62>
 8004144:	2a14      	cmp	r2, #20
 8004146:	d801      	bhi.n	800414c <_free_r+0x134>
 8004148:	325b      	adds	r2, #91	@ 0x5b
 800414a:	e7e8      	b.n	800411e <_free_r+0x106>
 800414c:	2a54      	cmp	r2, #84	@ 0x54
 800414e:	d802      	bhi.n	8004156 <_free_r+0x13e>
 8004150:	0b02      	lsrs	r2, r0, #12
 8004152:	326e      	adds	r2, #110	@ 0x6e
 8004154:	e7e3      	b.n	800411e <_free_r+0x106>
 8004156:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800415a:	d802      	bhi.n	8004162 <_free_r+0x14a>
 800415c:	0bc2      	lsrs	r2, r0, #15
 800415e:	3277      	adds	r2, #119	@ 0x77
 8004160:	e7dd      	b.n	800411e <_free_r+0x106>
 8004162:	f240 5154 	movw	r1, #1364	@ 0x554
 8004166:	428a      	cmp	r2, r1
 8004168:	bf9a      	itte	ls
 800416a:	0c82      	lsrls	r2, r0, #18
 800416c:	327c      	addls	r2, #124	@ 0x7c
 800416e:	227e      	movhi	r2, #126	@ 0x7e
 8004170:	e7d5      	b.n	800411e <_free_r+0x106>
 8004172:	6889      	ldr	r1, [r1, #8]
 8004174:	428e      	cmp	r6, r1
 8004176:	d004      	beq.n	8004182 <_free_r+0x16a>
 8004178:	684a      	ldr	r2, [r1, #4]
 800417a:	f022 0203 	bic.w	r2, r2, #3
 800417e:	4282      	cmp	r2, r0
 8004180:	d8f7      	bhi.n	8004172 <_free_r+0x15a>
 8004182:	68ce      	ldr	r6, [r1, #12]
 8004184:	e7d9      	b.n	800413a <_free_r+0x122>
 8004186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004188:	2000014c 	.word	0x2000014c
 800418c:	20000148 	.word	0x20000148
 8004190:	20000fb8 	.word	0x20000fb8
 8004194:	20000154 	.word	0x20000154

08004198 <_malloc_r>:
 8004198:	f101 030b 	add.w	r3, r1, #11
 800419c:	2b16      	cmp	r3, #22
 800419e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a2:	4605      	mov	r5, r0
 80041a4:	d906      	bls.n	80041b4 <_malloc_r+0x1c>
 80041a6:	f033 0707 	bics.w	r7, r3, #7
 80041aa:	d504      	bpl.n	80041b6 <_malloc_r+0x1e>
 80041ac:	230c      	movs	r3, #12
 80041ae:	602b      	str	r3, [r5, #0]
 80041b0:	2400      	movs	r4, #0
 80041b2:	e1a3      	b.n	80044fc <_malloc_r+0x364>
 80041b4:	2710      	movs	r7, #16
 80041b6:	42b9      	cmp	r1, r7
 80041b8:	d8f8      	bhi.n	80041ac <_malloc_r+0x14>
 80041ba:	4628      	mov	r0, r5
 80041bc:	f000 fa26 	bl	800460c <__malloc_lock>
 80041c0:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 80041c4:	4eaf      	ldr	r6, [pc, #700]	@ (8004484 <_malloc_r+0x2ec>)
 80041c6:	d237      	bcs.n	8004238 <_malloc_r+0xa0>
 80041c8:	f107 0208 	add.w	r2, r7, #8
 80041cc:	4432      	add	r2, r6
 80041ce:	f1a2 0108 	sub.w	r1, r2, #8
 80041d2:	6854      	ldr	r4, [r2, #4]
 80041d4:	428c      	cmp	r4, r1
 80041d6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80041da:	d102      	bne.n	80041e2 <_malloc_r+0x4a>
 80041dc:	68d4      	ldr	r4, [r2, #12]
 80041de:	42a2      	cmp	r2, r4
 80041e0:	d010      	beq.n	8004204 <_malloc_r+0x6c>
 80041e2:	6863      	ldr	r3, [r4, #4]
 80041e4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80041e8:	f023 0303 	bic.w	r3, r3, #3
 80041ec:	60ca      	str	r2, [r1, #12]
 80041ee:	4423      	add	r3, r4
 80041f0:	6091      	str	r1, [r2, #8]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 fa0c 	bl	8004618 <__malloc_unlock>
 8004200:	3408      	adds	r4, #8
 8004202:	e17b      	b.n	80044fc <_malloc_r+0x364>
 8004204:	3302      	adds	r3, #2
 8004206:	6934      	ldr	r4, [r6, #16]
 8004208:	499f      	ldr	r1, [pc, #636]	@ (8004488 <_malloc_r+0x2f0>)
 800420a:	428c      	cmp	r4, r1
 800420c:	d077      	beq.n	80042fe <_malloc_r+0x166>
 800420e:	6862      	ldr	r2, [r4, #4]
 8004210:	f022 0c03 	bic.w	ip, r2, #3
 8004214:	ebac 0007 	sub.w	r0, ip, r7
 8004218:	280f      	cmp	r0, #15
 800421a:	dd48      	ble.n	80042ae <_malloc_r+0x116>
 800421c:	19e2      	adds	r2, r4, r7
 800421e:	f040 0301 	orr.w	r3, r0, #1
 8004222:	f047 0701 	orr.w	r7, r7, #1
 8004226:	6067      	str	r7, [r4, #4]
 8004228:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800422c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8004230:	6053      	str	r3, [r2, #4]
 8004232:	f844 000c 	str.w	r0, [r4, ip]
 8004236:	e7e0      	b.n	80041fa <_malloc_r+0x62>
 8004238:	0a7b      	lsrs	r3, r7, #9
 800423a:	d02a      	beq.n	8004292 <_malloc_r+0xfa>
 800423c:	2b04      	cmp	r3, #4
 800423e:	d812      	bhi.n	8004266 <_malloc_r+0xce>
 8004240:	09bb      	lsrs	r3, r7, #6
 8004242:	3338      	adds	r3, #56	@ 0x38
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800424a:	f1a2 0c08 	sub.w	ip, r2, #8
 800424e:	6854      	ldr	r4, [r2, #4]
 8004250:	4564      	cmp	r4, ip
 8004252:	d006      	beq.n	8004262 <_malloc_r+0xca>
 8004254:	6862      	ldr	r2, [r4, #4]
 8004256:	f022 0203 	bic.w	r2, r2, #3
 800425a:	1bd0      	subs	r0, r2, r7
 800425c:	280f      	cmp	r0, #15
 800425e:	dd1c      	ble.n	800429a <_malloc_r+0x102>
 8004260:	3b01      	subs	r3, #1
 8004262:	3301      	adds	r3, #1
 8004264:	e7cf      	b.n	8004206 <_malloc_r+0x6e>
 8004266:	2b14      	cmp	r3, #20
 8004268:	d801      	bhi.n	800426e <_malloc_r+0xd6>
 800426a:	335b      	adds	r3, #91	@ 0x5b
 800426c:	e7ea      	b.n	8004244 <_malloc_r+0xac>
 800426e:	2b54      	cmp	r3, #84	@ 0x54
 8004270:	d802      	bhi.n	8004278 <_malloc_r+0xe0>
 8004272:	0b3b      	lsrs	r3, r7, #12
 8004274:	336e      	adds	r3, #110	@ 0x6e
 8004276:	e7e5      	b.n	8004244 <_malloc_r+0xac>
 8004278:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800427c:	d802      	bhi.n	8004284 <_malloc_r+0xec>
 800427e:	0bfb      	lsrs	r3, r7, #15
 8004280:	3377      	adds	r3, #119	@ 0x77
 8004282:	e7df      	b.n	8004244 <_malloc_r+0xac>
 8004284:	f240 5254 	movw	r2, #1364	@ 0x554
 8004288:	4293      	cmp	r3, r2
 800428a:	d804      	bhi.n	8004296 <_malloc_r+0xfe>
 800428c:	0cbb      	lsrs	r3, r7, #18
 800428e:	337c      	adds	r3, #124	@ 0x7c
 8004290:	e7d8      	b.n	8004244 <_malloc_r+0xac>
 8004292:	233f      	movs	r3, #63	@ 0x3f
 8004294:	e7d6      	b.n	8004244 <_malloc_r+0xac>
 8004296:	237e      	movs	r3, #126	@ 0x7e
 8004298:	e7d4      	b.n	8004244 <_malloc_r+0xac>
 800429a:	2800      	cmp	r0, #0
 800429c:	68e1      	ldr	r1, [r4, #12]
 800429e:	db04      	blt.n	80042aa <_malloc_r+0x112>
 80042a0:	68a3      	ldr	r3, [r4, #8]
 80042a2:	60d9      	str	r1, [r3, #12]
 80042a4:	608b      	str	r3, [r1, #8]
 80042a6:	18a3      	adds	r3, r4, r2
 80042a8:	e7a3      	b.n	80041f2 <_malloc_r+0x5a>
 80042aa:	460c      	mov	r4, r1
 80042ac:	e7d0      	b.n	8004250 <_malloc_r+0xb8>
 80042ae:	2800      	cmp	r0, #0
 80042b0:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80042b4:	db07      	blt.n	80042c6 <_malloc_r+0x12e>
 80042b6:	44a4      	add	ip, r4
 80042b8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	f8cc 3004 	str.w	r3, [ip, #4]
 80042c4:	e799      	b.n	80041fa <_malloc_r+0x62>
 80042c6:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80042ca:	6870      	ldr	r0, [r6, #4]
 80042cc:	f080 8095 	bcs.w	80043fa <_malloc_r+0x262>
 80042d0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80042d4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80042d8:	f04f 0c01 	mov.w	ip, #1
 80042dc:	3201      	adds	r2, #1
 80042de:	fa0c fc0e 	lsl.w	ip, ip, lr
 80042e2:	ea4c 0000 	orr.w	r0, ip, r0
 80042e6:	6070      	str	r0, [r6, #4]
 80042e8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80042ec:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80042f0:	3808      	subs	r0, #8
 80042f2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80042f6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80042fa:	f8cc 400c 	str.w	r4, [ip, #12]
 80042fe:	1098      	asrs	r0, r3, #2
 8004300:	2201      	movs	r2, #1
 8004302:	4082      	lsls	r2, r0
 8004304:	6870      	ldr	r0, [r6, #4]
 8004306:	4290      	cmp	r0, r2
 8004308:	d326      	bcc.n	8004358 <_malloc_r+0x1c0>
 800430a:	4210      	tst	r0, r2
 800430c:	d106      	bne.n	800431c <_malloc_r+0x184>
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	0052      	lsls	r2, r2, #1
 8004314:	4210      	tst	r0, r2
 8004316:	f103 0304 	add.w	r3, r3, #4
 800431a:	d0fa      	beq.n	8004312 <_malloc_r+0x17a>
 800431c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8004320:	46c1      	mov	r9, r8
 8004322:	469e      	mov	lr, r3
 8004324:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004328:	454c      	cmp	r4, r9
 800432a:	f040 80b9 	bne.w	80044a0 <_malloc_r+0x308>
 800432e:	f10e 0e01 	add.w	lr, lr, #1
 8004332:	f01e 0f03 	tst.w	lr, #3
 8004336:	f109 0908 	add.w	r9, r9, #8
 800433a:	d1f3      	bne.n	8004324 <_malloc_r+0x18c>
 800433c:	0798      	lsls	r0, r3, #30
 800433e:	f040 80e3 	bne.w	8004508 <_malloc_r+0x370>
 8004342:	6873      	ldr	r3, [r6, #4]
 8004344:	ea23 0302 	bic.w	r3, r3, r2
 8004348:	6073      	str	r3, [r6, #4]
 800434a:	6870      	ldr	r0, [r6, #4]
 800434c:	0052      	lsls	r2, r2, #1
 800434e:	4290      	cmp	r0, r2
 8004350:	d302      	bcc.n	8004358 <_malloc_r+0x1c0>
 8004352:	2a00      	cmp	r2, #0
 8004354:	f040 80e5 	bne.w	8004522 <_malloc_r+0x38a>
 8004358:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800435c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004360:	f023 0903 	bic.w	r9, r3, #3
 8004364:	45b9      	cmp	r9, r7
 8004366:	d304      	bcc.n	8004372 <_malloc_r+0x1da>
 8004368:	eba9 0207 	sub.w	r2, r9, r7
 800436c:	2a0f      	cmp	r2, #15
 800436e:	f300 8141 	bgt.w	80045f4 <_malloc_r+0x45c>
 8004372:	4b46      	ldr	r3, [pc, #280]	@ (800448c <_malloc_r+0x2f4>)
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	3110      	adds	r1, #16
 8004378:	4439      	add	r1, r7
 800437a:	2008      	movs	r0, #8
 800437c:	9101      	str	r1, [sp, #4]
 800437e:	f002 fc25 	bl	8006bcc <sysconf>
 8004382:	4a43      	ldr	r2, [pc, #268]	@ (8004490 <_malloc_r+0x2f8>)
 8004384:	9901      	ldr	r1, [sp, #4]
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	bf1f      	itttt	ne
 800438c:	f101 31ff 	addne.w	r1, r1, #4294967295
 8004390:	1809      	addne	r1, r1, r0
 8004392:	4243      	negne	r3, r0
 8004394:	4019      	andne	r1, r3
 8004396:	4680      	mov	r8, r0
 8004398:	4628      	mov	r0, r5
 800439a:	9101      	str	r1, [sp, #4]
 800439c:	f002 fbf2 	bl	8006b84 <_sbrk_r>
 80043a0:	1c42      	adds	r2, r0, #1
 80043a2:	eb0a 0b09 	add.w	fp, sl, r9
 80043a6:	4604      	mov	r4, r0
 80043a8:	f000 80f7 	beq.w	800459a <_malloc_r+0x402>
 80043ac:	4583      	cmp	fp, r0
 80043ae:	9901      	ldr	r1, [sp, #4]
 80043b0:	4a37      	ldr	r2, [pc, #220]	@ (8004490 <_malloc_r+0x2f8>)
 80043b2:	d902      	bls.n	80043ba <_malloc_r+0x222>
 80043b4:	45b2      	cmp	sl, r6
 80043b6:	f040 80f0 	bne.w	800459a <_malloc_r+0x402>
 80043ba:	4b36      	ldr	r3, [pc, #216]	@ (8004494 <_malloc_r+0x2fc>)
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	45a3      	cmp	fp, r4
 80043c0:	eb00 0e01 	add.w	lr, r0, r1
 80043c4:	f8c3 e000 	str.w	lr, [r3]
 80043c8:	f108 3cff 	add.w	ip, r8, #4294967295
 80043cc:	f040 80ab 	bne.w	8004526 <_malloc_r+0x38e>
 80043d0:	ea1b 0f0c 	tst.w	fp, ip
 80043d4:	f040 80a7 	bne.w	8004526 <_malloc_r+0x38e>
 80043d8:	68b2      	ldr	r2, [r6, #8]
 80043da:	4449      	add	r1, r9
 80043dc:	f041 0101 	orr.w	r1, r1, #1
 80043e0:	6051      	str	r1, [r2, #4]
 80043e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004498 <_malloc_r+0x300>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6811      	ldr	r1, [r2, #0]
 80043e8:	428b      	cmp	r3, r1
 80043ea:	bf88      	it	hi
 80043ec:	6013      	strhi	r3, [r2, #0]
 80043ee:	4a2b      	ldr	r2, [pc, #172]	@ (800449c <_malloc_r+0x304>)
 80043f0:	6811      	ldr	r1, [r2, #0]
 80043f2:	428b      	cmp	r3, r1
 80043f4:	bf88      	it	hi
 80043f6:	6013      	strhi	r3, [r2, #0]
 80043f8:	e0cf      	b.n	800459a <_malloc_r+0x402>
 80043fa:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80043fe:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8004402:	d218      	bcs.n	8004436 <_malloc_r+0x29e>
 8004404:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8004408:	3238      	adds	r2, #56	@ 0x38
 800440a:	f102 0e01 	add.w	lr, r2, #1
 800440e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8004412:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8004416:	45f0      	cmp	r8, lr
 8004418:	d12b      	bne.n	8004472 <_malloc_r+0x2da>
 800441a:	1092      	asrs	r2, r2, #2
 800441c:	f04f 0c01 	mov.w	ip, #1
 8004420:	fa0c f202 	lsl.w	r2, ip, r2
 8004424:	4302      	orrs	r2, r0
 8004426:	6072      	str	r2, [r6, #4]
 8004428:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800442c:	f8c8 4008 	str.w	r4, [r8, #8]
 8004430:	f8ce 400c 	str.w	r4, [lr, #12]
 8004434:	e763      	b.n	80042fe <_malloc_r+0x166>
 8004436:	2a14      	cmp	r2, #20
 8004438:	d801      	bhi.n	800443e <_malloc_r+0x2a6>
 800443a:	325b      	adds	r2, #91	@ 0x5b
 800443c:	e7e5      	b.n	800440a <_malloc_r+0x272>
 800443e:	2a54      	cmp	r2, #84	@ 0x54
 8004440:	d803      	bhi.n	800444a <_malloc_r+0x2b2>
 8004442:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8004446:	326e      	adds	r2, #110	@ 0x6e
 8004448:	e7df      	b.n	800440a <_malloc_r+0x272>
 800444a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800444e:	d803      	bhi.n	8004458 <_malloc_r+0x2c0>
 8004450:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8004454:	3277      	adds	r2, #119	@ 0x77
 8004456:	e7d8      	b.n	800440a <_malloc_r+0x272>
 8004458:	f240 5e54 	movw	lr, #1364	@ 0x554
 800445c:	4572      	cmp	r2, lr
 800445e:	bf9a      	itte	ls
 8004460:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8004464:	327c      	addls	r2, #124	@ 0x7c
 8004466:	227e      	movhi	r2, #126	@ 0x7e
 8004468:	e7cf      	b.n	800440a <_malloc_r+0x272>
 800446a:	f8de e008 	ldr.w	lr, [lr, #8]
 800446e:	45f0      	cmp	r8, lr
 8004470:	d005      	beq.n	800447e <_malloc_r+0x2e6>
 8004472:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004476:	f022 0203 	bic.w	r2, r2, #3
 800447a:	4562      	cmp	r2, ip
 800447c:	d8f5      	bhi.n	800446a <_malloc_r+0x2d2>
 800447e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8004482:	e7d1      	b.n	8004428 <_malloc_r+0x290>
 8004484:	2000014c 	.word	0x2000014c
 8004488:	20000154 	.word	0x20000154
 800448c:	20000fb8 	.word	0x20000fb8
 8004490:	20000144 	.word	0x20000144
 8004494:	20000f88 	.word	0x20000f88
 8004498:	20000fb4 	.word	0x20000fb4
 800449c:	20000fb0 	.word	0x20000fb0
 80044a0:	6860      	ldr	r0, [r4, #4]
 80044a2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80044a6:	f020 0003 	bic.w	r0, r0, #3
 80044aa:	eba0 0a07 	sub.w	sl, r0, r7
 80044ae:	f1ba 0f0f 	cmp.w	sl, #15
 80044b2:	dd12      	ble.n	80044da <_malloc_r+0x342>
 80044b4:	68a3      	ldr	r3, [r4, #8]
 80044b6:	19e2      	adds	r2, r4, r7
 80044b8:	f047 0701 	orr.w	r7, r7, #1
 80044bc:	6067      	str	r7, [r4, #4]
 80044be:	f8c3 c00c 	str.w	ip, [r3, #12]
 80044c2:	f8cc 3008 	str.w	r3, [ip, #8]
 80044c6:	f04a 0301 	orr.w	r3, sl, #1
 80044ca:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80044ce:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80044d2:	6053      	str	r3, [r2, #4]
 80044d4:	f844 a000 	str.w	sl, [r4, r0]
 80044d8:	e68f      	b.n	80041fa <_malloc_r+0x62>
 80044da:	f1ba 0f00 	cmp.w	sl, #0
 80044de:	db11      	blt.n	8004504 <_malloc_r+0x36c>
 80044e0:	4420      	add	r0, r4
 80044e2:	6843      	ldr	r3, [r0, #4]
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6043      	str	r3, [r0, #4]
 80044ea:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80044ee:	4628      	mov	r0, r5
 80044f0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80044f4:	f8cc 3008 	str.w	r3, [ip, #8]
 80044f8:	f000 f88e 	bl	8004618 <__malloc_unlock>
 80044fc:	4620      	mov	r0, r4
 80044fe:	b003      	add	sp, #12
 8004500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004504:	4664      	mov	r4, ip
 8004506:	e70f      	b.n	8004328 <_malloc_r+0x190>
 8004508:	f858 0908 	ldr.w	r0, [r8], #-8
 800450c:	4540      	cmp	r0, r8
 800450e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004512:	f43f af13 	beq.w	800433c <_malloc_r+0x1a4>
 8004516:	e718      	b.n	800434a <_malloc_r+0x1b2>
 8004518:	3304      	adds	r3, #4
 800451a:	0052      	lsls	r2, r2, #1
 800451c:	4210      	tst	r0, r2
 800451e:	d0fb      	beq.n	8004518 <_malloc_r+0x380>
 8004520:	e6fc      	b.n	800431c <_malloc_r+0x184>
 8004522:	4673      	mov	r3, lr
 8004524:	e7fa      	b.n	800451c <_malloc_r+0x384>
 8004526:	6810      	ldr	r0, [r2, #0]
 8004528:	3001      	adds	r0, #1
 800452a:	bf1b      	ittet	ne
 800452c:	eba4 0b0b 	subne.w	fp, r4, fp
 8004530:	eb0b 020e 	addne.w	r2, fp, lr
 8004534:	6014      	streq	r4, [r2, #0]
 8004536:	601a      	strne	r2, [r3, #0]
 8004538:	f014 0b07 	ands.w	fp, r4, #7
 800453c:	bf1a      	itte	ne
 800453e:	f1cb 0008 	rsbne	r0, fp, #8
 8004542:	1824      	addne	r4, r4, r0
 8004544:	4658      	moveq	r0, fp
 8004546:	1862      	adds	r2, r4, r1
 8004548:	ea02 010c 	and.w	r1, r2, ip
 800454c:	4480      	add	r8, r0
 800454e:	eba8 0801 	sub.w	r8, r8, r1
 8004552:	ea08 080c 	and.w	r8, r8, ip
 8004556:	4641      	mov	r1, r8
 8004558:	4628      	mov	r0, r5
 800455a:	9201      	str	r2, [sp, #4]
 800455c:	f002 fb12 	bl	8006b84 <_sbrk_r>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	9a01      	ldr	r2, [sp, #4]
 8004564:	4b28      	ldr	r3, [pc, #160]	@ (8004608 <_malloc_r+0x470>)
 8004566:	d107      	bne.n	8004578 <_malloc_r+0x3e0>
 8004568:	f1bb 0f00 	cmp.w	fp, #0
 800456c:	d023      	beq.n	80045b6 <_malloc_r+0x41e>
 800456e:	f1ab 0008 	sub.w	r0, fp, #8
 8004572:	4410      	add	r0, r2
 8004574:	f04f 0800 	mov.w	r8, #0
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	60b4      	str	r4, [r6, #8]
 800457c:	1b00      	subs	r0, r0, r4
 800457e:	4440      	add	r0, r8
 8004580:	4442      	add	r2, r8
 8004582:	f040 0001 	orr.w	r0, r0, #1
 8004586:	45b2      	cmp	sl, r6
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	6060      	str	r0, [r4, #4]
 800458c:	f43f af29 	beq.w	80043e2 <_malloc_r+0x24a>
 8004590:	f1b9 0f0f 	cmp.w	r9, #15
 8004594:	d812      	bhi.n	80045bc <_malloc_r+0x424>
 8004596:	2301      	movs	r3, #1
 8004598:	6063      	str	r3, [r4, #4]
 800459a:	68b3      	ldr	r3, [r6, #8]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	42bb      	cmp	r3, r7
 80045a4:	eba3 0207 	sub.w	r2, r3, r7
 80045a8:	d301      	bcc.n	80045ae <_malloc_r+0x416>
 80045aa:	2a0f      	cmp	r2, #15
 80045ac:	dc22      	bgt.n	80045f4 <_malloc_r+0x45c>
 80045ae:	4628      	mov	r0, r5
 80045b0:	f000 f832 	bl	8004618 <__malloc_unlock>
 80045b4:	e5fc      	b.n	80041b0 <_malloc_r+0x18>
 80045b6:	4610      	mov	r0, r2
 80045b8:	46d8      	mov	r8, fp
 80045ba:	e7dd      	b.n	8004578 <_malloc_r+0x3e0>
 80045bc:	f8da 2004 	ldr.w	r2, [sl, #4]
 80045c0:	f1a9 090c 	sub.w	r9, r9, #12
 80045c4:	f029 0907 	bic.w	r9, r9, #7
 80045c8:	f002 0201 	and.w	r2, r2, #1
 80045cc:	ea42 0209 	orr.w	r2, r2, r9
 80045d0:	f8ca 2004 	str.w	r2, [sl, #4]
 80045d4:	2105      	movs	r1, #5
 80045d6:	eb0a 0209 	add.w	r2, sl, r9
 80045da:	f1b9 0f0f 	cmp.w	r9, #15
 80045de:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80045e2:	f67f aefe 	bls.w	80043e2 <_malloc_r+0x24a>
 80045e6:	f10a 0108 	add.w	r1, sl, #8
 80045ea:	4628      	mov	r0, r5
 80045ec:	f7ff fd14 	bl	8004018 <_free_r>
 80045f0:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <_malloc_r+0x470>)
 80045f2:	e6f6      	b.n	80043e2 <_malloc_r+0x24a>
 80045f4:	68b4      	ldr	r4, [r6, #8]
 80045f6:	f047 0301 	orr.w	r3, r7, #1
 80045fa:	4427      	add	r7, r4
 80045fc:	f042 0201 	orr.w	r2, r2, #1
 8004600:	6063      	str	r3, [r4, #4]
 8004602:	60b7      	str	r7, [r6, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	e5f8      	b.n	80041fa <_malloc_r+0x62>
 8004608:	20000f88 	.word	0x20000f88

0800460c <__malloc_lock>:
 800460c:	4801      	ldr	r0, [pc, #4]	@ (8004614 <__malloc_lock+0x8>)
 800460e:	f7ff bc9b 	b.w	8003f48 <__retarget_lock_acquire_recursive>
 8004612:	bf00      	nop
 8004614:	20000f80 	.word	0x20000f80

08004618 <__malloc_unlock>:
 8004618:	4801      	ldr	r0, [pc, #4]	@ (8004620 <__malloc_unlock+0x8>)
 800461a:	f7ff bc96 	b.w	8003f4a <__retarget_lock_release_recursive>
 800461e:	bf00      	nop
 8004620:	20000f80 	.word	0x20000f80
 8004624:	00000000 	.word	0x00000000

08004628 <_vfprintf_r>:
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	b0d3      	sub	sp, #332	@ 0x14c
 800462e:	468b      	mov	fp, r1
 8004630:	4690      	mov	r8, r2
 8004632:	461c      	mov	r4, r3
 8004634:	461e      	mov	r6, r3
 8004636:	9003      	str	r0, [sp, #12]
 8004638:	f002 faa0 	bl	8006b7c <_localeconv_r>
 800463c:	6803      	ldr	r3, [r0, #0]
 800463e:	9316      	str	r3, [sp, #88]	@ 0x58
 8004640:	4618      	mov	r0, r3
 8004642:	f7fb fe25 	bl	8000290 <strlen>
 8004646:	9b03      	ldr	r3, [sp, #12]
 8004648:	900d      	str	r0, [sp, #52]	@ 0x34
 800464a:	b123      	cbz	r3, 8004656 <_vfprintf_r+0x2e>
 800464c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464e:	b913      	cbnz	r3, 8004656 <_vfprintf_r+0x2e>
 8004650:	9803      	ldr	r0, [sp, #12]
 8004652:	f7ff fb73 	bl	8003d3c <__sinit>
 8004656:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800465a:	07da      	lsls	r2, r3, #31
 800465c:	d407      	bmi.n	800466e <_vfprintf_r+0x46>
 800465e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004662:	059b      	lsls	r3, r3, #22
 8004664:	d403      	bmi.n	800466e <_vfprintf_r+0x46>
 8004666:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800466a:	f7ff fc6d 	bl	8003f48 <__retarget_lock_acquire_recursive>
 800466e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8004672:	049f      	lsls	r7, r3, #18
 8004674:	d409      	bmi.n	800468a <_vfprintf_r+0x62>
 8004676:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800467a:	f8ab 300c 	strh.w	r3, [fp, #12]
 800467e:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8004682:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004686:	f8cb 3064 	str.w	r3, [fp, #100]	@ 0x64
 800468a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800468e:	071d      	lsls	r5, r3, #28
 8004690:	d502      	bpl.n	8004698 <_vfprintf_r+0x70>
 8004692:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004696:	b9c3      	cbnz	r3, 80046ca <_vfprintf_r+0xa2>
 8004698:	9803      	ldr	r0, [sp, #12]
 800469a:	4659      	mov	r1, fp
 800469c:	f002 f97a 	bl	8006994 <__swsetup_r>
 80046a0:	b198      	cbz	r0, 80046ca <_vfprintf_r+0xa2>
 80046a2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80046a6:	07d8      	lsls	r0, r3, #31
 80046a8:	d506      	bpl.n	80046b8 <_vfprintf_r+0x90>
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80046b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80046b2:	b053      	add	sp, #332	@ 0x14c
 80046b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80046bc:	0599      	lsls	r1, r3, #22
 80046be:	d4f4      	bmi.n	80046aa <_vfprintf_r+0x82>
 80046c0:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80046c4:	f7ff fc41 	bl	8003f4a <__retarget_lock_release_recursive>
 80046c8:	e7ef      	b.n	80046aa <_vfprintf_r+0x82>
 80046ca:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80046ce:	f003 021a 	and.w	r2, r3, #26
 80046d2:	2a0a      	cmp	r2, #10
 80046d4:	d116      	bne.n	8004704 <_vfprintf_r+0xdc>
 80046d6:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 80046da:	2a00      	cmp	r2, #0
 80046dc:	db12      	blt.n	8004704 <_vfprintf_r+0xdc>
 80046de:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 80046e2:	07d2      	lsls	r2, r2, #31
 80046e4:	d405      	bmi.n	80046f2 <_vfprintf_r+0xca>
 80046e6:	059b      	lsls	r3, r3, #22
 80046e8:	d403      	bmi.n	80046f2 <_vfprintf_r+0xca>
 80046ea:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80046ee:	f7ff fc2c 	bl	8003f4a <__retarget_lock_release_recursive>
 80046f2:	9803      	ldr	r0, [sp, #12]
 80046f4:	4623      	mov	r3, r4
 80046f6:	4642      	mov	r2, r8
 80046f8:	4659      	mov	r1, fp
 80046fa:	b053      	add	sp, #332	@ 0x14c
 80046fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004700:	f001 b9be 	b.w	8005a80 <__sbprintf>
 8004704:	ed9f 7b92 	vldr	d7, [pc, #584]	@ 8004950 <_vfprintf_r+0x328>
 8004708:	2300      	movs	r3, #0
 800470a:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 800470e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004712:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 8004716:	ac29      	add	r4, sp, #164	@ 0xa4
 8004718:	9426      	str	r4, [sp, #152]	@ 0x98
 800471a:	9304      	str	r3, [sp, #16]
 800471c:	9309      	str	r3, [sp, #36]	@ 0x24
 800471e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004720:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004722:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004724:	4643      	mov	r3, r8
 8004726:	461d      	mov	r5, r3
 8004728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800472c:	b10a      	cbz	r2, 8004732 <_vfprintf_r+0x10a>
 800472e:	2a25      	cmp	r2, #37	@ 0x25
 8004730:	d1f9      	bne.n	8004726 <_vfprintf_r+0xfe>
 8004732:	ebb5 0708 	subs.w	r7, r5, r8
 8004736:	d00d      	beq.n	8004754 <_vfprintf_r+0x12c>
 8004738:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800473a:	443b      	add	r3, r7
 800473c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800473e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8004740:	3301      	adds	r3, #1
 8004742:	2b07      	cmp	r3, #7
 8004744:	e9c4 8700 	strd	r8, r7, [r4]
 8004748:	9327      	str	r3, [sp, #156]	@ 0x9c
 800474a:	dc75      	bgt.n	8004838 <_vfprintf_r+0x210>
 800474c:	3408      	adds	r4, #8
 800474e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004750:	443b      	add	r3, r7
 8004752:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004754:	782b      	ldrb	r3, [r5, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f001 814f 	beq.w	80059fa <_vfprintf_r+0x13d2>
 800475c:	2200      	movs	r2, #0
 800475e:	1c6b      	adds	r3, r5, #1
 8004760:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8004764:	f04f 39ff 	mov.w	r9, #4294967295
 8004768:	920e      	str	r2, [sp, #56]	@ 0x38
 800476a:	4615      	mov	r5, r2
 800476c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004770:	9206      	str	r2, [sp, #24]
 8004772:	930c      	str	r3, [sp, #48]	@ 0x30
 8004774:	9b06      	ldr	r3, [sp, #24]
 8004776:	3b20      	subs	r3, #32
 8004778:	2b5a      	cmp	r3, #90	@ 0x5a
 800477a:	f200 85aa 	bhi.w	80052d2 <_vfprintf_r+0xcaa>
 800477e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004782:	009d      	.short	0x009d
 8004784:	05a805a8 	.word	0x05a805a8
 8004788:	05a800a5 	.word	0x05a800a5
 800478c:	05a805a8 	.word	0x05a805a8
 8004790:	05a80085 	.word	0x05a80085
 8004794:	00a805a8 	.word	0x00a805a8
 8004798:	05a800b2 	.word	0x05a800b2
 800479c:	00b400af 	.word	0x00b400af
 80047a0:	00ce05a8 	.word	0x00ce05a8
 80047a4:	00d100d1 	.word	0x00d100d1
 80047a8:	00d100d1 	.word	0x00d100d1
 80047ac:	00d100d1 	.word	0x00d100d1
 80047b0:	00d100d1 	.word	0x00d100d1
 80047b4:	05a800d1 	.word	0x05a800d1
 80047b8:	05a805a8 	.word	0x05a805a8
 80047bc:	05a805a8 	.word	0x05a805a8
 80047c0:	05a805a8 	.word	0x05a805a8
 80047c4:	05a80146 	.word	0x05a80146
 80047c8:	011a0107 	.word	0x011a0107
 80047cc:	01460146 	.word	0x01460146
 80047d0:	05a80146 	.word	0x05a80146
 80047d4:	05a805a8 	.word	0x05a805a8
 80047d8:	00e205a8 	.word	0x00e205a8
 80047dc:	05a805a8 	.word	0x05a805a8
 80047e0:	05a804a3 	.word	0x05a804a3
 80047e4:	05a805a8 	.word	0x05a805a8
 80047e8:	05a804ed 	.word	0x05a804ed
 80047ec:	05a8050e 	.word	0x05a8050e
 80047f0:	053005a8 	.word	0x053005a8
 80047f4:	05a805a8 	.word	0x05a805a8
 80047f8:	05a805a8 	.word	0x05a805a8
 80047fc:	05a805a8 	.word	0x05a805a8
 8004800:	05a805a8 	.word	0x05a805a8
 8004804:	05a80146 	.word	0x05a80146
 8004808:	011c0107 	.word	0x011c0107
 800480c:	01460146 	.word	0x01460146
 8004810:	00ed0146 	.word	0x00ed0146
 8004814:	0101011c 	.word	0x0101011c
 8004818:	00fa05a8 	.word	0x00fa05a8
 800481c:	048705a8 	.word	0x048705a8
 8004820:	04dc04a5 	.word	0x04dc04a5
 8004824:	05a80101 	.word	0x05a80101
 8004828:	009b04ed 	.word	0x009b04ed
 800482c:	05a80510 	.word	0x05a80510
 8004830:	006505a8 	.word	0x006505a8
 8004834:	009b05a8 	.word	0x009b05a8
 8004838:	9803      	ldr	r0, [sp, #12]
 800483a:	aa26      	add	r2, sp, #152	@ 0x98
 800483c:	4659      	mov	r1, fp
 800483e:	f001 f95f 	bl	8005b00 <__sprint_r>
 8004842:	2800      	cmp	r0, #0
 8004844:	f040 814d 	bne.w	8004ae2 <_vfprintf_r+0x4ba>
 8004848:	ac29      	add	r4, sp, #164	@ 0xa4
 800484a:	e780      	b.n	800474e <_vfprintf_r+0x126>
 800484c:	4b42      	ldr	r3, [pc, #264]	@ (8004958 <_vfprintf_r+0x330>)
 800484e:	9319      	str	r3, [sp, #100]	@ 0x64
 8004850:	f015 0320 	ands.w	r3, r5, #32
 8004854:	f000 84c8 	beq.w	80051e8 <_vfprintf_r+0xbc0>
 8004858:	3607      	adds	r6, #7
 800485a:	f026 0307 	bic.w	r3, r6, #7
 800485e:	461a      	mov	r2, r3
 8004860:	685f      	ldr	r7, [r3, #4]
 8004862:	f852 6b08 	ldr.w	r6, [r2], #8
 8004866:	9207      	str	r2, [sp, #28]
 8004868:	07eb      	lsls	r3, r5, #31
 800486a:	d50a      	bpl.n	8004882 <_vfprintf_r+0x25a>
 800486c:	ea56 0307 	orrs.w	r3, r6, r7
 8004870:	d007      	beq.n	8004882 <_vfprintf_r+0x25a>
 8004872:	2330      	movs	r3, #48	@ 0x30
 8004874:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8004878:	9b06      	ldr	r3, [sp, #24]
 800487a:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 800487e:	f045 0502 	orr.w	r5, r5, #2
 8004882:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8004886:	2302      	movs	r3, #2
 8004888:	f000 bc2e 	b.w	80050e8 <_vfprintf_r+0xac0>
 800488c:	9803      	ldr	r0, [sp, #12]
 800488e:	f002 f975 	bl	8006b7c <_localeconv_r>
 8004892:	6843      	ldr	r3, [r0, #4]
 8004894:	9317      	str	r3, [sp, #92]	@ 0x5c
 8004896:	4618      	mov	r0, r3
 8004898:	f7fb fcfa 	bl	8000290 <strlen>
 800489c:	9012      	str	r0, [sp, #72]	@ 0x48
 800489e:	9803      	ldr	r0, [sp, #12]
 80048a0:	f002 f96c 	bl	8006b7c <_localeconv_r>
 80048a4:	6883      	ldr	r3, [r0, #8]
 80048a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80048a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80048aa:	b12b      	cbz	r3, 80048b8 <_vfprintf_r+0x290>
 80048ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048ae:	b11b      	cbz	r3, 80048b8 <_vfprintf_r+0x290>
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b10b      	cbz	r3, 80048b8 <_vfprintf_r+0x290>
 80048b4:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 80048b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80048ba:	e757      	b.n	800476c <_vfprintf_r+0x144>
 80048bc:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f9      	bne.n	80048b8 <_vfprintf_r+0x290>
 80048c4:	2320      	movs	r3, #32
 80048c6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80048ca:	e7f5      	b.n	80048b8 <_vfprintf_r+0x290>
 80048cc:	f045 0501 	orr.w	r5, r5, #1
 80048d0:	e7f2      	b.n	80048b8 <_vfprintf_r+0x290>
 80048d2:	f856 3b04 	ldr.w	r3, [r6], #4
 80048d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	daed      	bge.n	80048b8 <_vfprintf_r+0x290>
 80048dc:	425b      	negs	r3, r3
 80048de:	930e      	str	r3, [sp, #56]	@ 0x38
 80048e0:	f045 0504 	orr.w	r5, r5, #4
 80048e4:	e7e8      	b.n	80048b8 <_vfprintf_r+0x290>
 80048e6:	232b      	movs	r3, #43	@ 0x2b
 80048e8:	e7ed      	b.n	80048c6 <_vfprintf_r+0x29e>
 80048ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80048ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048f0:	9206      	str	r2, [sp, #24]
 80048f2:	2a2a      	cmp	r2, #42	@ 0x2a
 80048f4:	d10f      	bne.n	8004916 <_vfprintf_r+0x2ee>
 80048f6:	f856 2b04 	ldr.w	r2, [r6], #4
 80048fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80048fc:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8004900:	e7da      	b.n	80048b8 <_vfprintf_r+0x290>
 8004902:	fb01 2909 	mla	r9, r1, r9, r2
 8004906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490a:	9206      	str	r2, [sp, #24]
 800490c:	9a06      	ldr	r2, [sp, #24]
 800490e:	3a30      	subs	r2, #48	@ 0x30
 8004910:	2a09      	cmp	r2, #9
 8004912:	d9f6      	bls.n	8004902 <_vfprintf_r+0x2da>
 8004914:	e72d      	b.n	8004772 <_vfprintf_r+0x14a>
 8004916:	f04f 0900 	mov.w	r9, #0
 800491a:	210a      	movs	r1, #10
 800491c:	e7f6      	b.n	800490c <_vfprintf_r+0x2e4>
 800491e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8004922:	e7c9      	b.n	80048b8 <_vfprintf_r+0x290>
 8004924:	2200      	movs	r2, #0
 8004926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004928:	920e      	str	r2, [sp, #56]	@ 0x38
 800492a:	210a      	movs	r1, #10
 800492c:	9a06      	ldr	r2, [sp, #24]
 800492e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8004930:	3a30      	subs	r2, #48	@ 0x30
 8004932:	fb01 2200 	mla	r2, r1, r0, r2
 8004936:	920e      	str	r2, [sp, #56]	@ 0x38
 8004938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800493c:	9206      	str	r2, [sp, #24]
 800493e:	3a30      	subs	r2, #48	@ 0x30
 8004940:	2a09      	cmp	r2, #9
 8004942:	d9f3      	bls.n	800492c <_vfprintf_r+0x304>
 8004944:	e715      	b.n	8004772 <_vfprintf_r+0x14a>
 8004946:	f045 0508 	orr.w	r5, r5, #8
 800494a:	e7b5      	b.n	80048b8 <_vfprintf_r+0x290>
 800494c:	f3af 8000 	nop.w
	...
 8004958:	080086c4 	.word	0x080086c4
 800495c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b68      	cmp	r3, #104	@ 0x68
 8004962:	bf01      	itttt	eq
 8004964:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8004966:	3301      	addeq	r3, #1
 8004968:	930c      	streq	r3, [sp, #48]	@ 0x30
 800496a:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 800496e:	bf18      	it	ne
 8004970:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8004974:	e7a0      	b.n	80048b8 <_vfprintf_r+0x290>
 8004976:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b6c      	cmp	r3, #108	@ 0x6c
 800497c:	d105      	bne.n	800498a <_vfprintf_r+0x362>
 800497e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004980:	3301      	adds	r3, #1
 8004982:	930c      	str	r3, [sp, #48]	@ 0x30
 8004984:	f045 0520 	orr.w	r5, r5, #32
 8004988:	e796      	b.n	80048b8 <_vfprintf_r+0x290>
 800498a:	f045 0510 	orr.w	r5, r5, #16
 800498e:	e793      	b.n	80048b8 <_vfprintf_r+0x290>
 8004990:	4632      	mov	r2, r6
 8004992:	f852 3b04 	ldr.w	r3, [r2], #4
 8004996:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800499a:	2300      	movs	r3, #0
 800499c:	9207      	str	r2, [sp, #28]
 800499e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80049a2:	469a      	mov	sl, r3
 80049a4:	f04f 0901 	mov.w	r9, #1
 80049a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80049aa:	461f      	mov	r7, r3
 80049ac:	9308      	str	r3, [sp, #32]
 80049ae:	461e      	mov	r6, r3
 80049b0:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 80049b4:	e1da      	b.n	8004d6c <_vfprintf_r+0x744>
 80049b6:	f045 0510 	orr.w	r5, r5, #16
 80049ba:	06af      	lsls	r7, r5, #26
 80049bc:	d512      	bpl.n	80049e4 <_vfprintf_r+0x3bc>
 80049be:	3607      	adds	r6, #7
 80049c0:	f026 0307 	bic.w	r3, r6, #7
 80049c4:	461a      	mov	r2, r3
 80049c6:	685f      	ldr	r7, [r3, #4]
 80049c8:	f852 6b08 	ldr.w	r6, [r2], #8
 80049cc:	9207      	str	r2, [sp, #28]
 80049ce:	2f00      	cmp	r7, #0
 80049d0:	da06      	bge.n	80049e0 <_vfprintf_r+0x3b8>
 80049d2:	4276      	negs	r6, r6
 80049d4:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80049d8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80049dc:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80049e0:	2301      	movs	r3, #1
 80049e2:	e384      	b.n	80050ee <_vfprintf_r+0xac6>
 80049e4:	4633      	mov	r3, r6
 80049e6:	06ee      	lsls	r6, r5, #27
 80049e8:	f853 7b04 	ldr.w	r7, [r3], #4
 80049ec:	9307      	str	r3, [sp, #28]
 80049ee:	d502      	bpl.n	80049f6 <_vfprintf_r+0x3ce>
 80049f0:	463e      	mov	r6, r7
 80049f2:	17ff      	asrs	r7, r7, #31
 80049f4:	e7eb      	b.n	80049ce <_vfprintf_r+0x3a6>
 80049f6:	0668      	lsls	r0, r5, #25
 80049f8:	d503      	bpl.n	8004a02 <_vfprintf_r+0x3da>
 80049fa:	b23e      	sxth	r6, r7
 80049fc:	f347 37c0 	sbfx	r7, r7, #15, #1
 8004a00:	e7e5      	b.n	80049ce <_vfprintf_r+0x3a6>
 8004a02:	05a9      	lsls	r1, r5, #22
 8004a04:	d5f4      	bpl.n	80049f0 <_vfprintf_r+0x3c8>
 8004a06:	b27e      	sxtb	r6, r7
 8004a08:	f347 17c0 	sbfx	r7, r7, #7, #1
 8004a0c:	e7df      	b.n	80049ce <_vfprintf_r+0x3a6>
 8004a0e:	3607      	adds	r6, #7
 8004a10:	f026 0307 	bic.w	r3, r6, #7
 8004a14:	ecb3 7b02 	vldmia	r3!, {d7}
 8004a18:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004a1c:	9307      	str	r3, [sp, #28]
 8004a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a20:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a28:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004a2a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8004a2e:	4b85      	ldr	r3, [pc, #532]	@ (8004c44 <_vfprintf_r+0x61c>)
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295
 8004a34:	f7fc f88a 	bl	8000b4c <__aeabi_dcmpun>
 8004a38:	bb10      	cbnz	r0, 8004a80 <_vfprintf_r+0x458>
 8004a3a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8004a3e:	4b81      	ldr	r3, [pc, #516]	@ (8004c44 <_vfprintf_r+0x61c>)
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295
 8004a44:	f7fc f864 	bl	8000b10 <__aeabi_dcmple>
 8004a48:	b9d0      	cbnz	r0, 8004a80 <_vfprintf_r+0x458>
 8004a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2300      	movs	r3, #0
 8004a52:	f7fc f853 	bl	8000afc <__aeabi_dcmplt>
 8004a56:	b110      	cbz	r0, 8004a5e <_vfprintf_r+0x436>
 8004a58:	232d      	movs	r3, #45	@ 0x2d
 8004a5a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8004a5e:	4a7a      	ldr	r2, [pc, #488]	@ (8004c48 <_vfprintf_r+0x620>)
 8004a60:	4b7a      	ldr	r3, [pc, #488]	@ (8004c4c <_vfprintf_r+0x624>)
 8004a62:	9906      	ldr	r1, [sp, #24]
 8004a64:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8004a68:	2947      	cmp	r1, #71	@ 0x47
 8004a6a:	bfd4      	ite	le
 8004a6c:	4690      	movle	r8, r2
 8004a6e:	4698      	movgt	r8, r3
 8004a70:	f04f 0a00 	mov.w	sl, #0
 8004a74:	f04f 0903 	mov.w	r9, #3
 8004a78:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8004a7c:	f000 bff8 	b.w	8005a70 <_vfprintf_r+0x1448>
 8004a80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f7fc f860 	bl	8000b4c <__aeabi_dcmpun>
 8004a8c:	4682      	mov	sl, r0
 8004a8e:	b140      	cbz	r0, 8004aa2 <_vfprintf_r+0x47a>
 8004a90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a92:	4a6f      	ldr	r2, [pc, #444]	@ (8004c50 <_vfprintf_r+0x628>)
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bfbc      	itt	lt
 8004a98:	232d      	movlt	r3, #45	@ 0x2d
 8004a9a:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c54 <_vfprintf_r+0x62c>)
 8004aa0:	e7df      	b.n	8004a62 <_vfprintf_r+0x43a>
 8004aa2:	9b06      	ldr	r3, [sp, #24]
 8004aa4:	2b61      	cmp	r3, #97	@ 0x61
 8004aa6:	d02e      	beq.n	8004b06 <_vfprintf_r+0x4de>
 8004aa8:	2b41      	cmp	r3, #65	@ 0x41
 8004aaa:	d12e      	bne.n	8004b0a <_vfprintf_r+0x4e2>
 8004aac:	2358      	movs	r3, #88	@ 0x58
 8004aae:	2230      	movs	r2, #48	@ 0x30
 8004ab0:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8004ab4:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8004ab8:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8004abc:	f045 0502 	orr.w	r5, r5, #2
 8004ac0:	f340 80ae 	ble.w	8004c20 <_vfprintf_r+0x5f8>
 8004ac4:	9803      	ldr	r0, [sp, #12]
 8004ac6:	f109 0101 	add.w	r1, r9, #1
 8004aca:	f7ff fb65 	bl	8004198 <_malloc_r>
 8004ace:	4680      	mov	r8, r0
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	f040 80aa 	bne.w	8004c2a <_vfprintf_r+0x602>
 8004ad6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ade:	f8ab 300c 	strh.w	r3, [fp, #12]
 8004ae2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8004ae6:	07d9      	lsls	r1, r3, #31
 8004ae8:	d407      	bmi.n	8004afa <_vfprintf_r+0x4d2>
 8004aea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004aee:	059a      	lsls	r2, r3, #22
 8004af0:	d403      	bmi.n	8004afa <_vfprintf_r+0x4d2>
 8004af2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8004af6:	f7ff fa28 	bl	8003f4a <__retarget_lock_release_recursive>
 8004afa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004afe:	065b      	lsls	r3, r3, #25
 8004b00:	f57f add6 	bpl.w	80046b0 <_vfprintf_r+0x88>
 8004b04:	e5d1      	b.n	80046aa <_vfprintf_r+0x82>
 8004b06:	2378      	movs	r3, #120	@ 0x78
 8004b08:	e7d1      	b.n	8004aae <_vfprintf_r+0x486>
 8004b0a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004b0e:	f000 808e 	beq.w	8004c2e <_vfprintf_r+0x606>
 8004b12:	9b06      	ldr	r3, [sp, #24]
 8004b14:	f023 0320 	bic.w	r3, r3, #32
 8004b18:	2b47      	cmp	r3, #71	@ 0x47
 8004b1a:	d105      	bne.n	8004b28 <_vfprintf_r+0x500>
 8004b1c:	f1b9 0f00 	cmp.w	r9, #0
 8004b20:	d102      	bne.n	8004b28 <_vfprintf_r+0x500>
 8004b22:	46ca      	mov	sl, r9
 8004b24:	f04f 0901 	mov.w	r9, #1
 8004b28:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8004b2c:	9311      	str	r3, [sp, #68]	@ 0x44
 8004b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	da7f      	bge.n	8004c34 <_vfprintf_r+0x60c>
 8004b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b36:	9314      	str	r3, [sp, #80]	@ 0x50
 8004b38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b3a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004b3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8004b40:	232d      	movs	r3, #45	@ 0x2d
 8004b42:	931c      	str	r3, [sp, #112]	@ 0x70
 8004b44:	9b06      	ldr	r3, [sp, #24]
 8004b46:	f023 0320 	bic.w	r3, r3, #32
 8004b4a:	2b41      	cmp	r3, #65	@ 0x41
 8004b4c:	9308      	str	r3, [sp, #32]
 8004b4e:	f040 81e7 	bne.w	8004f20 <_vfprintf_r+0x8f8>
 8004b52:	a820      	add	r0, sp, #128	@ 0x80
 8004b54:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8004b58:	f002 f852 	bl	8006c00 <frexp>
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004b62:	ec51 0b10 	vmov	r0, r1, d0
 8004b66:	f7fb fd57 	bl	8000618 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b72:	2200      	movs	r2, #0
 8004b74:	2300      	movs	r3, #0
 8004b76:	f7fb ffb7 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b7a:	b108      	cbz	r0, 8004b80 <_vfprintf_r+0x558>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	9320      	str	r3, [sp, #128]	@ 0x80
 8004b80:	4a35      	ldr	r2, [pc, #212]	@ (8004c58 <_vfprintf_r+0x630>)
 8004b82:	4b36      	ldr	r3, [pc, #216]	@ (8004c5c <_vfprintf_r+0x634>)
 8004b84:	9906      	ldr	r1, [sp, #24]
 8004b86:	2961      	cmp	r1, #97	@ 0x61
 8004b88:	bf18      	it	ne
 8004b8a:	461a      	movne	r2, r3
 8004b8c:	9210      	str	r2, [sp, #64]	@ 0x40
 8004b8e:	f109 37ff 	add.w	r7, r9, #4294967295
 8004b92:	4646      	mov	r6, r8
 8004b94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b98:	4b31      	ldr	r3, [pc, #196]	@ (8004c60 <_vfprintf_r+0x638>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f7fb fd3c 	bl	8000618 <__aeabi_dmul>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ba8:	f7fb ffe6 	bl	8000b78 <__aeabi_d2iz>
 8004bac:	9013      	str	r0, [sp, #76]	@ 0x4c
 8004bae:	f7fb fcc9 	bl	8000544 <__aeabi_i2d>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bba:	f7fb fb75 	bl	80002a8 <__aeabi_dsub>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004bc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004bca:	5c9b      	ldrb	r3, [r3, r2]
 8004bcc:	f806 3b01 	strb.w	r3, [r6], #1
 8004bd0:	1c7a      	adds	r2, r7, #1
 8004bd2:	d006      	beq.n	8004be2 <_vfprintf_r+0x5ba>
 8004bd4:	1e7b      	subs	r3, r7, #1
 8004bd6:	931d      	str	r3, [sp, #116]	@ 0x74
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f7fb ff84 	bl	8000ae8 <__aeabi_dcmpeq>
 8004be0:	b370      	cbz	r0, 8004c40 <_vfprintf_r+0x618>
 8004be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004be6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c64 <_vfprintf_r+0x63c>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	f7fb ffa5 	bl	8000b38 <__aeabi_dcmpgt>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d13a      	bne.n	8004c68 <_vfprintf_r+0x640>
 8004bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c64 <_vfprintf_r+0x63c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f7fb ff75 	bl	8000ae8 <__aeabi_dcmpeq>
 8004bfe:	b110      	cbz	r0, 8004c06 <_vfprintf_r+0x5de>
 8004c00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004c02:	07db      	lsls	r3, r3, #31
 8004c04:	d430      	bmi.n	8004c68 <_vfprintf_r+0x640>
 8004c06:	4633      	mov	r3, r6
 8004c08:	19f1      	adds	r1, r6, r7
 8004c0a:	2030      	movs	r0, #48	@ 0x30
 8004c0c:	1aca      	subs	r2, r1, r3
 8004c0e:	2a00      	cmp	r2, #0
 8004c10:	f280 8183 	bge.w	8004f1a <_vfprintf_r+0x8f2>
 8004c14:	1c7b      	adds	r3, r7, #1
 8004c16:	3701      	adds	r7, #1
 8004c18:	bfb8      	it	lt
 8004c1a:	2300      	movlt	r3, #0
 8004c1c:	441e      	add	r6, r3
 8004c1e:	e037      	b.n	8004c90 <_vfprintf_r+0x668>
 8004c20:	f04f 0a00 	mov.w	sl, #0
 8004c24:	f10d 08e4 	add.w	r8, sp, #228	@ 0xe4
 8004c28:	e77e      	b.n	8004b28 <_vfprintf_r+0x500>
 8004c2a:	4682      	mov	sl, r0
 8004c2c:	e77c      	b.n	8004b28 <_vfprintf_r+0x500>
 8004c2e:	f04f 0906 	mov.w	r9, #6
 8004c32:	e779      	b.n	8004b28 <_vfprintf_r+0x500>
 8004c34:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8004c38:	2300      	movs	r3, #0
 8004c3a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8004c3e:	e780      	b.n	8004b42 <_vfprintf_r+0x51a>
 8004c40:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8004c42:	e7a7      	b.n	8004b94 <_vfprintf_r+0x56c>
 8004c44:	7fefffff 	.word	0x7fefffff
 8004c48:	080086b4 	.word	0x080086b4
 8004c4c:	080086b8 	.word	0x080086b8
 8004c50:	080086bc 	.word	0x080086bc
 8004c54:	080086c0 	.word	0x080086c0
 8004c58:	080086c4 	.word	0x080086c4
 8004c5c:	080086d5 	.word	0x080086d5
 8004c60:	40300000 	.word	0x40300000
 8004c64:	3fe00000 	.word	0x3fe00000
 8004c68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004c6a:	9624      	str	r6, [sp, #144]	@ 0x90
 8004c6c:	7bd9      	ldrb	r1, [r3, #15]
 8004c6e:	2030      	movs	r0, #48	@ 0x30
 8004c70:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004c72:	1e53      	subs	r3, r2, #1
 8004c74:	9324      	str	r3, [sp, #144]	@ 0x90
 8004c76:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8004c7a:	428b      	cmp	r3, r1
 8004c7c:	f000 814a 	beq.w	8004f14 <_vfprintf_r+0x8ec>
 8004c80:	2b39      	cmp	r3, #57	@ 0x39
 8004c82:	bf0b      	itete	eq
 8004c84:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8004c86:	3301      	addne	r3, #1
 8004c88:	7a9b      	ldrbeq	r3, [r3, #10]
 8004c8a:	b2db      	uxtbne	r3, r3
 8004c8c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c90:	eba6 0308 	sub.w	r3, r6, r8
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	9b08      	ldr	r3, [sp, #32]
 8004c98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004c9a:	2b47      	cmp	r3, #71	@ 0x47
 8004c9c:	f040 8189 	bne.w	8004fb2 <_vfprintf_r+0x98a>
 8004ca0:	1cf1      	adds	r1, r6, #3
 8004ca2:	db02      	blt.n	8004caa <_vfprintf_r+0x682>
 8004ca4:	45b1      	cmp	r9, r6
 8004ca6:	f280 81a7 	bge.w	8004ff8 <_vfprintf_r+0x9d0>
 8004caa:	9b06      	ldr	r3, [sp, #24]
 8004cac:	3b02      	subs	r3, #2
 8004cae:	9306      	str	r3, [sp, #24]
 8004cb0:	9906      	ldr	r1, [sp, #24]
 8004cb2:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8004cb6:	f021 0120 	bic.w	r1, r1, #32
 8004cba:	2941      	cmp	r1, #65	@ 0x41
 8004cbc:	bf08      	it	eq
 8004cbe:	320f      	addeq	r2, #15
 8004cc0:	f106 33ff 	add.w	r3, r6, #4294967295
 8004cc4:	bf06      	itte	eq
 8004cc6:	b2d2      	uxtbeq	r2, r2
 8004cc8:	2101      	moveq	r1, #1
 8004cca:	2100      	movne	r1, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	9320      	str	r3, [sp, #128]	@ 0x80
 8004cd0:	bfb8      	it	lt
 8004cd2:	f1c6 0301 	rsblt	r3, r6, #1
 8004cd6:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8004cda:	bfb4      	ite	lt
 8004cdc:	222d      	movlt	r2, #45	@ 0x2d
 8004cde:	222b      	movge	r2, #43	@ 0x2b
 8004ce0:	2b09      	cmp	r3, #9
 8004ce2:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8004ce6:	f340 817a 	ble.w	8004fde <_vfprintf_r+0x9b6>
 8004cea:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8004cee:	270a      	movs	r7, #10
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	fbb3 f6f7 	udiv	r6, r3, r7
 8004cf6:	fb07 3116 	mls	r1, r7, r6, r3
 8004cfa:	3130      	adds	r1, #48	@ 0x30
 8004cfc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d00:	4619      	mov	r1, r3
 8004d02:	2963      	cmp	r1, #99	@ 0x63
 8004d04:	f100 30ff 	add.w	r0, r0, #4294967295
 8004d08:	4633      	mov	r3, r6
 8004d0a:	dcf1      	bgt.n	8004cf0 <_vfprintf_r+0x6c8>
 8004d0c:	3330      	adds	r3, #48	@ 0x30
 8004d0e:	1e91      	subs	r1, r2, #2
 8004d10:	f800 3c01 	strb.w	r3, [r0, #-1]
 8004d14:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8004d18:	460b      	mov	r3, r1
 8004d1a:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8004d1e:	4283      	cmp	r3, r0
 8004d20:	f0c0 8158 	bcc.w	8004fd4 <_vfprintf_r+0x9ac>
 8004d24:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	4281      	cmp	r1, r0
 8004d2c:	bf88      	it	hi
 8004d2e:	2300      	movhi	r3, #0
 8004d30:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8004d34:	441a      	add	r2, r3
 8004d36:	ab22      	add	r3, sp, #136	@ 0x88
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	9a04      	ldr	r2, [sp, #16]
 8004d3c:	9318      	str	r3, [sp, #96]	@ 0x60
 8004d3e:	2a01      	cmp	r2, #1
 8004d40:	eb03 0902 	add.w	r9, r3, r2
 8004d44:	dc01      	bgt.n	8004d4a <_vfprintf_r+0x722>
 8004d46:	07ea      	lsls	r2, r5, #31
 8004d48:	d501      	bpl.n	8004d4e <_vfprintf_r+0x726>
 8004d4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d4c:	4499      	add	r9, r3
 8004d4e:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8004d52:	2700      	movs	r7, #0
 8004d54:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8004d58:	9311      	str	r3, [sp, #68]	@ 0x44
 8004d5a:	9708      	str	r7, [sp, #32]
 8004d5c:	463e      	mov	r6, r7
 8004d5e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 8191 	bne.w	8005088 <_vfprintf_r+0xa60>
 8004d66:	2300      	movs	r3, #0
 8004d68:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8004d6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004d6e:	454b      	cmp	r3, r9
 8004d70:	bfb8      	it	lt
 8004d72:	464b      	movlt	r3, r9
 8004d74:	9311      	str	r3, [sp, #68]	@ 0x44
 8004d76:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8004d7a:	b113      	cbz	r3, 8004d82 <_vfprintf_r+0x75a>
 8004d7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004d7e:	3301      	adds	r3, #1
 8004d80:	9311      	str	r3, [sp, #68]	@ 0x44
 8004d82:	f015 0302 	ands.w	r3, r5, #2
 8004d86:	931c      	str	r3, [sp, #112]	@ 0x70
 8004d88:	bf1e      	ittt	ne
 8004d8a:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8004d8c:	3302      	addne	r3, #2
 8004d8e:	9311      	strne	r3, [sp, #68]	@ 0x44
 8004d90:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8004d94:	931d      	str	r3, [sp, #116]	@ 0x74
 8004d96:	d122      	bne.n	8004dde <_vfprintf_r+0x7b6>
 8004d98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d9a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004da2:	dd1c      	ble.n	8004dde <_vfprintf_r+0x7b6>
 8004da4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004da6:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8004daa:	2810      	cmp	r0, #16
 8004dac:	489f      	ldr	r0, [pc, #636]	@ (800502c <_vfprintf_r+0xa04>)
 8004dae:	6020      	str	r0, [r4, #0]
 8004db0:	f102 0201 	add.w	r2, r2, #1
 8004db4:	f104 0108 	add.w	r1, r4, #8
 8004db8:	f300 8297 	bgt.w	80052ea <_vfprintf_r+0xcc2>
 8004dbc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004dbe:	6060      	str	r0, [r4, #4]
 8004dc0:	4403      	add	r3, r0
 8004dc2:	2a07      	cmp	r2, #7
 8004dc4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8004dc8:	f340 82a4 	ble.w	8005314 <_vfprintf_r+0xcec>
 8004dcc:	9803      	ldr	r0, [sp, #12]
 8004dce:	aa26      	add	r2, sp, #152	@ 0x98
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	f000 fe95 	bl	8005b00 <__sprint_r>
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	f040 85ed 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8004ddc:	ac29      	add	r4, sp, #164	@ 0xa4
 8004dde:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8004de2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8004de4:	b16a      	cbz	r2, 8004e02 <_vfprintf_r+0x7da>
 8004de6:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8004dea:	6022      	str	r2, [r4, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8004df2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8004df4:	6062      	str	r2, [r4, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	2b07      	cmp	r3, #7
 8004dfa:	9327      	str	r3, [sp, #156]	@ 0x9c
 8004dfc:	f300 828c 	bgt.w	8005318 <_vfprintf_r+0xcf0>
 8004e00:	3408      	adds	r4, #8
 8004e02:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004e04:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8004e06:	b162      	cbz	r2, 8004e22 <_vfprintf_r+0x7fa>
 8004e08:	aa1f      	add	r2, sp, #124	@ 0x7c
 8004e0a:	6022      	str	r2, [r4, #0]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	9328      	str	r3, [sp, #160]	@ 0xa0
 8004e12:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8004e14:	6062      	str	r2, [r4, #4]
 8004e16:	3301      	adds	r3, #1
 8004e18:	2b07      	cmp	r3, #7
 8004e1a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8004e1c:	f300 8286 	bgt.w	800532c <_vfprintf_r+0xd04>
 8004e20:	3408      	adds	r4, #8
 8004e22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004e24:	2b80      	cmp	r3, #128	@ 0x80
 8004e26:	d122      	bne.n	8004e6e <_vfprintf_r+0x846>
 8004e28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e32:	dd1c      	ble.n	8004e6e <_vfprintf_r+0x846>
 8004e34:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004e36:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8004e3a:	2810      	cmp	r0, #16
 8004e3c:	487c      	ldr	r0, [pc, #496]	@ (8005030 <_vfprintf_r+0xa08>)
 8004e3e:	6020      	str	r0, [r4, #0]
 8004e40:	f102 0201 	add.w	r2, r2, #1
 8004e44:	f104 0108 	add.w	r1, r4, #8
 8004e48:	f300 827a 	bgt.w	8005340 <_vfprintf_r+0xd18>
 8004e4c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004e4e:	6060      	str	r0, [r4, #4]
 8004e50:	4403      	add	r3, r0
 8004e52:	2a07      	cmp	r2, #7
 8004e54:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8004e58:	f340 8287 	ble.w	800536a <_vfprintf_r+0xd42>
 8004e5c:	9803      	ldr	r0, [sp, #12]
 8004e5e:	aa26      	add	r2, sp, #152	@ 0x98
 8004e60:	4659      	mov	r1, fp
 8004e62:	f000 fe4d 	bl	8005b00 <__sprint_r>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	f040 85a5 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8004e6c:	ac29      	add	r4, sp, #164	@ 0xa4
 8004e6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e70:	eba3 0309 	sub.w	r3, r3, r9
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	9310      	str	r3, [sp, #64]	@ 0x40
 8004e78:	dd1c      	ble.n	8004eb4 <_vfprintf_r+0x88c>
 8004e7a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004e7c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8004e80:	2810      	cmp	r0, #16
 8004e82:	486b      	ldr	r0, [pc, #428]	@ (8005030 <_vfprintf_r+0xa08>)
 8004e84:	6020      	str	r0, [r4, #0]
 8004e86:	f102 0201 	add.w	r2, r2, #1
 8004e8a:	f104 0108 	add.w	r1, r4, #8
 8004e8e:	f300 826e 	bgt.w	800536e <_vfprintf_r+0xd46>
 8004e92:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8004e94:	6060      	str	r0, [r4, #4]
 8004e96:	4403      	add	r3, r0
 8004e98:	2a07      	cmp	r2, #7
 8004e9a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8004e9e:	f340 827b 	ble.w	8005398 <_vfprintf_r+0xd70>
 8004ea2:	9803      	ldr	r0, [sp, #12]
 8004ea4:	aa26      	add	r2, sp, #152	@ 0x98
 8004ea6:	4659      	mov	r1, fp
 8004ea8:	f000 fe2a 	bl	8005b00 <__sprint_r>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	f040 8582 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8004eb2:	ac29      	add	r4, sp, #164	@ 0xa4
 8004eb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8004eb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8004eb8:	05e8      	lsls	r0, r5, #23
 8004eba:	f100 8273 	bmi.w	80053a4 <_vfprintf_r+0xd7c>
 8004ebe:	444b      	add	r3, r9
 8004ec0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8004ec2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	e9c4 8900 	strd	r8, r9, [r4]
 8004ecc:	9327      	str	r3, [sp, #156]	@ 0x9c
 8004ece:	f300 82af 	bgt.w	8005430 <_vfprintf_r+0xe08>
 8004ed2:	3408      	adds	r4, #8
 8004ed4:	0768      	lsls	r0, r5, #29
 8004ed6:	f100 8550 	bmi.w	800597a <_vfprintf_r+0x1352>
 8004eda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004ede:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004ee0:	428a      	cmp	r2, r1
 8004ee2:	bfac      	ite	ge
 8004ee4:	189b      	addge	r3, r3, r2
 8004ee6:	185b      	addlt	r3, r3, r1
 8004ee8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004eea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8004eec:	b13b      	cbz	r3, 8004efe <_vfprintf_r+0x8d6>
 8004eee:	9803      	ldr	r0, [sp, #12]
 8004ef0:	aa26      	add	r2, sp, #152	@ 0x98
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	f000 fe04 	bl	8005b00 <__sprint_r>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	f040 855c 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8004efe:	2300      	movs	r3, #0
 8004f00:	9327      	str	r3, [sp, #156]	@ 0x9c
 8004f02:	f1ba 0f00 	cmp.w	sl, #0
 8004f06:	f040 8572 	bne.w	80059ee <_vfprintf_r+0x13c6>
 8004f0a:	9e07      	ldr	r6, [sp, #28]
 8004f0c:	ac29      	add	r4, sp, #164	@ 0xa4
 8004f0e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8004f12:	e407      	b.n	8004724 <_vfprintf_r+0xfc>
 8004f14:	f802 0c01 	strb.w	r0, [r2, #-1]
 8004f18:	e6aa      	b.n	8004c70 <_vfprintf_r+0x648>
 8004f1a:	f803 0b01 	strb.w	r0, [r3], #1
 8004f1e:	e675      	b.n	8004c0c <_vfprintf_r+0x5e4>
 8004f20:	9b08      	ldr	r3, [sp, #32]
 8004f22:	2b46      	cmp	r3, #70	@ 0x46
 8004f24:	d005      	beq.n	8004f32 <_vfprintf_r+0x90a>
 8004f26:	2b45      	cmp	r3, #69	@ 0x45
 8004f28:	d11a      	bne.n	8004f60 <_vfprintf_r+0x938>
 8004f2a:	f109 0601 	add.w	r6, r9, #1
 8004f2e:	2102      	movs	r1, #2
 8004f30:	e001      	b.n	8004f36 <_vfprintf_r+0x90e>
 8004f32:	464e      	mov	r6, r9
 8004f34:	2103      	movs	r1, #3
 8004f36:	ab24      	add	r3, sp, #144	@ 0x90
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	ab21      	add	r3, sp, #132	@ 0x84
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8004f42:	ab20      	add	r3, sp, #128	@ 0x80
 8004f44:	9803      	ldr	r0, [sp, #12]
 8004f46:	4632      	mov	r2, r6
 8004f48:	f001 ff5a 	bl	8006e00 <_dtoa_r>
 8004f4c:	9b08      	ldr	r3, [sp, #32]
 8004f4e:	2b47      	cmp	r3, #71	@ 0x47
 8004f50:	4680      	mov	r8, r0
 8004f52:	d119      	bne.n	8004f88 <_vfprintf_r+0x960>
 8004f54:	07e8      	lsls	r0, r5, #31
 8004f56:	d405      	bmi.n	8004f64 <_vfprintf_r+0x93c>
 8004f58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f5a:	eba3 0308 	sub.w	r3, r3, r8
 8004f5e:	e699      	b.n	8004c94 <_vfprintf_r+0x66c>
 8004f60:	464e      	mov	r6, r9
 8004f62:	e7e4      	b.n	8004f2e <_vfprintf_r+0x906>
 8004f64:	eb08 0706 	add.w	r7, r8, r6
 8004f68:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f7fb fdba 	bl	8000ae8 <__aeabi_dcmpeq>
 8004f74:	b100      	cbz	r0, 8004f78 <_vfprintf_r+0x950>
 8004f76:	9724      	str	r7, [sp, #144]	@ 0x90
 8004f78:	2230      	movs	r2, #48	@ 0x30
 8004f7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f7c:	429f      	cmp	r7, r3
 8004f7e:	d9eb      	bls.n	8004f58 <_vfprintf_r+0x930>
 8004f80:	1c59      	adds	r1, r3, #1
 8004f82:	9124      	str	r1, [sp, #144]	@ 0x90
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	e7f8      	b.n	8004f7a <_vfprintf_r+0x952>
 8004f88:	9b08      	ldr	r3, [sp, #32]
 8004f8a:	2b46      	cmp	r3, #70	@ 0x46
 8004f8c:	eb00 0706 	add.w	r7, r0, r6
 8004f90:	d1ea      	bne.n	8004f68 <_vfprintf_r+0x940>
 8004f92:	7803      	ldrb	r3, [r0, #0]
 8004f94:	2b30      	cmp	r3, #48	@ 0x30
 8004f96:	d109      	bne.n	8004fac <_vfprintf_r+0x984>
 8004f98:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f7fb fda2 	bl	8000ae8 <__aeabi_dcmpeq>
 8004fa4:	b910      	cbnz	r0, 8004fac <_vfprintf_r+0x984>
 8004fa6:	f1c6 0601 	rsb	r6, r6, #1
 8004faa:	9620      	str	r6, [sp, #128]	@ 0x80
 8004fac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fae:	441f      	add	r7, r3
 8004fb0:	e7da      	b.n	8004f68 <_vfprintf_r+0x940>
 8004fb2:	9b08      	ldr	r3, [sp, #32]
 8004fb4:	2b46      	cmp	r3, #70	@ 0x46
 8004fb6:	f47f ae7b 	bne.w	8004cb0 <_vfprintf_r+0x688>
 8004fba:	f005 0301 	and.w	r3, r5, #1
 8004fbe:	2e00      	cmp	r6, #0
 8004fc0:	ea43 0309 	orr.w	r3, r3, r9
 8004fc4:	dd25      	ble.n	8005012 <_vfprintf_r+0x9ea>
 8004fc6:	b37b      	cbz	r3, 8005028 <_vfprintf_r+0xa00>
 8004fc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fca:	18f3      	adds	r3, r6, r3
 8004fcc:	4499      	add	r9, r3
 8004fce:	2366      	movs	r3, #102	@ 0x66
 8004fd0:	9306      	str	r3, [sp, #24]
 8004fd2:	e033      	b.n	800503c <_vfprintf_r+0xa14>
 8004fd4:	f813 7b01 	ldrb.w	r7, [r3], #1
 8004fd8:	f806 7f01 	strb.w	r7, [r6, #1]!
 8004fdc:	e69f      	b.n	8004d1e <_vfprintf_r+0x6f6>
 8004fde:	b941      	cbnz	r1, 8004ff2 <_vfprintf_r+0x9ca>
 8004fe0:	2230      	movs	r2, #48	@ 0x30
 8004fe2:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 8004fe6:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 8004fea:	3330      	adds	r3, #48	@ 0x30
 8004fec:	f802 3b01 	strb.w	r3, [r2], #1
 8004ff0:	e6a1      	b.n	8004d36 <_vfprintf_r+0x70e>
 8004ff2:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8004ff6:	e7f8      	b.n	8004fea <_vfprintf_r+0x9c2>
 8004ff8:	9b04      	ldr	r3, [sp, #16]
 8004ffa:	42b3      	cmp	r3, r6
 8004ffc:	dd0d      	ble.n	800501a <_vfprintf_r+0x9f2>
 8004ffe:	9b04      	ldr	r3, [sp, #16]
 8005000:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005002:	2e00      	cmp	r6, #0
 8005004:	eb03 0902 	add.w	r9, r3, r2
 8005008:	dc0c      	bgt.n	8005024 <_vfprintf_r+0x9fc>
 800500a:	f1c6 0301 	rsb	r3, r6, #1
 800500e:	4499      	add	r9, r3
 8005010:	e008      	b.n	8005024 <_vfprintf_r+0x9fc>
 8005012:	b17b      	cbz	r3, 8005034 <_vfprintf_r+0xa0c>
 8005014:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005016:	3301      	adds	r3, #1
 8005018:	e7d8      	b.n	8004fcc <_vfprintf_r+0x9a4>
 800501a:	07eb      	lsls	r3, r5, #31
 800501c:	d521      	bpl.n	8005062 <_vfprintf_r+0xa3a>
 800501e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005020:	eb06 0903 	add.w	r9, r6, r3
 8005024:	2367      	movs	r3, #103	@ 0x67
 8005026:	e7d3      	b.n	8004fd0 <_vfprintf_r+0x9a8>
 8005028:	46b1      	mov	r9, r6
 800502a:	e7d0      	b.n	8004fce <_vfprintf_r+0x9a6>
 800502c:	080086f8 	.word	0x080086f8
 8005030:	080086e8 	.word	0x080086e8
 8005034:	2366      	movs	r3, #102	@ 0x66
 8005036:	9306      	str	r3, [sp, #24]
 8005038:	f04f 0901 	mov.w	r9, #1
 800503c:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8005040:	9308      	str	r3, [sp, #32]
 8005042:	d01f      	beq.n	8005084 <_vfprintf_r+0xa5c>
 8005044:	2700      	movs	r7, #0
 8005046:	2e00      	cmp	r6, #0
 8005048:	9708      	str	r7, [sp, #32]
 800504a:	f77f ae88 	ble.w	8004d5e <_vfprintf_r+0x736>
 800504e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2bff      	cmp	r3, #255	@ 0xff
 8005054:	d107      	bne.n	8005066 <_vfprintf_r+0xa3e>
 8005056:	9b08      	ldr	r3, [sp, #32]
 8005058:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800505a:	443b      	add	r3, r7
 800505c:	fb02 9903 	mla	r9, r2, r3, r9
 8005060:	e67d      	b.n	8004d5e <_vfprintf_r+0x736>
 8005062:	46b1      	mov	r9, r6
 8005064:	e7de      	b.n	8005024 <_vfprintf_r+0x9fc>
 8005066:	42b3      	cmp	r3, r6
 8005068:	daf5      	bge.n	8005056 <_vfprintf_r+0xa2e>
 800506a:	1af6      	subs	r6, r6, r3
 800506c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800506e:	785b      	ldrb	r3, [r3, #1]
 8005070:	b133      	cbz	r3, 8005080 <_vfprintf_r+0xa58>
 8005072:	9b08      	ldr	r3, [sp, #32]
 8005074:	3301      	adds	r3, #1
 8005076:	9308      	str	r3, [sp, #32]
 8005078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800507a:	3301      	adds	r3, #1
 800507c:	9309      	str	r3, [sp, #36]	@ 0x24
 800507e:	e7e6      	b.n	800504e <_vfprintf_r+0xa26>
 8005080:	3701      	adds	r7, #1
 8005082:	e7e4      	b.n	800504e <_vfprintf_r+0xa26>
 8005084:	9f08      	ldr	r7, [sp, #32]
 8005086:	e66a      	b.n	8004d5e <_vfprintf_r+0x736>
 8005088:	232d      	movs	r3, #45	@ 0x2d
 800508a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800508e:	e66a      	b.n	8004d66 <_vfprintf_r+0x73e>
 8005090:	06af      	lsls	r7, r5, #26
 8005092:	d507      	bpl.n	80050a4 <_vfprintf_r+0xa7c>
 8005094:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005096:	6833      	ldr	r3, [r6, #0]
 8005098:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800509a:	17d2      	asrs	r2, r2, #31
 800509c:	e9c3 1200 	strd	r1, r2, [r3]
 80050a0:	3604      	adds	r6, #4
 80050a2:	e734      	b.n	8004f0e <_vfprintf_r+0x8e6>
 80050a4:	06e8      	lsls	r0, r5, #27
 80050a6:	d503      	bpl.n	80050b0 <_vfprintf_r+0xa88>
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e7f7      	b.n	80050a0 <_vfprintf_r+0xa78>
 80050b0:	0669      	lsls	r1, r5, #25
 80050b2:	d503      	bpl.n	80050bc <_vfprintf_r+0xa94>
 80050b4:	6833      	ldr	r3, [r6, #0]
 80050b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	e7f1      	b.n	80050a0 <_vfprintf_r+0xa78>
 80050bc:	05aa      	lsls	r2, r5, #22
 80050be:	d5f3      	bpl.n	80050a8 <_vfprintf_r+0xa80>
 80050c0:	6833      	ldr	r3, [r6, #0]
 80050c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e7eb      	b.n	80050a0 <_vfprintf_r+0xa78>
 80050c8:	f045 0510 	orr.w	r5, r5, #16
 80050cc:	f015 0320 	ands.w	r3, r5, #32
 80050d0:	d020      	beq.n	8005114 <_vfprintf_r+0xaec>
 80050d2:	3607      	adds	r6, #7
 80050d4:	f026 0307 	bic.w	r3, r6, #7
 80050d8:	461a      	mov	r2, r3
 80050da:	685f      	ldr	r7, [r3, #4]
 80050dc:	f852 6b08 	ldr.w	r6, [r2], #8
 80050e0:	9207      	str	r2, [sp, #28]
 80050e2:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80050e6:	2300      	movs	r3, #0
 80050e8:	2200      	movs	r2, #0
 80050ea:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80050ee:	f1b9 3fff 	cmp.w	r9, #4294967295
 80050f2:	f000 8491 	beq.w	8005a18 <_vfprintf_r+0x13f0>
 80050f6:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 80050fa:	9208      	str	r2, [sp, #32]
 80050fc:	ea56 0207 	orrs.w	r2, r6, r7
 8005100:	f040 848f 	bne.w	8005a22 <_vfprintf_r+0x13fa>
 8005104:	f1b9 0f00 	cmp.w	r9, #0
 8005108:	f000 80db 	beq.w	80052c2 <_vfprintf_r+0xc9a>
 800510c:	2b01      	cmp	r3, #1
 800510e:	f040 848b 	bne.w	8005a28 <_vfprintf_r+0x1400>
 8005112:	e083      	b.n	800521c <_vfprintf_r+0xbf4>
 8005114:	4632      	mov	r2, r6
 8005116:	f015 0710 	ands.w	r7, r5, #16
 800511a:	f852 6b04 	ldr.w	r6, [r2], #4
 800511e:	9207      	str	r2, [sp, #28]
 8005120:	d001      	beq.n	8005126 <_vfprintf_r+0xafe>
 8005122:	461f      	mov	r7, r3
 8005124:	e7dd      	b.n	80050e2 <_vfprintf_r+0xaba>
 8005126:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800512a:	d001      	beq.n	8005130 <_vfprintf_r+0xb08>
 800512c:	b2b6      	uxth	r6, r6
 800512e:	e7d8      	b.n	80050e2 <_vfprintf_r+0xaba>
 8005130:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8005134:	d0d5      	beq.n	80050e2 <_vfprintf_r+0xaba>
 8005136:	b2f6      	uxtb	r6, r6
 8005138:	e7f3      	b.n	8005122 <_vfprintf_r+0xafa>
 800513a:	4633      	mov	r3, r6
 800513c:	2278      	movs	r2, #120	@ 0x78
 800513e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005142:	9307      	str	r3, [sp, #28]
 8005144:	f647 0330 	movw	r3, #30768	@ 0x7830
 8005148:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800514c:	4b93      	ldr	r3, [pc, #588]	@ (800539c <_vfprintf_r+0xd74>)
 800514e:	9319      	str	r3, [sp, #100]	@ 0x64
 8005150:	2700      	movs	r7, #0
 8005152:	f045 0502 	orr.w	r5, r5, #2
 8005156:	2302      	movs	r3, #2
 8005158:	9206      	str	r2, [sp, #24]
 800515a:	e7c5      	b.n	80050e8 <_vfprintf_r+0xac0>
 800515c:	4633      	mov	r3, r6
 800515e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005162:	f853 8b04 	ldr.w	r8, [r3], #4
 8005166:	9307      	str	r3, [sp, #28]
 8005168:	f04f 0600 	mov.w	r6, #0
 800516c:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 8005170:	d00f      	beq.n	8005192 <_vfprintf_r+0xb6a>
 8005172:	464a      	mov	r2, r9
 8005174:	4631      	mov	r1, r6
 8005176:	4640      	mov	r0, r8
 8005178:	f7fb f83a 	bl	80001f0 <memchr>
 800517c:	4682      	mov	sl, r0
 800517e:	2800      	cmp	r0, #0
 8005180:	f43f ac7a 	beq.w	8004a78 <_vfprintf_r+0x450>
 8005184:	eba0 0908 	sub.w	r9, r0, r8
 8005188:	46b2      	mov	sl, r6
 800518a:	9610      	str	r6, [sp, #64]	@ 0x40
 800518c:	4637      	mov	r7, r6
 800518e:	9608      	str	r6, [sp, #32]
 8005190:	e5ec      	b.n	8004d6c <_vfprintf_r+0x744>
 8005192:	4640      	mov	r0, r8
 8005194:	f7fb f87c 	bl	8000290 <strlen>
 8005198:	46b2      	mov	sl, r6
 800519a:	4681      	mov	r9, r0
 800519c:	e46c      	b.n	8004a78 <_vfprintf_r+0x450>
 800519e:	f045 0510 	orr.w	r5, r5, #16
 80051a2:	f015 0320 	ands.w	r3, r5, #32
 80051a6:	d009      	beq.n	80051bc <_vfprintf_r+0xb94>
 80051a8:	3607      	adds	r6, #7
 80051aa:	f026 0307 	bic.w	r3, r6, #7
 80051ae:	461a      	mov	r2, r3
 80051b0:	685f      	ldr	r7, [r3, #4]
 80051b2:	f852 6b08 	ldr.w	r6, [r2], #8
 80051b6:	9207      	str	r2, [sp, #28]
 80051b8:	2301      	movs	r3, #1
 80051ba:	e795      	b.n	80050e8 <_vfprintf_r+0xac0>
 80051bc:	4632      	mov	r2, r6
 80051be:	f015 0710 	ands.w	r7, r5, #16
 80051c2:	f852 6b04 	ldr.w	r6, [r2], #4
 80051c6:	9207      	str	r2, [sp, #28]
 80051c8:	d001      	beq.n	80051ce <_vfprintf_r+0xba6>
 80051ca:	461f      	mov	r7, r3
 80051cc:	e7f4      	b.n	80051b8 <_vfprintf_r+0xb90>
 80051ce:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80051d2:	d001      	beq.n	80051d8 <_vfprintf_r+0xbb0>
 80051d4:	b2b6      	uxth	r6, r6
 80051d6:	e7ef      	b.n	80051b8 <_vfprintf_r+0xb90>
 80051d8:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 80051dc:	d0ec      	beq.n	80051b8 <_vfprintf_r+0xb90>
 80051de:	b2f6      	uxtb	r6, r6
 80051e0:	e7f3      	b.n	80051ca <_vfprintf_r+0xba2>
 80051e2:	4b6f      	ldr	r3, [pc, #444]	@ (80053a0 <_vfprintf_r+0xd78>)
 80051e4:	f7ff bb33 	b.w	800484e <_vfprintf_r+0x226>
 80051e8:	4632      	mov	r2, r6
 80051ea:	f015 0710 	ands.w	r7, r5, #16
 80051ee:	f852 6b04 	ldr.w	r6, [r2], #4
 80051f2:	9207      	str	r2, [sp, #28]
 80051f4:	d002      	beq.n	80051fc <_vfprintf_r+0xbd4>
 80051f6:	461f      	mov	r7, r3
 80051f8:	f7ff bb36 	b.w	8004868 <_vfprintf_r+0x240>
 80051fc:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8005200:	d002      	beq.n	8005208 <_vfprintf_r+0xbe0>
 8005202:	b2b6      	uxth	r6, r6
 8005204:	f7ff bb30 	b.w	8004868 <_vfprintf_r+0x240>
 8005208:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800520c:	f43f ab2c 	beq.w	8004868 <_vfprintf_r+0x240>
 8005210:	b2f6      	uxtb	r6, r6
 8005212:	e7f0      	b.n	80051f6 <_vfprintf_r+0xbce>
 8005214:	2e0a      	cmp	r6, #10
 8005216:	f177 0300 	sbcs.w	r3, r7, #0
 800521a:	d207      	bcs.n	800522c <_vfprintf_r+0xc04>
 800521c:	3630      	adds	r6, #48	@ 0x30
 800521e:	b2f6      	uxtb	r6, r6
 8005220:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 8005224:	f20d 1847 	addw	r8, sp, #327	@ 0x147
 8005228:	f000 bc1a 	b.w	8005a60 <_vfprintf_r+0x1438>
 800522c:	2300      	movs	r3, #0
 800522e:	9304      	str	r3, [sp, #16]
 8005230:	9b08      	ldr	r3, [sp, #32]
 8005232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005236:	ad52      	add	r5, sp, #328	@ 0x148
 8005238:	9310      	str	r3, [sp, #64]	@ 0x40
 800523a:	220a      	movs	r2, #10
 800523c:	2300      	movs	r3, #0
 800523e:	4630      	mov	r0, r6
 8005240:	4639      	mov	r1, r7
 8005242:	f7fb fcc1 	bl	8000bc8 <__aeabi_uldivmod>
 8005246:	9b04      	ldr	r3, [sp, #16]
 8005248:	9011      	str	r0, [sp, #68]	@ 0x44
 800524a:	3301      	adds	r3, #1
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005250:	3230      	adds	r2, #48	@ 0x30
 8005252:	468a      	mov	sl, r1
 8005254:	f105 38ff 	add.w	r8, r5, #4294967295
 8005258:	f805 2c01 	strb.w	r2, [r5, #-1]
 800525c:	b1d3      	cbz	r3, 8005294 <_vfprintf_r+0xc6c>
 800525e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005260:	9a04      	ldr	r2, [sp, #16]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d115      	bne.n	8005294 <_vfprintf_r+0xc6c>
 8005268:	2aff      	cmp	r2, #255	@ 0xff
 800526a:	d013      	beq.n	8005294 <_vfprintf_r+0xc6c>
 800526c:	2e0a      	cmp	r6, #10
 800526e:	f177 0300 	sbcs.w	r3, r7, #0
 8005272:	d30f      	bcc.n	8005294 <_vfprintf_r+0xc6c>
 8005274:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005276:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8005278:	eba8 0803 	sub.w	r8, r8, r3
 800527c:	461a      	mov	r2, r3
 800527e:	4640      	mov	r0, r8
 8005280:	f001 fc62 	bl	8006b48 <strncpy>
 8005284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	b11b      	cbz	r3, 8005292 <_vfprintf_r+0xc6a>
 800528a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528c:	3301      	adds	r3, #1
 800528e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005290:	2300      	movs	r3, #0
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	2e0a      	cmp	r6, #10
 8005296:	f177 0700 	sbcs.w	r7, r7, #0
 800529a:	f0c0 83e1 	bcc.w	8005a60 <_vfprintf_r+0x1438>
 800529e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80052a0:	4657      	mov	r7, sl
 80052a2:	4645      	mov	r5, r8
 80052a4:	e7c9      	b.n	800523a <_vfprintf_r+0xc12>
 80052a6:	f006 030f 	and.w	r3, r6, #15
 80052aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80052ac:	0936      	lsrs	r6, r6, #4
 80052ae:	5cd3      	ldrb	r3, [r2, r3]
 80052b0:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80052b4:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 80052b8:	093f      	lsrs	r7, r7, #4
 80052ba:	ea56 0307 	orrs.w	r3, r6, r7
 80052be:	d1f2      	bne.n	80052a6 <_vfprintf_r+0xc7e>
 80052c0:	e3ce      	b.n	8005a60 <_vfprintf_r+0x1438>
 80052c2:	b91b      	cbnz	r3, 80052cc <_vfprintf_r+0xca4>
 80052c4:	07ed      	lsls	r5, r5, #31
 80052c6:	d501      	bpl.n	80052cc <_vfprintf_r+0xca4>
 80052c8:	2630      	movs	r6, #48	@ 0x30
 80052ca:	e7a9      	b.n	8005220 <_vfprintf_r+0xbf8>
 80052cc:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 80052d0:	e3c6      	b.n	8005a60 <_vfprintf_r+0x1438>
 80052d2:	9b06      	ldr	r3, [sp, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 8390 	beq.w	80059fa <_vfprintf_r+0x13d2>
 80052da:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 80052de:	2300      	movs	r3, #0
 80052e0:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80052e4:	9607      	str	r6, [sp, #28]
 80052e6:	f7ff bb5c 	b.w	80049a2 <_vfprintf_r+0x37a>
 80052ea:	2010      	movs	r0, #16
 80052ec:	4403      	add	r3, r0
 80052ee:	2a07      	cmp	r2, #7
 80052f0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80052f4:	6060      	str	r0, [r4, #4]
 80052f6:	dd08      	ble.n	800530a <_vfprintf_r+0xce2>
 80052f8:	9803      	ldr	r0, [sp, #12]
 80052fa:	aa26      	add	r2, sp, #152	@ 0x98
 80052fc:	4659      	mov	r1, fp
 80052fe:	f000 fbff 	bl	8005b00 <__sprint_r>
 8005302:	2800      	cmp	r0, #0
 8005304:	f040 8357 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005308:	a929      	add	r1, sp, #164	@ 0xa4
 800530a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800530c:	3b10      	subs	r3, #16
 800530e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005310:	460c      	mov	r4, r1
 8005312:	e547      	b.n	8004da4 <_vfprintf_r+0x77c>
 8005314:	460c      	mov	r4, r1
 8005316:	e562      	b.n	8004dde <_vfprintf_r+0x7b6>
 8005318:	9803      	ldr	r0, [sp, #12]
 800531a:	aa26      	add	r2, sp, #152	@ 0x98
 800531c:	4659      	mov	r1, fp
 800531e:	f000 fbef 	bl	8005b00 <__sprint_r>
 8005322:	2800      	cmp	r0, #0
 8005324:	f040 8347 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005328:	ac29      	add	r4, sp, #164	@ 0xa4
 800532a:	e56a      	b.n	8004e02 <_vfprintf_r+0x7da>
 800532c:	9803      	ldr	r0, [sp, #12]
 800532e:	aa26      	add	r2, sp, #152	@ 0x98
 8005330:	4659      	mov	r1, fp
 8005332:	f000 fbe5 	bl	8005b00 <__sprint_r>
 8005336:	2800      	cmp	r0, #0
 8005338:	f040 833d 	bne.w	80059b6 <_vfprintf_r+0x138e>
 800533c:	ac29      	add	r4, sp, #164	@ 0xa4
 800533e:	e570      	b.n	8004e22 <_vfprintf_r+0x7fa>
 8005340:	2010      	movs	r0, #16
 8005342:	4403      	add	r3, r0
 8005344:	2a07      	cmp	r2, #7
 8005346:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800534a:	6060      	str	r0, [r4, #4]
 800534c:	dd08      	ble.n	8005360 <_vfprintf_r+0xd38>
 800534e:	9803      	ldr	r0, [sp, #12]
 8005350:	aa26      	add	r2, sp, #152	@ 0x98
 8005352:	4659      	mov	r1, fp
 8005354:	f000 fbd4 	bl	8005b00 <__sprint_r>
 8005358:	2800      	cmp	r0, #0
 800535a:	f040 832c 	bne.w	80059b6 <_vfprintf_r+0x138e>
 800535e:	a929      	add	r1, sp, #164	@ 0xa4
 8005360:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005362:	3b10      	subs	r3, #16
 8005364:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005366:	460c      	mov	r4, r1
 8005368:	e564      	b.n	8004e34 <_vfprintf_r+0x80c>
 800536a:	460c      	mov	r4, r1
 800536c:	e57f      	b.n	8004e6e <_vfprintf_r+0x846>
 800536e:	2010      	movs	r0, #16
 8005370:	4403      	add	r3, r0
 8005372:	2a07      	cmp	r2, #7
 8005374:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8005378:	6060      	str	r0, [r4, #4]
 800537a:	dd08      	ble.n	800538e <_vfprintf_r+0xd66>
 800537c:	9803      	ldr	r0, [sp, #12]
 800537e:	aa26      	add	r2, sp, #152	@ 0x98
 8005380:	4659      	mov	r1, fp
 8005382:	f000 fbbd 	bl	8005b00 <__sprint_r>
 8005386:	2800      	cmp	r0, #0
 8005388:	f040 8315 	bne.w	80059b6 <_vfprintf_r+0x138e>
 800538c:	a929      	add	r1, sp, #164	@ 0xa4
 800538e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005390:	3b10      	subs	r3, #16
 8005392:	9310      	str	r3, [sp, #64]	@ 0x40
 8005394:	460c      	mov	r4, r1
 8005396:	e570      	b.n	8004e7a <_vfprintf_r+0x852>
 8005398:	460c      	mov	r4, r1
 800539a:	e58b      	b.n	8004eb4 <_vfprintf_r+0x88c>
 800539c:	080086c4 	.word	0x080086c4
 80053a0:	080086d5 	.word	0x080086d5
 80053a4:	9b06      	ldr	r3, [sp, #24]
 80053a6:	2b65      	cmp	r3, #101	@ 0x65
 80053a8:	f340 8245 	ble.w	8005836 <_vfprintf_r+0x120e>
 80053ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053b0:	2200      	movs	r2, #0
 80053b2:	2300      	movs	r3, #0
 80053b4:	f7fb fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d06a      	beq.n	8005492 <_vfprintf_r+0xe6a>
 80053bc:	4b73      	ldr	r3, [pc, #460]	@ (800558c <_vfprintf_r+0xf64>)
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	2301      	movs	r3, #1
 80053c2:	6063      	str	r3, [r4, #4]
 80053c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80053c6:	3301      	adds	r3, #1
 80053c8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80053ca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80053cc:	3301      	adds	r3, #1
 80053ce:	2b07      	cmp	r3, #7
 80053d0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80053d2:	dc37      	bgt.n	8005444 <_vfprintf_r+0xe1c>
 80053d4:	3408      	adds	r4, #8
 80053d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053d8:	9a04      	ldr	r2, [sp, #16]
 80053da:	4293      	cmp	r3, r2
 80053dc:	db02      	blt.n	80053e4 <_vfprintf_r+0xdbc>
 80053de:	07e9      	lsls	r1, r5, #31
 80053e0:	f57f ad78 	bpl.w	8004ed4 <_vfprintf_r+0x8ac>
 80053e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80053ec:	6063      	str	r3, [r4, #4]
 80053ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80053f0:	4413      	add	r3, r2
 80053f2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80053f4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80053f6:	3301      	adds	r3, #1
 80053f8:	2b07      	cmp	r3, #7
 80053fa:	9327      	str	r3, [sp, #156]	@ 0x9c
 80053fc:	dc2c      	bgt.n	8005458 <_vfprintf_r+0xe30>
 80053fe:	3408      	adds	r4, #8
 8005400:	9b04      	ldr	r3, [sp, #16]
 8005402:	1e5e      	subs	r6, r3, #1
 8005404:	2e00      	cmp	r6, #0
 8005406:	f77f ad65 	ble.w	8004ed4 <_vfprintf_r+0x8ac>
 800540a:	4f61      	ldr	r7, [pc, #388]	@ (8005590 <_vfprintf_r+0xf68>)
 800540c:	f04f 0810 	mov.w	r8, #16
 8005410:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8005414:	2e10      	cmp	r6, #16
 8005416:	f103 0301 	add.w	r3, r3, #1
 800541a:	f104 0108 	add.w	r1, r4, #8
 800541e:	6027      	str	r7, [r4, #0]
 8005420:	dc24      	bgt.n	800546c <_vfprintf_r+0xe44>
 8005422:	6066      	str	r6, [r4, #4]
 8005424:	2b07      	cmp	r3, #7
 8005426:	4416      	add	r6, r2
 8005428:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800542c:	f340 82a2 	ble.w	8005974 <_vfprintf_r+0x134c>
 8005430:	9803      	ldr	r0, [sp, #12]
 8005432:	aa26      	add	r2, sp, #152	@ 0x98
 8005434:	4659      	mov	r1, fp
 8005436:	f000 fb63 	bl	8005b00 <__sprint_r>
 800543a:	2800      	cmp	r0, #0
 800543c:	f040 82bb 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005440:	ac29      	add	r4, sp, #164	@ 0xa4
 8005442:	e547      	b.n	8004ed4 <_vfprintf_r+0x8ac>
 8005444:	9803      	ldr	r0, [sp, #12]
 8005446:	aa26      	add	r2, sp, #152	@ 0x98
 8005448:	4659      	mov	r1, fp
 800544a:	f000 fb59 	bl	8005b00 <__sprint_r>
 800544e:	2800      	cmp	r0, #0
 8005450:	f040 82b1 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005454:	ac29      	add	r4, sp, #164	@ 0xa4
 8005456:	e7be      	b.n	80053d6 <_vfprintf_r+0xdae>
 8005458:	9803      	ldr	r0, [sp, #12]
 800545a:	aa26      	add	r2, sp, #152	@ 0x98
 800545c:	4659      	mov	r1, fp
 800545e:	f000 fb4f 	bl	8005b00 <__sprint_r>
 8005462:	2800      	cmp	r0, #0
 8005464:	f040 82a7 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005468:	ac29      	add	r4, sp, #164	@ 0xa4
 800546a:	e7c9      	b.n	8005400 <_vfprintf_r+0xdd8>
 800546c:	3210      	adds	r2, #16
 800546e:	2b07      	cmp	r3, #7
 8005470:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8005474:	f8c4 8004 	str.w	r8, [r4, #4]
 8005478:	dd08      	ble.n	800548c <_vfprintf_r+0xe64>
 800547a:	9803      	ldr	r0, [sp, #12]
 800547c:	aa26      	add	r2, sp, #152	@ 0x98
 800547e:	4659      	mov	r1, fp
 8005480:	f000 fb3e 	bl	8005b00 <__sprint_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	f040 8296 	bne.w	80059b6 <_vfprintf_r+0x138e>
 800548a:	a929      	add	r1, sp, #164	@ 0xa4
 800548c:	3e10      	subs	r6, #16
 800548e:	460c      	mov	r4, r1
 8005490:	e7be      	b.n	8005410 <_vfprintf_r+0xde8>
 8005492:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	dc7d      	bgt.n	8005594 <_vfprintf_r+0xf6c>
 8005498:	4b3c      	ldr	r3, [pc, #240]	@ (800558c <_vfprintf_r+0xf64>)
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	2301      	movs	r3, #1
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80054a2:	3301      	adds	r3, #1
 80054a4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80054a6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80054a8:	3301      	adds	r3, #1
 80054aa:	2b07      	cmp	r3, #7
 80054ac:	9327      	str	r3, [sp, #156]	@ 0x9c
 80054ae:	dc46      	bgt.n	800553e <_vfprintf_r+0xf16>
 80054b0:	3408      	adds	r4, #8
 80054b2:	9904      	ldr	r1, [sp, #16]
 80054b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054b6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80054b8:	430b      	orrs	r3, r1
 80054ba:	f005 0101 	and.w	r1, r5, #1
 80054be:	430b      	orrs	r3, r1
 80054c0:	f43f ad08 	beq.w	8004ed4 <_vfprintf_r+0x8ac>
 80054c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80054c6:	6023      	str	r3, [r4, #0]
 80054c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	441a      	add	r2, r3
 80054ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80054d0:	9228      	str	r2, [sp, #160]	@ 0xa0
 80054d2:	3301      	adds	r3, #1
 80054d4:	2b07      	cmp	r3, #7
 80054d6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80054d8:	dc3b      	bgt.n	8005552 <_vfprintf_r+0xf2a>
 80054da:	f104 0308 	add.w	r3, r4, #8
 80054de:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	da1b      	bge.n	800551c <_vfprintf_r+0xef4>
 80054e4:	4f2a      	ldr	r7, [pc, #168]	@ (8005590 <_vfprintf_r+0xf68>)
 80054e6:	4276      	negs	r6, r6
 80054e8:	461a      	mov	r2, r3
 80054ea:	2410      	movs	r4, #16
 80054ec:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 80054f0:	2e10      	cmp	r6, #16
 80054f2:	f101 0101 	add.w	r1, r1, #1
 80054f6:	f103 0308 	add.w	r3, r3, #8
 80054fa:	6017      	str	r7, [r2, #0]
 80054fc:	dc33      	bgt.n	8005566 <_vfprintf_r+0xf3e>
 80054fe:	6056      	str	r6, [r2, #4]
 8005500:	2907      	cmp	r1, #7
 8005502:	4406      	add	r6, r0
 8005504:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8005508:	dd08      	ble.n	800551c <_vfprintf_r+0xef4>
 800550a:	9803      	ldr	r0, [sp, #12]
 800550c:	aa26      	add	r2, sp, #152	@ 0x98
 800550e:	4659      	mov	r1, fp
 8005510:	f000 faf6 	bl	8005b00 <__sprint_r>
 8005514:	2800      	cmp	r0, #0
 8005516:	f040 824e 	bne.w	80059b6 <_vfprintf_r+0x138e>
 800551a:	ab29      	add	r3, sp, #164	@ 0xa4
 800551c:	9a04      	ldr	r2, [sp, #16]
 800551e:	9904      	ldr	r1, [sp, #16]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8005524:	f8c3 8000 	str.w	r8, [r3]
 8005528:	440a      	add	r2, r1
 800552a:	9228      	str	r2, [sp, #160]	@ 0xa0
 800552c:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800552e:	3201      	adds	r2, #1
 8005530:	2a07      	cmp	r2, #7
 8005532:	9227      	str	r2, [sp, #156]	@ 0x9c
 8005534:	f73f af7c 	bgt.w	8005430 <_vfprintf_r+0xe08>
 8005538:	f103 0408 	add.w	r4, r3, #8
 800553c:	e4ca      	b.n	8004ed4 <_vfprintf_r+0x8ac>
 800553e:	9803      	ldr	r0, [sp, #12]
 8005540:	aa26      	add	r2, sp, #152	@ 0x98
 8005542:	4659      	mov	r1, fp
 8005544:	f000 fadc 	bl	8005b00 <__sprint_r>
 8005548:	2800      	cmp	r0, #0
 800554a:	f040 8234 	bne.w	80059b6 <_vfprintf_r+0x138e>
 800554e:	ac29      	add	r4, sp, #164	@ 0xa4
 8005550:	e7af      	b.n	80054b2 <_vfprintf_r+0xe8a>
 8005552:	9803      	ldr	r0, [sp, #12]
 8005554:	aa26      	add	r2, sp, #152	@ 0x98
 8005556:	4659      	mov	r1, fp
 8005558:	f000 fad2 	bl	8005b00 <__sprint_r>
 800555c:	2800      	cmp	r0, #0
 800555e:	f040 822a 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005562:	ab29      	add	r3, sp, #164	@ 0xa4
 8005564:	e7bb      	b.n	80054de <_vfprintf_r+0xeb6>
 8005566:	3010      	adds	r0, #16
 8005568:	2907      	cmp	r1, #7
 800556a:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800556e:	6054      	str	r4, [r2, #4]
 8005570:	dd08      	ble.n	8005584 <_vfprintf_r+0xf5c>
 8005572:	9803      	ldr	r0, [sp, #12]
 8005574:	aa26      	add	r2, sp, #152	@ 0x98
 8005576:	4659      	mov	r1, fp
 8005578:	f000 fac2 	bl	8005b00 <__sprint_r>
 800557c:	2800      	cmp	r0, #0
 800557e:	f040 821a 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005582:	ab29      	add	r3, sp, #164	@ 0xa4
 8005584:	3e10      	subs	r6, #16
 8005586:	461a      	mov	r2, r3
 8005588:	e7b0      	b.n	80054ec <_vfprintf_r+0xec4>
 800558a:	bf00      	nop
 800558c:	080086e6 	.word	0x080086e6
 8005590:	080086e8 	.word	0x080086e8
 8005594:	9b04      	ldr	r3, [sp, #16]
 8005596:	4443      	add	r3, r8
 8005598:	9313      	str	r3, [sp, #76]	@ 0x4c
 800559a:	9b04      	ldr	r3, [sp, #16]
 800559c:	42b3      	cmp	r3, r6
 800559e:	bfa8      	it	ge
 80055a0:	4633      	movge	r3, r6
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	4699      	mov	r9, r3
 80055a6:	dd0b      	ble.n	80055c0 <_vfprintf_r+0xf98>
 80055a8:	e9c4 8300 	strd	r8, r3, [r4]
 80055ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80055ae:	444b      	add	r3, r9
 80055b0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80055b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80055b4:	3301      	adds	r3, #1
 80055b6:	2b07      	cmp	r3, #7
 80055b8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80055ba:	f300 8089 	bgt.w	80056d0 <_vfprintf_r+0x10a8>
 80055be:	3408      	adds	r4, #8
 80055c0:	f1b9 0f00 	cmp.w	r9, #0
 80055c4:	bfac      	ite	ge
 80055c6:	eba6 0309 	subge.w	r3, r6, r9
 80055ca:	4633      	movlt	r3, r6
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	9306      	str	r3, [sp, #24]
 80055d0:	dd1c      	ble.n	800560c <_vfprintf_r+0xfe4>
 80055d2:	f8df 9364 	ldr.w	r9, [pc, #868]	@ 8005938 <_vfprintf_r+0x1310>
 80055d6:	9806      	ldr	r0, [sp, #24]
 80055d8:	f8c4 9000 	str.w	r9, [r4]
 80055dc:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80055e0:	2810      	cmp	r0, #16
 80055e2:	f102 0201 	add.w	r2, r2, #1
 80055e6:	f104 0108 	add.w	r1, r4, #8
 80055ea:	dc7b      	bgt.n	80056e4 <_vfprintf_r+0x10bc>
 80055ec:	4403      	add	r3, r0
 80055ee:	2a07      	cmp	r2, #7
 80055f0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80055f4:	6060      	str	r0, [r4, #4]
 80055f6:	f340 808a 	ble.w	800570e <_vfprintf_r+0x10e6>
 80055fa:	9803      	ldr	r0, [sp, #12]
 80055fc:	aa26      	add	r2, sp, #152	@ 0x98
 80055fe:	4659      	mov	r1, fp
 8005600:	f000 fa7e 	bl	8005b00 <__sprint_r>
 8005604:	2800      	cmp	r0, #0
 8005606:	f040 81d6 	bne.w	80059b6 <_vfprintf_r+0x138e>
 800560a:	ac29      	add	r4, sp, #164	@ 0xa4
 800560c:	056a      	lsls	r2, r5, #21
 800560e:	44b0      	add	r8, r6
 8005610:	d508      	bpl.n	8005624 <_vfprintf_r+0xffc>
 8005612:	9b08      	ldr	r3, [sp, #32]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d17c      	bne.n	8005712 <_vfprintf_r+0x10ea>
 8005618:	2f00      	cmp	r7, #0
 800561a:	d17c      	bne.n	8005716 <_vfprintf_r+0x10ee>
 800561c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800561e:	4598      	cmp	r8, r3
 8005620:	bf28      	it	cs
 8005622:	4698      	movcs	r8, r3
 8005624:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005626:	9a04      	ldr	r2, [sp, #16]
 8005628:	4293      	cmp	r3, r2
 800562a:	db01      	blt.n	8005630 <_vfprintf_r+0x1008>
 800562c:	07eb      	lsls	r3, r5, #31
 800562e:	d50e      	bpl.n	800564e <_vfprintf_r+0x1026>
 8005630:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005636:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005638:	6063      	str	r3, [r4, #4]
 800563a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800563c:	4413      	add	r3, r2
 800563e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005640:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005642:	3301      	adds	r3, #1
 8005644:	2b07      	cmp	r3, #7
 8005646:	9327      	str	r3, [sp, #156]	@ 0x9c
 8005648:	f300 80e1 	bgt.w	800580e <_vfprintf_r+0x11e6>
 800564c:	3408      	adds	r4, #8
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8005652:	1bdf      	subs	r7, r3, r7
 8005654:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005656:	eba3 0308 	sub.w	r3, r3, r8
 800565a:	429f      	cmp	r7, r3
 800565c:	bfa8      	it	ge
 800565e:	461f      	movge	r7, r3
 8005660:	2f00      	cmp	r7, #0
 8005662:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005664:	dd0a      	ble.n	800567c <_vfprintf_r+0x1054>
 8005666:	443b      	add	r3, r7
 8005668:	9328      	str	r3, [sp, #160]	@ 0xa0
 800566a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800566c:	3301      	adds	r3, #1
 800566e:	2b07      	cmp	r3, #7
 8005670:	e9c4 8700 	strd	r8, r7, [r4]
 8005674:	9327      	str	r3, [sp, #156]	@ 0x9c
 8005676:	f300 80d4 	bgt.w	8005822 <_vfprintf_r+0x11fa>
 800567a:	3408      	adds	r4, #8
 800567c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	2f00      	cmp	r7, #0
 8005682:	eba3 0606 	sub.w	r6, r3, r6
 8005686:	bfa8      	it	ge
 8005688:	1bf6      	subge	r6, r6, r7
 800568a:	2e00      	cmp	r6, #0
 800568c:	f77f ac22 	ble.w	8004ed4 <_vfprintf_r+0x8ac>
 8005690:	4fa9      	ldr	r7, [pc, #676]	@ (8005938 <_vfprintf_r+0x1310>)
 8005692:	f04f 0810 	mov.w	r8, #16
 8005696:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800569a:	2e10      	cmp	r6, #16
 800569c:	f103 0301 	add.w	r3, r3, #1
 80056a0:	f104 0108 	add.w	r1, r4, #8
 80056a4:	6027      	str	r7, [r4, #0]
 80056a6:	f77f aebc 	ble.w	8005422 <_vfprintf_r+0xdfa>
 80056aa:	3210      	adds	r2, #16
 80056ac:	2b07      	cmp	r3, #7
 80056ae:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80056b2:	f8c4 8004 	str.w	r8, [r4, #4]
 80056b6:	dd08      	ble.n	80056ca <_vfprintf_r+0x10a2>
 80056b8:	9803      	ldr	r0, [sp, #12]
 80056ba:	aa26      	add	r2, sp, #152	@ 0x98
 80056bc:	4659      	mov	r1, fp
 80056be:	f000 fa1f 	bl	8005b00 <__sprint_r>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	f040 8177 	bne.w	80059b6 <_vfprintf_r+0x138e>
 80056c8:	a929      	add	r1, sp, #164	@ 0xa4
 80056ca:	3e10      	subs	r6, #16
 80056cc:	460c      	mov	r4, r1
 80056ce:	e7e2      	b.n	8005696 <_vfprintf_r+0x106e>
 80056d0:	9803      	ldr	r0, [sp, #12]
 80056d2:	aa26      	add	r2, sp, #152	@ 0x98
 80056d4:	4659      	mov	r1, fp
 80056d6:	f000 fa13 	bl	8005b00 <__sprint_r>
 80056da:	2800      	cmp	r0, #0
 80056dc:	f040 816b 	bne.w	80059b6 <_vfprintf_r+0x138e>
 80056e0:	ac29      	add	r4, sp, #164	@ 0xa4
 80056e2:	e76d      	b.n	80055c0 <_vfprintf_r+0xf98>
 80056e4:	2010      	movs	r0, #16
 80056e6:	4403      	add	r3, r0
 80056e8:	2a07      	cmp	r2, #7
 80056ea:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80056ee:	6060      	str	r0, [r4, #4]
 80056f0:	dd08      	ble.n	8005704 <_vfprintf_r+0x10dc>
 80056f2:	9803      	ldr	r0, [sp, #12]
 80056f4:	aa26      	add	r2, sp, #152	@ 0x98
 80056f6:	4659      	mov	r1, fp
 80056f8:	f000 fa02 	bl	8005b00 <__sprint_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	f040 815a 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005702:	a929      	add	r1, sp, #164	@ 0xa4
 8005704:	9b06      	ldr	r3, [sp, #24]
 8005706:	3b10      	subs	r3, #16
 8005708:	9306      	str	r3, [sp, #24]
 800570a:	460c      	mov	r4, r1
 800570c:	e763      	b.n	80055d6 <_vfprintf_r+0xfae>
 800570e:	460c      	mov	r4, r1
 8005710:	e77c      	b.n	800560c <_vfprintf_r+0xfe4>
 8005712:	2f00      	cmp	r7, #0
 8005714:	d04b      	beq.n	80057ae <_vfprintf_r+0x1186>
 8005716:	3f01      	subs	r7, #1
 8005718:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800571e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005724:	4413      	add	r3, r2
 8005726:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005728:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800572a:	3301      	adds	r3, #1
 800572c:	2b07      	cmp	r3, #7
 800572e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8005730:	dc44      	bgt.n	80057bc <_vfprintf_r+0x1194>
 8005732:	3408      	adds	r4, #8
 8005734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005736:	f893 9000 	ldrb.w	r9, [r3]
 800573a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800573c:	eba3 0308 	sub.w	r3, r3, r8
 8005740:	4599      	cmp	r9, r3
 8005742:	bfa8      	it	ge
 8005744:	4699      	movge	r9, r3
 8005746:	f1b9 0f00 	cmp.w	r9, #0
 800574a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800574c:	dd09      	ble.n	8005762 <_vfprintf_r+0x113a>
 800574e:	444b      	add	r3, r9
 8005750:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005752:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005754:	3301      	adds	r3, #1
 8005756:	2b07      	cmp	r3, #7
 8005758:	e9c4 8900 	strd	r8, r9, [r4]
 800575c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800575e:	dc37      	bgt.n	80057d0 <_vfprintf_r+0x11a8>
 8005760:	3408      	adds	r4, #8
 8005762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005764:	781e      	ldrb	r6, [r3, #0]
 8005766:	f1b9 0f00 	cmp.w	r9, #0
 800576a:	bfa8      	it	ge
 800576c:	eba6 0609 	subge.w	r6, r6, r9
 8005770:	2e00      	cmp	r6, #0
 8005772:	dd18      	ble.n	80057a6 <_vfprintf_r+0x117e>
 8005774:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8005778:	486f      	ldr	r0, [pc, #444]	@ (8005938 <_vfprintf_r+0x1310>)
 800577a:	6020      	str	r0, [r4, #0]
 800577c:	2e10      	cmp	r6, #16
 800577e:	f103 0301 	add.w	r3, r3, #1
 8005782:	f104 0108 	add.w	r1, r4, #8
 8005786:	dc2d      	bgt.n	80057e4 <_vfprintf_r+0x11bc>
 8005788:	6066      	str	r6, [r4, #4]
 800578a:	2b07      	cmp	r3, #7
 800578c:	4416      	add	r6, r2
 800578e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8005792:	dd3a      	ble.n	800580a <_vfprintf_r+0x11e2>
 8005794:	9803      	ldr	r0, [sp, #12]
 8005796:	aa26      	add	r2, sp, #152	@ 0x98
 8005798:	4659      	mov	r1, fp
 800579a:	f000 f9b1 	bl	8005b00 <__sprint_r>
 800579e:	2800      	cmp	r0, #0
 80057a0:	f040 8109 	bne.w	80059b6 <_vfprintf_r+0x138e>
 80057a4:	ac29      	add	r4, sp, #164	@ 0xa4
 80057a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	4498      	add	r8, r3
 80057ac:	e731      	b.n	8005612 <_vfprintf_r+0xfea>
 80057ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b0:	3b01      	subs	r3, #1
 80057b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80057b4:	9b08      	ldr	r3, [sp, #32]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	9308      	str	r3, [sp, #32]
 80057ba:	e7ad      	b.n	8005718 <_vfprintf_r+0x10f0>
 80057bc:	9803      	ldr	r0, [sp, #12]
 80057be:	aa26      	add	r2, sp, #152	@ 0x98
 80057c0:	4659      	mov	r1, fp
 80057c2:	f000 f99d 	bl	8005b00 <__sprint_r>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f040 80f5 	bne.w	80059b6 <_vfprintf_r+0x138e>
 80057cc:	ac29      	add	r4, sp, #164	@ 0xa4
 80057ce:	e7b1      	b.n	8005734 <_vfprintf_r+0x110c>
 80057d0:	9803      	ldr	r0, [sp, #12]
 80057d2:	aa26      	add	r2, sp, #152	@ 0x98
 80057d4:	4659      	mov	r1, fp
 80057d6:	f000 f993 	bl	8005b00 <__sprint_r>
 80057da:	2800      	cmp	r0, #0
 80057dc:	f040 80eb 	bne.w	80059b6 <_vfprintf_r+0x138e>
 80057e0:	ac29      	add	r4, sp, #164	@ 0xa4
 80057e2:	e7be      	b.n	8005762 <_vfprintf_r+0x113a>
 80057e4:	2010      	movs	r0, #16
 80057e6:	4402      	add	r2, r0
 80057e8:	2b07      	cmp	r3, #7
 80057ea:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80057ee:	6060      	str	r0, [r4, #4]
 80057f0:	dd08      	ble.n	8005804 <_vfprintf_r+0x11dc>
 80057f2:	9803      	ldr	r0, [sp, #12]
 80057f4:	aa26      	add	r2, sp, #152	@ 0x98
 80057f6:	4659      	mov	r1, fp
 80057f8:	f000 f982 	bl	8005b00 <__sprint_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	f040 80da 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005802:	a929      	add	r1, sp, #164	@ 0xa4
 8005804:	3e10      	subs	r6, #16
 8005806:	460c      	mov	r4, r1
 8005808:	e7b4      	b.n	8005774 <_vfprintf_r+0x114c>
 800580a:	460c      	mov	r4, r1
 800580c:	e7cb      	b.n	80057a6 <_vfprintf_r+0x117e>
 800580e:	9803      	ldr	r0, [sp, #12]
 8005810:	aa26      	add	r2, sp, #152	@ 0x98
 8005812:	4659      	mov	r1, fp
 8005814:	f000 f974 	bl	8005b00 <__sprint_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	f040 80cc 	bne.w	80059b6 <_vfprintf_r+0x138e>
 800581e:	ac29      	add	r4, sp, #164	@ 0xa4
 8005820:	e715      	b.n	800564e <_vfprintf_r+0x1026>
 8005822:	9803      	ldr	r0, [sp, #12]
 8005824:	aa26      	add	r2, sp, #152	@ 0x98
 8005826:	4659      	mov	r1, fp
 8005828:	f000 f96a 	bl	8005b00 <__sprint_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	f040 80c2 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005832:	ac29      	add	r4, sp, #164	@ 0xa4
 8005834:	e722      	b.n	800567c <_vfprintf_r+0x1054>
 8005836:	9904      	ldr	r1, [sp, #16]
 8005838:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800583a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800583c:	2901      	cmp	r1, #1
 800583e:	f103 0301 	add.w	r3, r3, #1
 8005842:	f102 0201 	add.w	r2, r2, #1
 8005846:	f104 0608 	add.w	r6, r4, #8
 800584a:	dc02      	bgt.n	8005852 <_vfprintf_r+0x122a>
 800584c:	07ef      	lsls	r7, r5, #31
 800584e:	f140 8086 	bpl.w	800595e <_vfprintf_r+0x1336>
 8005852:	2101      	movs	r1, #1
 8005854:	2a07      	cmp	r2, #7
 8005856:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800585a:	f8c4 8000 	str.w	r8, [r4]
 800585e:	6061      	str	r1, [r4, #4]
 8005860:	dd08      	ble.n	8005874 <_vfprintf_r+0x124c>
 8005862:	9803      	ldr	r0, [sp, #12]
 8005864:	aa26      	add	r2, sp, #152	@ 0x98
 8005866:	4659      	mov	r1, fp
 8005868:	f000 f94a 	bl	8005b00 <__sprint_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 80a2 	bne.w	80059b6 <_vfprintf_r+0x138e>
 8005872:	ae29      	add	r6, sp, #164	@ 0xa4
 8005874:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005876:	6033      	str	r3, [r6, #0]
 8005878:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800587a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800587c:	6073      	str	r3, [r6, #4]
 800587e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005880:	4413      	add	r3, r2
 8005882:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005884:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005886:	3301      	adds	r3, #1
 8005888:	2b07      	cmp	r3, #7
 800588a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800588c:	dc33      	bgt.n	80058f6 <_vfprintf_r+0x12ce>
 800588e:	3608      	adds	r6, #8
 8005890:	9b04      	ldr	r3, [sp, #16]
 8005892:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005896:	1e5c      	subs	r4, r3, #1
 8005898:	2200      	movs	r2, #0
 800589a:	2300      	movs	r3, #0
 800589c:	e9dd 9727 	ldrd	r9, r7, [sp, #156]	@ 0x9c
 80058a0:	f7fb f922 	bl	8000ae8 <__aeabi_dcmpeq>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	d12f      	bne.n	8005908 <_vfprintf_r+0x12e0>
 80058a8:	f108 0201 	add.w	r2, r8, #1
 80058ac:	e9c6 2400 	strd	r2, r4, [r6]
 80058b0:	9a04      	ldr	r2, [sp, #16]
 80058b2:	f109 0301 	add.w	r3, r9, #1
 80058b6:	3f01      	subs	r7, #1
 80058b8:	4417      	add	r7, r2
 80058ba:	2b07      	cmp	r3, #7
 80058bc:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 80058c0:	dd56      	ble.n	8005970 <_vfprintf_r+0x1348>
 80058c2:	9803      	ldr	r0, [sp, #12]
 80058c4:	aa26      	add	r2, sp, #152	@ 0x98
 80058c6:	4659      	mov	r1, fp
 80058c8:	f000 f91a 	bl	8005b00 <__sprint_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d172      	bne.n	80059b6 <_vfprintf_r+0x138e>
 80058d0:	ae29      	add	r6, sp, #164	@ 0xa4
 80058d2:	ab22      	add	r3, sp, #136	@ 0x88
 80058d4:	6033      	str	r3, [r6, #0]
 80058d6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80058d8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80058da:	6073      	str	r3, [r6, #4]
 80058dc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80058de:	4413      	add	r3, r2
 80058e0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80058e2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80058e4:	3301      	adds	r3, #1
 80058e6:	2b07      	cmp	r3, #7
 80058e8:	9327      	str	r3, [sp, #156]	@ 0x9c
 80058ea:	f73f ada1 	bgt.w	8005430 <_vfprintf_r+0xe08>
 80058ee:	f106 0408 	add.w	r4, r6, #8
 80058f2:	f7ff baef 	b.w	8004ed4 <_vfprintf_r+0x8ac>
 80058f6:	9803      	ldr	r0, [sp, #12]
 80058f8:	aa26      	add	r2, sp, #152	@ 0x98
 80058fa:	4659      	mov	r1, fp
 80058fc:	f000 f900 	bl	8005b00 <__sprint_r>
 8005900:	2800      	cmp	r0, #0
 8005902:	d158      	bne.n	80059b6 <_vfprintf_r+0x138e>
 8005904:	ae29      	add	r6, sp, #164	@ 0xa4
 8005906:	e7c3      	b.n	8005890 <_vfprintf_r+0x1268>
 8005908:	9b04      	ldr	r3, [sp, #16]
 800590a:	2b01      	cmp	r3, #1
 800590c:	dde1      	ble.n	80058d2 <_vfprintf_r+0x12aa>
 800590e:	4f0a      	ldr	r7, [pc, #40]	@ (8005938 <_vfprintf_r+0x1310>)
 8005910:	f04f 0810 	mov.w	r8, #16
 8005914:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8005918:	2c10      	cmp	r4, #16
 800591a:	f103 0301 	add.w	r3, r3, #1
 800591e:	f106 0108 	add.w	r1, r6, #8
 8005922:	6037      	str	r7, [r6, #0]
 8005924:	dc0a      	bgt.n	800593c <_vfprintf_r+0x1314>
 8005926:	6074      	str	r4, [r6, #4]
 8005928:	2b07      	cmp	r3, #7
 800592a:	4414      	add	r4, r2
 800592c:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8005930:	dcc7      	bgt.n	80058c2 <_vfprintf_r+0x129a>
 8005932:	460e      	mov	r6, r1
 8005934:	e7cd      	b.n	80058d2 <_vfprintf_r+0x12aa>
 8005936:	bf00      	nop
 8005938:	080086e8 	.word	0x080086e8
 800593c:	3210      	adds	r2, #16
 800593e:	2b07      	cmp	r3, #7
 8005940:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8005944:	f8c6 8004 	str.w	r8, [r6, #4]
 8005948:	dd06      	ble.n	8005958 <_vfprintf_r+0x1330>
 800594a:	9803      	ldr	r0, [sp, #12]
 800594c:	aa26      	add	r2, sp, #152	@ 0x98
 800594e:	4659      	mov	r1, fp
 8005950:	f000 f8d6 	bl	8005b00 <__sprint_r>
 8005954:	bb78      	cbnz	r0, 80059b6 <_vfprintf_r+0x138e>
 8005956:	a929      	add	r1, sp, #164	@ 0xa4
 8005958:	3c10      	subs	r4, #16
 800595a:	460e      	mov	r6, r1
 800595c:	e7da      	b.n	8005914 <_vfprintf_r+0x12ec>
 800595e:	2101      	movs	r1, #1
 8005960:	2a07      	cmp	r2, #7
 8005962:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8005966:	f8c4 8000 	str.w	r8, [r4]
 800596a:	6061      	str	r1, [r4, #4]
 800596c:	ddb1      	ble.n	80058d2 <_vfprintf_r+0x12aa>
 800596e:	e7a8      	b.n	80058c2 <_vfprintf_r+0x129a>
 8005970:	3608      	adds	r6, #8
 8005972:	e7ae      	b.n	80058d2 <_vfprintf_r+0x12aa>
 8005974:	460c      	mov	r4, r1
 8005976:	f7ff baad 	b.w	8004ed4 <_vfprintf_r+0x8ac>
 800597a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800597c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800597e:	1a9d      	subs	r5, r3, r2
 8005980:	2d00      	cmp	r5, #0
 8005982:	f77f aaaa 	ble.w	8004eda <_vfprintf_r+0x8b2>
 8005986:	4e3d      	ldr	r6, [pc, #244]	@ (8005a7c <_vfprintf_r+0x1454>)
 8005988:	2710      	movs	r7, #16
 800598a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800598e:	2d10      	cmp	r5, #16
 8005990:	f103 0301 	add.w	r3, r3, #1
 8005994:	6026      	str	r6, [r4, #0]
 8005996:	dc18      	bgt.n	80059ca <_vfprintf_r+0x13a2>
 8005998:	6065      	str	r5, [r4, #4]
 800599a:	2b07      	cmp	r3, #7
 800599c:	4415      	add	r5, r2
 800599e:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 80059a2:	f77f aa9a 	ble.w	8004eda <_vfprintf_r+0x8b2>
 80059a6:	9803      	ldr	r0, [sp, #12]
 80059a8:	aa26      	add	r2, sp, #152	@ 0x98
 80059aa:	4659      	mov	r1, fp
 80059ac:	f000 f8a8 	bl	8005b00 <__sprint_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	f43f aa92 	beq.w	8004eda <_vfprintf_r+0x8b2>
 80059b6:	f1ba 0f00 	cmp.w	sl, #0
 80059ba:	f43f a892 	beq.w	8004ae2 <_vfprintf_r+0x4ba>
 80059be:	9803      	ldr	r0, [sp, #12]
 80059c0:	4651      	mov	r1, sl
 80059c2:	f7fe fb29 	bl	8004018 <_free_r>
 80059c6:	f7ff b88c 	b.w	8004ae2 <_vfprintf_r+0x4ba>
 80059ca:	3210      	adds	r2, #16
 80059cc:	2b07      	cmp	r3, #7
 80059ce:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80059d2:	6067      	str	r7, [r4, #4]
 80059d4:	dc02      	bgt.n	80059dc <_vfprintf_r+0x13b4>
 80059d6:	3408      	adds	r4, #8
 80059d8:	3d10      	subs	r5, #16
 80059da:	e7d6      	b.n	800598a <_vfprintf_r+0x1362>
 80059dc:	9803      	ldr	r0, [sp, #12]
 80059de:	aa26      	add	r2, sp, #152	@ 0x98
 80059e0:	4659      	mov	r1, fp
 80059e2:	f000 f88d 	bl	8005b00 <__sprint_r>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d1e5      	bne.n	80059b6 <_vfprintf_r+0x138e>
 80059ea:	ac29      	add	r4, sp, #164	@ 0xa4
 80059ec:	e7f4      	b.n	80059d8 <_vfprintf_r+0x13b0>
 80059ee:	9803      	ldr	r0, [sp, #12]
 80059f0:	4651      	mov	r1, sl
 80059f2:	f7fe fb11 	bl	8004018 <_free_r>
 80059f6:	f7ff ba88 	b.w	8004f0a <_vfprintf_r+0x8e2>
 80059fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80059fc:	b91b      	cbnz	r3, 8005a06 <_vfprintf_r+0x13de>
 80059fe:	2300      	movs	r3, #0
 8005a00:	9327      	str	r3, [sp, #156]	@ 0x9c
 8005a02:	f7ff b86e 	b.w	8004ae2 <_vfprintf_r+0x4ba>
 8005a06:	9803      	ldr	r0, [sp, #12]
 8005a08:	aa26      	add	r2, sp, #152	@ 0x98
 8005a0a:	4659      	mov	r1, fp
 8005a0c:	f000 f878 	bl	8005b00 <__sprint_r>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d0f4      	beq.n	80059fe <_vfprintf_r+0x13d6>
 8005a14:	f7ff b865 	b.w	8004ae2 <_vfprintf_r+0x4ba>
 8005a18:	ea56 0207 	orrs.w	r2, r6, r7
 8005a1c:	9508      	str	r5, [sp, #32]
 8005a1e:	f43f ab75 	beq.w	800510c <_vfprintf_r+0xae4>
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	f43f abf6 	beq.w	8005214 <_vfprintf_r+0xbec>
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	f50d 78a4 	add.w	r8, sp, #328	@ 0x148
 8005a2e:	f43f ac3a 	beq.w	80052a6 <_vfprintf_r+0xc7e>
 8005a32:	f006 0307 	and.w	r3, r6, #7
 8005a36:	08f6      	lsrs	r6, r6, #3
 8005a38:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8005a3c:	08ff      	lsrs	r7, r7, #3
 8005a3e:	3330      	adds	r3, #48	@ 0x30
 8005a40:	ea56 0107 	orrs.w	r1, r6, r7
 8005a44:	4642      	mov	r2, r8
 8005a46:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8005a4a:	d1f2      	bne.n	8005a32 <_vfprintf_r+0x140a>
 8005a4c:	9908      	ldr	r1, [sp, #32]
 8005a4e:	07ce      	lsls	r6, r1, #31
 8005a50:	d506      	bpl.n	8005a60 <_vfprintf_r+0x1438>
 8005a52:	2b30      	cmp	r3, #48	@ 0x30
 8005a54:	d004      	beq.n	8005a60 <_vfprintf_r+0x1438>
 8005a56:	2330      	movs	r3, #48	@ 0x30
 8005a58:	f808 3c01 	strb.w	r3, [r8, #-1]
 8005a5c:	f1a2 0802 	sub.w	r8, r2, #2
 8005a60:	ab52      	add	r3, sp, #328	@ 0x148
 8005a62:	9d08      	ldr	r5, [sp, #32]
 8005a64:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8005a68:	f04f 0a00 	mov.w	sl, #0
 8005a6c:	eba3 0908 	sub.w	r9, r3, r8
 8005a70:	4657      	mov	r7, sl
 8005a72:	f8cd a020 	str.w	sl, [sp, #32]
 8005a76:	4656      	mov	r6, sl
 8005a78:	f7ff b978 	b.w	8004d6c <_vfprintf_r+0x744>
 8005a7c:	080086f8 	.word	0x080086f8

08005a80 <__sbprintf>:
 8005a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a82:	461f      	mov	r7, r3
 8005a84:	898b      	ldrh	r3, [r1, #12]
 8005a86:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8005a8a:	f023 0302 	bic.w	r3, r3, #2
 8005a8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005a92:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8005a94:	9319      	str	r3, [sp, #100]	@ 0x64
 8005a96:	89cb      	ldrh	r3, [r1, #14]
 8005a98:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005a9c:	69cb      	ldr	r3, [r1, #28]
 8005a9e:	9307      	str	r3, [sp, #28]
 8005aa0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8005aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa4:	ab1a      	add	r3, sp, #104	@ 0x68
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aae:	4615      	mov	r5, r2
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	9305      	str	r3, [sp, #20]
 8005ab6:	a816      	add	r0, sp, #88	@ 0x58
 8005ab8:	2300      	movs	r3, #0
 8005aba:	460c      	mov	r4, r1
 8005abc:	9306      	str	r3, [sp, #24]
 8005abe:	f7fe fa41 	bl	8003f44 <__retarget_lock_init_recursive>
 8005ac2:	462a      	mov	r2, r5
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	4669      	mov	r1, sp
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f7fe fdad 	bl	8004628 <_vfprintf_r>
 8005ace:	1e05      	subs	r5, r0, #0
 8005ad0:	db07      	blt.n	8005ae2 <__sbprintf+0x62>
 8005ad2:	4669      	mov	r1, sp
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f000 fdeb 	bl	80066b0 <_fflush_r>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	bf18      	it	ne
 8005ade:	f04f 35ff 	movne.w	r5, #4294967295
 8005ae2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005ae6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8005ae8:	065b      	lsls	r3, r3, #25
 8005aea:	bf42      	ittt	mi
 8005aec:	89a3      	ldrhmi	r3, [r4, #12]
 8005aee:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8005af2:	81a3      	strhmi	r3, [r4, #12]
 8005af4:	f7fe fa27 	bl	8003f46 <__retarget_lock_close_recursive>
 8005af8:	4628      	mov	r0, r5
 8005afa:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8005afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b00 <__sprint_r>:
 8005b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	6893      	ldr	r3, [r2, #8]
 8005b06:	4680      	mov	r8, r0
 8005b08:	460e      	mov	r6, r1
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	b343      	cbz	r3, 8005b60 <__sprint_r+0x60>
 8005b0e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8005b10:	049d      	lsls	r5, r3, #18
 8005b12:	d522      	bpl.n	8005b5a <__sprint_r+0x5a>
 8005b14:	6815      	ldr	r5, [r2, #0]
 8005b16:	68a0      	ldr	r0, [r4, #8]
 8005b18:	3508      	adds	r5, #8
 8005b1a:	b928      	cbnz	r0, 8005b28 <__sprint_r+0x28>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60a3      	str	r3, [r4, #8]
 8005b20:	2300      	movs	r3, #0
 8005b22:	6063      	str	r3, [r4, #4]
 8005b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b28:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8005b2c:	f04f 0900 	mov.w	r9, #0
 8005b30:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8005b34:	45ca      	cmp	sl, r9
 8005b36:	dc05      	bgt.n	8005b44 <__sprint_r+0x44>
 8005b38:	68a3      	ldr	r3, [r4, #8]
 8005b3a:	f027 0703 	bic.w	r7, r7, #3
 8005b3e:	1bdb      	subs	r3, r3, r7
 8005b40:	60a3      	str	r3, [r4, #8]
 8005b42:	e7e8      	b.n	8005b16 <__sprint_r+0x16>
 8005b44:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f000 ffb9 	bl	8006ac2 <_fputwc_r>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d0e3      	beq.n	8005b1c <__sprint_r+0x1c>
 8005b54:	f109 0901 	add.w	r9, r9, #1
 8005b58:	e7ec      	b.n	8005b34 <__sprint_r+0x34>
 8005b5a:	f000 fdcf 	bl	80066fc <__sfvwrite_r>
 8005b5e:	e7dd      	b.n	8005b1c <__sprint_r+0x1c>
 8005b60:	4618      	mov	r0, r3
 8005b62:	e7dd      	b.n	8005b20 <__sprint_r+0x20>

08005b64 <_vfiprintf_r>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	b0bb      	sub	sp, #236	@ 0xec
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	4693      	mov	fp, r2
 8005b6e:	461c      	mov	r4, r3
 8005b70:	461d      	mov	r5, r3
 8005b72:	9000      	str	r0, [sp, #0]
 8005b74:	b118      	cbz	r0, 8005b7e <_vfiprintf_r+0x1a>
 8005b76:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005b78:	b90b      	cbnz	r3, 8005b7e <_vfiprintf_r+0x1a>
 8005b7a:	f7fe f8df 	bl	8003d3c <__sinit>
 8005b7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b80:	07db      	lsls	r3, r3, #31
 8005b82:	d405      	bmi.n	8005b90 <_vfiprintf_r+0x2c>
 8005b84:	89bb      	ldrh	r3, [r7, #12]
 8005b86:	059e      	lsls	r6, r3, #22
 8005b88:	d402      	bmi.n	8005b90 <_vfiprintf_r+0x2c>
 8005b8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005b8c:	f7fe f9dc 	bl	8003f48 <__retarget_lock_acquire_recursive>
 8005b90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b94:	0498      	lsls	r0, r3, #18
 8005b96:	d406      	bmi.n	8005ba6 <_vfiprintf_r+0x42>
 8005b98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005b9c:	81bb      	strh	r3, [r7, #12]
 8005b9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ba0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ba4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ba6:	89bb      	ldrh	r3, [r7, #12]
 8005ba8:	0719      	lsls	r1, r3, #28
 8005baa:	d501      	bpl.n	8005bb0 <_vfiprintf_r+0x4c>
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	b9ab      	cbnz	r3, 8005bdc <_vfiprintf_r+0x78>
 8005bb0:	9800      	ldr	r0, [sp, #0]
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f000 feee 	bl	8006994 <__swsetup_r>
 8005bb8:	b180      	cbz	r0, 8005bdc <_vfiprintf_r+0x78>
 8005bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bbc:	07da      	lsls	r2, r3, #31
 8005bbe:	d506      	bpl.n	8005bce <_vfiprintf_r+0x6a>
 8005bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc4:	9303      	str	r3, [sp, #12]
 8005bc6:	9803      	ldr	r0, [sp, #12]
 8005bc8:	b03b      	add	sp, #236	@ 0xec
 8005bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bce:	89bb      	ldrh	r3, [r7, #12]
 8005bd0:	059b      	lsls	r3, r3, #22
 8005bd2:	d4f5      	bmi.n	8005bc0 <_vfiprintf_r+0x5c>
 8005bd4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005bd6:	f7fe f9b8 	bl	8003f4a <__retarget_lock_release_recursive>
 8005bda:	e7f1      	b.n	8005bc0 <_vfiprintf_r+0x5c>
 8005bdc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005be0:	f003 021a 	and.w	r2, r3, #26
 8005be4:	2a0a      	cmp	r2, #10
 8005be6:	d114      	bne.n	8005c12 <_vfiprintf_r+0xae>
 8005be8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	db10      	blt.n	8005c12 <_vfiprintf_r+0xae>
 8005bf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005bf2:	07d6      	lsls	r6, r2, #31
 8005bf4:	d404      	bmi.n	8005c00 <_vfiprintf_r+0x9c>
 8005bf6:	059d      	lsls	r5, r3, #22
 8005bf8:	d402      	bmi.n	8005c00 <_vfiprintf_r+0x9c>
 8005bfa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005bfc:	f7fe f9a5 	bl	8003f4a <__retarget_lock_release_recursive>
 8005c00:	9800      	ldr	r0, [sp, #0]
 8005c02:	4623      	mov	r3, r4
 8005c04:	465a      	mov	r2, fp
 8005c06:	4639      	mov	r1, r7
 8005c08:	b03b      	add	sp, #236	@ 0xec
 8005c0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0e:	f000 bc31 	b.w	8006474 <__sbprintf>
 8005c12:	2300      	movs	r3, #0
 8005c14:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8005c18:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005c1c:	ae11      	add	r6, sp, #68	@ 0x44
 8005c1e:	960e      	str	r6, [sp, #56]	@ 0x38
 8005c20:	9307      	str	r3, [sp, #28]
 8005c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c24:	9303      	str	r3, [sp, #12]
 8005c26:	465b      	mov	r3, fp
 8005c28:	461c      	mov	r4, r3
 8005c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c2e:	b10a      	cbz	r2, 8005c34 <_vfiprintf_r+0xd0>
 8005c30:	2a25      	cmp	r2, #37	@ 0x25
 8005c32:	d1f9      	bne.n	8005c28 <_vfiprintf_r+0xc4>
 8005c34:	ebb4 080b 	subs.w	r8, r4, fp
 8005c38:	d00d      	beq.n	8005c56 <_vfiprintf_r+0xf2>
 8005c3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c3c:	4443      	add	r3, r8
 8005c3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c42:	3301      	adds	r3, #1
 8005c44:	2b07      	cmp	r3, #7
 8005c46:	e9c6 b800 	strd	fp, r8, [r6]
 8005c4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c4c:	dc75      	bgt.n	8005d3a <_vfiprintf_r+0x1d6>
 8005c4e:	3608      	adds	r6, #8
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	4443      	add	r3, r8
 8005c54:	9303      	str	r3, [sp, #12]
 8005c56:	7823      	ldrb	r3, [r4, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 83cd 	beq.w	80063f8 <_vfiprintf_r+0x894>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295
 8005c64:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005c68:	3401      	adds	r4, #1
 8005c6a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8005c6e:	469a      	mov	sl, r3
 8005c70:	46a3      	mov	fp, r4
 8005c72:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8005c76:	f1a3 0220 	sub.w	r2, r3, #32
 8005c7a:	2a5a      	cmp	r2, #90	@ 0x5a
 8005c7c:	f200 8316 	bhi.w	80062ac <_vfiprintf_r+0x748>
 8005c80:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005c84:	0314009a 	.word	0x0314009a
 8005c88:	00a20314 	.word	0x00a20314
 8005c8c:	03140314 	.word	0x03140314
 8005c90:	00820314 	.word	0x00820314
 8005c94:	03140314 	.word	0x03140314
 8005c98:	00af00a5 	.word	0x00af00a5
 8005c9c:	00ac0314 	.word	0x00ac0314
 8005ca0:	031400b1 	.word	0x031400b1
 8005ca4:	00d000cd 	.word	0x00d000cd
 8005ca8:	00d000d0 	.word	0x00d000d0
 8005cac:	00d000d0 	.word	0x00d000d0
 8005cb0:	00d000d0 	.word	0x00d000d0
 8005cb4:	00d000d0 	.word	0x00d000d0
 8005cb8:	03140314 	.word	0x03140314
 8005cbc:	03140314 	.word	0x03140314
 8005cc0:	03140314 	.word	0x03140314
 8005cc4:	03140314 	.word	0x03140314
 8005cc8:	00f70314 	.word	0x00f70314
 8005ccc:	03140104 	.word	0x03140104
 8005cd0:	03140314 	.word	0x03140314
 8005cd4:	03140314 	.word	0x03140314
 8005cd8:	03140314 	.word	0x03140314
 8005cdc:	03140314 	.word	0x03140314
 8005ce0:	01520314 	.word	0x01520314
 8005ce4:	03140314 	.word	0x03140314
 8005ce8:	019a0314 	.word	0x019a0314
 8005cec:	027a0314 	.word	0x027a0314
 8005cf0:	03140314 	.word	0x03140314
 8005cf4:	0314029a 	.word	0x0314029a
 8005cf8:	03140314 	.word	0x03140314
 8005cfc:	03140314 	.word	0x03140314
 8005d00:	03140314 	.word	0x03140314
 8005d04:	03140314 	.word	0x03140314
 8005d08:	00f70314 	.word	0x00f70314
 8005d0c:	03140106 	.word	0x03140106
 8005d10:	03140314 	.word	0x03140314
 8005d14:	010600e0 	.word	0x010600e0
 8005d18:	031400f1 	.word	0x031400f1
 8005d1c:	031400eb 	.word	0x031400eb
 8005d20:	01540132 	.word	0x01540132
 8005d24:	00f10189 	.word	0x00f10189
 8005d28:	019a0314 	.word	0x019a0314
 8005d2c:	027c0098 	.word	0x027c0098
 8005d30:	03140314 	.word	0x03140314
 8005d34:	03140065 	.word	0x03140065
 8005d38:	0098      	.short	0x0098
 8005d3a:	9800      	ldr	r0, [sp, #0]
 8005d3c:	aa0e      	add	r2, sp, #56	@ 0x38
 8005d3e:	4639      	mov	r1, r7
 8005d40:	f7ff fede 	bl	8005b00 <__sprint_r>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	f040 8336 	bne.w	80063b6 <_vfiprintf_r+0x852>
 8005d4a:	ae11      	add	r6, sp, #68	@ 0x44
 8005d4c:	e780      	b.n	8005c50 <_vfiprintf_r+0xec>
 8005d4e:	4a99      	ldr	r2, [pc, #612]	@ (8005fb4 <_vfiprintf_r+0x450>)
 8005d50:	9205      	str	r2, [sp, #20]
 8005d52:	f01a 0220 	ands.w	r2, sl, #32
 8005d56:	f000 8231 	beq.w	80061bc <_vfiprintf_r+0x658>
 8005d5a:	3507      	adds	r5, #7
 8005d5c:	f025 0507 	bic.w	r5, r5, #7
 8005d60:	46a8      	mov	r8, r5
 8005d62:	686d      	ldr	r5, [r5, #4]
 8005d64:	f858 4b08 	ldr.w	r4, [r8], #8
 8005d68:	f01a 0f01 	tst.w	sl, #1
 8005d6c:	d009      	beq.n	8005d82 <_vfiprintf_r+0x21e>
 8005d6e:	ea54 0205 	orrs.w	r2, r4, r5
 8005d72:	bf1f      	itttt	ne
 8005d74:	2230      	movne	r2, #48	@ 0x30
 8005d76:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8005d7a:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8005d7e:	f04a 0a02 	orrne.w	sl, sl, #2
 8005d82:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8005d86:	e112      	b.n	8005fae <_vfiprintf_r+0x44a>
 8005d88:	9800      	ldr	r0, [sp, #0]
 8005d8a:	f000 fef7 	bl	8006b7c <_localeconv_r>
 8005d8e:	6843      	ldr	r3, [r0, #4]
 8005d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fa fa7c 	bl	8000290 <strlen>
 8005d98:	9007      	str	r0, [sp, #28]
 8005d9a:	9800      	ldr	r0, [sp, #0]
 8005d9c:	f000 feee 	bl	8006b7c <_localeconv_r>
 8005da0:	6883      	ldr	r3, [r0, #8]
 8005da2:	9306      	str	r3, [sp, #24]
 8005da4:	9b07      	ldr	r3, [sp, #28]
 8005da6:	b12b      	cbz	r3, 8005db4 <_vfiprintf_r+0x250>
 8005da8:	9b06      	ldr	r3, [sp, #24]
 8005daa:	b11b      	cbz	r3, 8005db4 <_vfiprintf_r+0x250>
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b10b      	cbz	r3, 8005db4 <_vfiprintf_r+0x250>
 8005db0:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8005db4:	465c      	mov	r4, fp
 8005db6:	e75b      	b.n	8005c70 <_vfiprintf_r+0x10c>
 8005db8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f9      	bne.n	8005db4 <_vfiprintf_r+0x250>
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8005dc6:	e7f5      	b.n	8005db4 <_vfiprintf_r+0x250>
 8005dc8:	f04a 0a01 	orr.w	sl, sl, #1
 8005dcc:	e7f2      	b.n	8005db4 <_vfiprintf_r+0x250>
 8005dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd2:	9302      	str	r3, [sp, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	daed      	bge.n	8005db4 <_vfiprintf_r+0x250>
 8005dd8:	425b      	negs	r3, r3
 8005dda:	9302      	str	r3, [sp, #8]
 8005ddc:	f04a 0a04 	orr.w	sl, sl, #4
 8005de0:	e7e8      	b.n	8005db4 <_vfiprintf_r+0x250>
 8005de2:	232b      	movs	r3, #43	@ 0x2b
 8005de4:	e7ed      	b.n	8005dc2 <_vfiprintf_r+0x25e>
 8005de6:	465a      	mov	r2, fp
 8005de8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005dec:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dee:	d112      	bne.n	8005e16 <_vfiprintf_r+0x2b2>
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	4693      	mov	fp, r2
 8005dfc:	e7da      	b.n	8005db4 <_vfiprintf_r+0x250>
 8005dfe:	9b01      	ldr	r3, [sp, #4]
 8005e00:	fb00 1303 	mla	r3, r0, r3, r1
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005e0a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8005e0e:	2909      	cmp	r1, #9
 8005e10:	d9f5      	bls.n	8005dfe <_vfiprintf_r+0x29a>
 8005e12:	4693      	mov	fp, r2
 8005e14:	e72f      	b.n	8005c76 <_vfiprintf_r+0x112>
 8005e16:	2100      	movs	r1, #0
 8005e18:	9101      	str	r1, [sp, #4]
 8005e1a:	200a      	movs	r0, #10
 8005e1c:	e7f5      	b.n	8005e0a <_vfiprintf_r+0x2a6>
 8005e1e:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8005e22:	e7c7      	b.n	8005db4 <_vfiprintf_r+0x250>
 8005e24:	2100      	movs	r1, #0
 8005e26:	465a      	mov	r2, fp
 8005e28:	9102      	str	r1, [sp, #8]
 8005e2a:	200a      	movs	r0, #10
 8005e2c:	9902      	ldr	r1, [sp, #8]
 8005e2e:	3b30      	subs	r3, #48	@ 0x30
 8005e30:	fb00 3301 	mla	r3, r0, r1, r3
 8005e34:	9302      	str	r3, [sp, #8]
 8005e36:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005e3a:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8005e3e:	2909      	cmp	r1, #9
 8005e40:	d9f4      	bls.n	8005e2c <_vfiprintf_r+0x2c8>
 8005e42:	e7e6      	b.n	8005e12 <_vfiprintf_r+0x2ae>
 8005e44:	f89b 3000 	ldrb.w	r3, [fp]
 8005e48:	2b68      	cmp	r3, #104	@ 0x68
 8005e4a:	bf06      	itte	eq
 8005e4c:	f10b 0b01 	addeq.w	fp, fp, #1
 8005e50:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8005e54:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8005e58:	e7ac      	b.n	8005db4 <_vfiprintf_r+0x250>
 8005e5a:	f89b 3000 	ldrb.w	r3, [fp]
 8005e5e:	2b6c      	cmp	r3, #108	@ 0x6c
 8005e60:	d104      	bne.n	8005e6c <_vfiprintf_r+0x308>
 8005e62:	f10b 0b01 	add.w	fp, fp, #1
 8005e66:	f04a 0a20 	orr.w	sl, sl, #32
 8005e6a:	e7a3      	b.n	8005db4 <_vfiprintf_r+0x250>
 8005e6c:	f04a 0a10 	orr.w	sl, sl, #16
 8005e70:	e7a0      	b.n	8005db4 <_vfiprintf_r+0x250>
 8005e72:	46a8      	mov	r8, r5
 8005e74:	2400      	movs	r4, #0
 8005e76:	f858 3b04 	ldr.w	r3, [r8], #4
 8005e7a:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8005e7e:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8005e82:	2301      	movs	r3, #1
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8005e8a:	e0ab      	b.n	8005fe4 <_vfiprintf_r+0x480>
 8005e8c:	f04a 0a10 	orr.w	sl, sl, #16
 8005e90:	f01a 0f20 	tst.w	sl, #32
 8005e94:	d011      	beq.n	8005eba <_vfiprintf_r+0x356>
 8005e96:	3507      	adds	r5, #7
 8005e98:	f025 0507 	bic.w	r5, r5, #7
 8005e9c:	46a8      	mov	r8, r5
 8005e9e:	686d      	ldr	r5, [r5, #4]
 8005ea0:	f858 4b08 	ldr.w	r4, [r8], #8
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	da06      	bge.n	8005eb6 <_vfiprintf_r+0x352>
 8005ea8:	4264      	negs	r4, r4
 8005eaa:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8005eae:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8005eb2:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e048      	b.n	8005f4c <_vfiprintf_r+0x3e8>
 8005eba:	46a8      	mov	r8, r5
 8005ebc:	f01a 0f10 	tst.w	sl, #16
 8005ec0:	f858 5b04 	ldr.w	r5, [r8], #4
 8005ec4:	d002      	beq.n	8005ecc <_vfiprintf_r+0x368>
 8005ec6:	462c      	mov	r4, r5
 8005ec8:	17ed      	asrs	r5, r5, #31
 8005eca:	e7eb      	b.n	8005ea4 <_vfiprintf_r+0x340>
 8005ecc:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8005ed0:	d003      	beq.n	8005eda <_vfiprintf_r+0x376>
 8005ed2:	b22c      	sxth	r4, r5
 8005ed4:	f345 35c0 	sbfx	r5, r5, #15, #1
 8005ed8:	e7e4      	b.n	8005ea4 <_vfiprintf_r+0x340>
 8005eda:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8005ede:	d0f2      	beq.n	8005ec6 <_vfiprintf_r+0x362>
 8005ee0:	b26c      	sxtb	r4, r5
 8005ee2:	f345 15c0 	sbfx	r5, r5, #7, #1
 8005ee6:	e7dd      	b.n	8005ea4 <_vfiprintf_r+0x340>
 8005ee8:	f01a 0f20 	tst.w	sl, #32
 8005eec:	d007      	beq.n	8005efe <_vfiprintf_r+0x39a>
 8005eee:	9a03      	ldr	r2, [sp, #12]
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	9903      	ldr	r1, [sp, #12]
 8005ef4:	17d2      	asrs	r2, r2, #31
 8005ef6:	e9c3 1200 	strd	r1, r2, [r3]
 8005efa:	3504      	adds	r5, #4
 8005efc:	e693      	b.n	8005c26 <_vfiprintf_r+0xc2>
 8005efe:	f01a 0f10 	tst.w	sl, #16
 8005f02:	d003      	beq.n	8005f0c <_vfiprintf_r+0x3a8>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	9a03      	ldr	r2, [sp, #12]
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	e7f6      	b.n	8005efa <_vfiprintf_r+0x396>
 8005f0c:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8005f10:	d003      	beq.n	8005f1a <_vfiprintf_r+0x3b6>
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	9a03      	ldr	r2, [sp, #12]
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e7ef      	b.n	8005efa <_vfiprintf_r+0x396>
 8005f1a:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8005f1e:	d0f1      	beq.n	8005f04 <_vfiprintf_r+0x3a0>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	9a03      	ldr	r2, [sp, #12]
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	e7e8      	b.n	8005efa <_vfiprintf_r+0x396>
 8005f28:	f04a 0a10 	orr.w	sl, sl, #16
 8005f2c:	f01a 0320 	ands.w	r3, sl, #32
 8005f30:	d01f      	beq.n	8005f72 <_vfiprintf_r+0x40e>
 8005f32:	3507      	adds	r5, #7
 8005f34:	f025 0507 	bic.w	r5, r5, #7
 8005f38:	46a8      	mov	r8, r5
 8005f3a:	686d      	ldr	r5, [r5, #4]
 8005f3c:	f858 4b08 	ldr.w	r4, [r8], #8
 8005f40:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8005f44:	2300      	movs	r3, #0
 8005f46:	2200      	movs	r2, #0
 8005f48:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8005f4c:	9a01      	ldr	r2, [sp, #4]
 8005f4e:	3201      	adds	r2, #1
 8005f50:	f000 825f 	beq.w	8006412 <_vfiprintf_r+0x8ae>
 8005f54:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8005f58:	9204      	str	r2, [sp, #16]
 8005f5a:	ea54 0205 	orrs.w	r2, r4, r5
 8005f5e:	f040 825e 	bne.w	800641e <_vfiprintf_r+0x8ba>
 8005f62:	9a01      	ldr	r2, [sp, #4]
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	f000 8198 	beq.w	800629a <_vfiprintf_r+0x736>
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	f040 825a 	bne.w	8006424 <_vfiprintf_r+0x8c0>
 8005f70:	e13b      	b.n	80061ea <_vfiprintf_r+0x686>
 8005f72:	46a8      	mov	r8, r5
 8005f74:	f01a 0510 	ands.w	r5, sl, #16
 8005f78:	f858 4b04 	ldr.w	r4, [r8], #4
 8005f7c:	d001      	beq.n	8005f82 <_vfiprintf_r+0x41e>
 8005f7e:	461d      	mov	r5, r3
 8005f80:	e7de      	b.n	8005f40 <_vfiprintf_r+0x3dc>
 8005f82:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8005f86:	d001      	beq.n	8005f8c <_vfiprintf_r+0x428>
 8005f88:	b2a4      	uxth	r4, r4
 8005f8a:	e7d9      	b.n	8005f40 <_vfiprintf_r+0x3dc>
 8005f8c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8005f90:	d0d6      	beq.n	8005f40 <_vfiprintf_r+0x3dc>
 8005f92:	b2e4      	uxtb	r4, r4
 8005f94:	e7f3      	b.n	8005f7e <_vfiprintf_r+0x41a>
 8005f96:	46a8      	mov	r8, r5
 8005f98:	f647 0330 	movw	r3, #30768	@ 0x7830
 8005f9c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8005fa0:	f858 4b04 	ldr.w	r4, [r8], #4
 8005fa4:	4b03      	ldr	r3, [pc, #12]	@ (8005fb4 <_vfiprintf_r+0x450>)
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	2500      	movs	r5, #0
 8005faa:	f04a 0a02 	orr.w	sl, sl, #2
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e7c9      	b.n	8005f46 <_vfiprintf_r+0x3e2>
 8005fb2:	bf00      	nop
 8005fb4:	080086c4 	.word	0x080086c4
 8005fb8:	9b01      	ldr	r3, [sp, #4]
 8005fba:	46a8      	mov	r8, r5
 8005fbc:	1c5c      	adds	r4, r3, #1
 8005fbe:	f04f 0500 	mov.w	r5, #0
 8005fc2:	f858 9b04 	ldr.w	r9, [r8], #4
 8005fc6:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8005fca:	f000 80d0 	beq.w	800616e <_vfiprintf_r+0x60a>
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4648      	mov	r0, r9
 8005fd4:	f7fa f90c 	bl	80001f0 <memchr>
 8005fd8:	4604      	mov	r4, r0
 8005fda:	b118      	cbz	r0, 8005fe4 <_vfiprintf_r+0x480>
 8005fdc:	eba0 0309 	sub.w	r3, r0, r9
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	462c      	mov	r4, r5
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	42a3      	cmp	r3, r4
 8005fe8:	bfb8      	it	lt
 8005fea:	4623      	movlt	r3, r4
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005ff2:	b113      	cbz	r3, 8005ffa <_vfiprintf_r+0x496>
 8005ff4:	9b04      	ldr	r3, [sp, #16]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	9304      	str	r3, [sp, #16]
 8005ffa:	f01a 0302 	ands.w	r3, sl, #2
 8005ffe:	9308      	str	r3, [sp, #32]
 8006000:	bf1e      	ittt	ne
 8006002:	9b04      	ldrne	r3, [sp, #16]
 8006004:	3302      	addne	r3, #2
 8006006:	9304      	strne	r3, [sp, #16]
 8006008:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800600c:	930a      	str	r3, [sp, #40]	@ 0x28
 800600e:	d11f      	bne.n	8006050 <_vfiprintf_r+0x4ec>
 8006010:	9b02      	ldr	r3, [sp, #8]
 8006012:	9a04      	ldr	r2, [sp, #16]
 8006014:	1a9d      	subs	r5, r3, r2
 8006016:	2d00      	cmp	r5, #0
 8006018:	dd1a      	ble.n	8006050 <_vfiprintf_r+0x4ec>
 800601a:	4ba9      	ldr	r3, [pc, #676]	@ (80062c0 <_vfiprintf_r+0x75c>)
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8006022:	2d10      	cmp	r5, #16
 8006024:	f102 0201 	add.w	r2, r2, #1
 8006028:	f106 0008 	add.w	r0, r6, #8
 800602c:	f300 814e 	bgt.w	80062cc <_vfiprintf_r+0x768>
 8006030:	6075      	str	r5, [r6, #4]
 8006032:	2a07      	cmp	r2, #7
 8006034:	4465      	add	r5, ip
 8006036:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800603a:	f340 815a 	ble.w	80062f2 <_vfiprintf_r+0x78e>
 800603e:	9800      	ldr	r0, [sp, #0]
 8006040:	aa0e      	add	r2, sp, #56	@ 0x38
 8006042:	4639      	mov	r1, r7
 8006044:	f7ff fd5c 	bl	8005b00 <__sprint_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	f040 81b4 	bne.w	80063b6 <_vfiprintf_r+0x852>
 800604e:	ae11      	add	r6, sp, #68	@ 0x44
 8006050:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8006054:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8006058:	b161      	cbz	r1, 8006074 <_vfiprintf_r+0x510>
 800605a:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800605e:	3301      	adds	r3, #1
 8006060:	6031      	str	r1, [r6, #0]
 8006062:	2101      	movs	r1, #1
 8006064:	440a      	add	r2, r1
 8006066:	2b07      	cmp	r3, #7
 8006068:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800606c:	6071      	str	r1, [r6, #4]
 800606e:	f300 8142 	bgt.w	80062f6 <_vfiprintf_r+0x792>
 8006072:	3608      	adds	r6, #8
 8006074:	9908      	ldr	r1, [sp, #32]
 8006076:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800607a:	b159      	cbz	r1, 8006094 <_vfiprintf_r+0x530>
 800607c:	a90d      	add	r1, sp, #52	@ 0x34
 800607e:	3301      	adds	r3, #1
 8006080:	6031      	str	r1, [r6, #0]
 8006082:	2102      	movs	r1, #2
 8006084:	440a      	add	r2, r1
 8006086:	2b07      	cmp	r3, #7
 8006088:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800608c:	6071      	str	r1, [r6, #4]
 800608e:	f300 813b 	bgt.w	8006308 <_vfiprintf_r+0x7a4>
 8006092:	3608      	adds	r6, #8
 8006094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006096:	2b80      	cmp	r3, #128	@ 0x80
 8006098:	d11f      	bne.n	80060da <_vfiprintf_r+0x576>
 800609a:	9b02      	ldr	r3, [sp, #8]
 800609c:	9a04      	ldr	r2, [sp, #16]
 800609e:	1a9d      	subs	r5, r3, r2
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	dd1a      	ble.n	80060da <_vfiprintf_r+0x576>
 80060a4:	4b87      	ldr	r3, [pc, #540]	@ (80062c4 <_vfiprintf_r+0x760>)
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80060ac:	2d10      	cmp	r5, #16
 80060ae:	f102 0201 	add.w	r2, r2, #1
 80060b2:	f106 0008 	add.w	r0, r6, #8
 80060b6:	f300 8130 	bgt.w	800631a <_vfiprintf_r+0x7b6>
 80060ba:	6075      	str	r5, [r6, #4]
 80060bc:	2a07      	cmp	r2, #7
 80060be:	4465      	add	r5, ip
 80060c0:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 80060c4:	f340 813c 	ble.w	8006340 <_vfiprintf_r+0x7dc>
 80060c8:	9800      	ldr	r0, [sp, #0]
 80060ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80060cc:	4639      	mov	r1, r7
 80060ce:	f7ff fd17 	bl	8005b00 <__sprint_r>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	f040 816f 	bne.w	80063b6 <_vfiprintf_r+0x852>
 80060d8:	ae11      	add	r6, sp, #68	@ 0x44
 80060da:	9b01      	ldr	r3, [sp, #4]
 80060dc:	1ae4      	subs	r4, r4, r3
 80060de:	2c00      	cmp	r4, #0
 80060e0:	dd1a      	ble.n	8006118 <_vfiprintf_r+0x5b4>
 80060e2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80060e6:	4877      	ldr	r0, [pc, #476]	@ (80062c4 <_vfiprintf_r+0x760>)
 80060e8:	6030      	str	r0, [r6, #0]
 80060ea:	2c10      	cmp	r4, #16
 80060ec:	f103 0301 	add.w	r3, r3, #1
 80060f0:	f106 0108 	add.w	r1, r6, #8
 80060f4:	f300 8126 	bgt.w	8006344 <_vfiprintf_r+0x7e0>
 80060f8:	6074      	str	r4, [r6, #4]
 80060fa:	2b07      	cmp	r3, #7
 80060fc:	4414      	add	r4, r2
 80060fe:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8006102:	f340 8130 	ble.w	8006366 <_vfiprintf_r+0x802>
 8006106:	9800      	ldr	r0, [sp, #0]
 8006108:	aa0e      	add	r2, sp, #56	@ 0x38
 800610a:	4639      	mov	r1, r7
 800610c:	f7ff fcf8 	bl	8005b00 <__sprint_r>
 8006110:	2800      	cmp	r0, #0
 8006112:	f040 8150 	bne.w	80063b6 <_vfiprintf_r+0x852>
 8006116:	ae11      	add	r6, sp, #68	@ 0x44
 8006118:	9b01      	ldr	r3, [sp, #4]
 800611a:	9a01      	ldr	r2, [sp, #4]
 800611c:	6073      	str	r3, [r6, #4]
 800611e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006120:	f8c6 9000 	str.w	r9, [r6]
 8006124:	4413      	add	r3, r2
 8006126:	9310      	str	r3, [sp, #64]	@ 0x40
 8006128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800612a:	3301      	adds	r3, #1
 800612c:	2b07      	cmp	r3, #7
 800612e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006130:	f300 811b 	bgt.w	800636a <_vfiprintf_r+0x806>
 8006134:	f106 0308 	add.w	r3, r6, #8
 8006138:	f01a 0f04 	tst.w	sl, #4
 800613c:	f040 811d 	bne.w	800637a <_vfiprintf_r+0x816>
 8006140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006144:	9904      	ldr	r1, [sp, #16]
 8006146:	428a      	cmp	r2, r1
 8006148:	bfac      	ite	ge
 800614a:	189b      	addge	r3, r3, r2
 800614c:	185b      	addlt	r3, r3, r1
 800614e:	9303      	str	r3, [sp, #12]
 8006150:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006152:	b13b      	cbz	r3, 8006164 <_vfiprintf_r+0x600>
 8006154:	9800      	ldr	r0, [sp, #0]
 8006156:	aa0e      	add	r2, sp, #56	@ 0x38
 8006158:	4639      	mov	r1, r7
 800615a:	f7ff fcd1 	bl	8005b00 <__sprint_r>
 800615e:	2800      	cmp	r0, #0
 8006160:	f040 8129 	bne.w	80063b6 <_vfiprintf_r+0x852>
 8006164:	2300      	movs	r3, #0
 8006166:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006168:	4645      	mov	r5, r8
 800616a:	ae11      	add	r6, sp, #68	@ 0x44
 800616c:	e55b      	b.n	8005c26 <_vfiprintf_r+0xc2>
 800616e:	4648      	mov	r0, r9
 8006170:	f7fa f88e 	bl	8000290 <strlen>
 8006174:	9001      	str	r0, [sp, #4]
 8006176:	e734      	b.n	8005fe2 <_vfiprintf_r+0x47e>
 8006178:	f04a 0a10 	orr.w	sl, sl, #16
 800617c:	f01a 0320 	ands.w	r3, sl, #32
 8006180:	d008      	beq.n	8006194 <_vfiprintf_r+0x630>
 8006182:	3507      	adds	r5, #7
 8006184:	f025 0507 	bic.w	r5, r5, #7
 8006188:	46a8      	mov	r8, r5
 800618a:	686d      	ldr	r5, [r5, #4]
 800618c:	f858 4b08 	ldr.w	r4, [r8], #8
 8006190:	2301      	movs	r3, #1
 8006192:	e6d8      	b.n	8005f46 <_vfiprintf_r+0x3e2>
 8006194:	46a8      	mov	r8, r5
 8006196:	f01a 0510 	ands.w	r5, sl, #16
 800619a:	f858 4b04 	ldr.w	r4, [r8], #4
 800619e:	d001      	beq.n	80061a4 <_vfiprintf_r+0x640>
 80061a0:	461d      	mov	r5, r3
 80061a2:	e7f5      	b.n	8006190 <_vfiprintf_r+0x62c>
 80061a4:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80061a8:	d001      	beq.n	80061ae <_vfiprintf_r+0x64a>
 80061aa:	b2a4      	uxth	r4, r4
 80061ac:	e7f0      	b.n	8006190 <_vfiprintf_r+0x62c>
 80061ae:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80061b2:	d0ed      	beq.n	8006190 <_vfiprintf_r+0x62c>
 80061b4:	b2e4      	uxtb	r4, r4
 80061b6:	e7f3      	b.n	80061a0 <_vfiprintf_r+0x63c>
 80061b8:	4a43      	ldr	r2, [pc, #268]	@ (80062c8 <_vfiprintf_r+0x764>)
 80061ba:	e5c9      	b.n	8005d50 <_vfiprintf_r+0x1ec>
 80061bc:	46a8      	mov	r8, r5
 80061be:	f01a 0510 	ands.w	r5, sl, #16
 80061c2:	f858 4b04 	ldr.w	r4, [r8], #4
 80061c6:	d001      	beq.n	80061cc <_vfiprintf_r+0x668>
 80061c8:	4615      	mov	r5, r2
 80061ca:	e5cd      	b.n	8005d68 <_vfiprintf_r+0x204>
 80061cc:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 80061d0:	d001      	beq.n	80061d6 <_vfiprintf_r+0x672>
 80061d2:	b2a4      	uxth	r4, r4
 80061d4:	e5c8      	b.n	8005d68 <_vfiprintf_r+0x204>
 80061d6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80061da:	f43f adc5 	beq.w	8005d68 <_vfiprintf_r+0x204>
 80061de:	b2e4      	uxtb	r4, r4
 80061e0:	e7f2      	b.n	80061c8 <_vfiprintf_r+0x664>
 80061e2:	2c0a      	cmp	r4, #10
 80061e4:	f175 0300 	sbcs.w	r3, r5, #0
 80061e8:	d206      	bcs.n	80061f8 <_vfiprintf_r+0x694>
 80061ea:	3430      	adds	r4, #48	@ 0x30
 80061ec:	b2e4      	uxtb	r4, r4
 80061ee:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 80061f2:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 80061f6:	e131      	b.n	800645c <_vfiprintf_r+0x8f8>
 80061f8:	ab3a      	add	r3, sp, #232	@ 0xe8
 80061fa:	9308      	str	r3, [sp, #32]
 80061fc:	9b04      	ldr	r3, [sp, #16]
 80061fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006202:	f04f 0a00 	mov.w	sl, #0
 8006206:	930a      	str	r3, [sp, #40]	@ 0x28
 8006208:	220a      	movs	r2, #10
 800620a:	2300      	movs	r3, #0
 800620c:	4620      	mov	r0, r4
 800620e:	4629      	mov	r1, r5
 8006210:	f7fa fcda 	bl	8000bc8 <__aeabi_uldivmod>
 8006214:	460b      	mov	r3, r1
 8006216:	9908      	ldr	r1, [sp, #32]
 8006218:	900b      	str	r0, [sp, #44]	@ 0x2c
 800621a:	3230      	adds	r2, #48	@ 0x30
 800621c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8006220:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006222:	f101 39ff 	add.w	r9, r1, #4294967295
 8006226:	f10a 0a01 	add.w	sl, sl, #1
 800622a:	b1e2      	cbz	r2, 8006266 <_vfiprintf_r+0x702>
 800622c:	9a06      	ldr	r2, [sp, #24]
 800622e:	7812      	ldrb	r2, [r2, #0]
 8006230:	4552      	cmp	r2, sl
 8006232:	d118      	bne.n	8006266 <_vfiprintf_r+0x702>
 8006234:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8006238:	d015      	beq.n	8006266 <_vfiprintf_r+0x702>
 800623a:	2c0a      	cmp	r4, #10
 800623c:	f175 0200 	sbcs.w	r2, r5, #0
 8006240:	d311      	bcc.n	8006266 <_vfiprintf_r+0x702>
 8006242:	9308      	str	r3, [sp, #32]
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006248:	eba9 0903 	sub.w	r9, r9, r3
 800624c:	461a      	mov	r2, r3
 800624e:	4648      	mov	r0, r9
 8006250:	f000 fc7a 	bl	8006b48 <strncpy>
 8006254:	9b06      	ldr	r3, [sp, #24]
 8006256:	785a      	ldrb	r2, [r3, #1]
 8006258:	9b08      	ldr	r3, [sp, #32]
 800625a:	b172      	cbz	r2, 800627a <_vfiprintf_r+0x716>
 800625c:	9a06      	ldr	r2, [sp, #24]
 800625e:	3201      	adds	r2, #1
 8006260:	9206      	str	r2, [sp, #24]
 8006262:	f04f 0a00 	mov.w	sl, #0
 8006266:	2c0a      	cmp	r4, #10
 8006268:	f175 0500 	sbcs.w	r5, r5, #0
 800626c:	f0c0 80f6 	bcc.w	800645c <_vfiprintf_r+0x8f8>
 8006270:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006272:	f8cd 9020 	str.w	r9, [sp, #32]
 8006276:	461d      	mov	r5, r3
 8006278:	e7c6      	b.n	8006208 <_vfiprintf_r+0x6a4>
 800627a:	4692      	mov	sl, r2
 800627c:	e7f3      	b.n	8006266 <_vfiprintf_r+0x702>
 800627e:	f004 030f 	and.w	r3, r4, #15
 8006282:	9a05      	ldr	r2, [sp, #20]
 8006284:	0924      	lsrs	r4, r4, #4
 8006286:	5cd3      	ldrb	r3, [r2, r3]
 8006288:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800628c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8006290:	092d      	lsrs	r5, r5, #4
 8006292:	ea54 0305 	orrs.w	r3, r4, r5
 8006296:	d1f2      	bne.n	800627e <_vfiprintf_r+0x71a>
 8006298:	e0e0      	b.n	800645c <_vfiprintf_r+0x8f8>
 800629a:	b923      	cbnz	r3, 80062a6 <_vfiprintf_r+0x742>
 800629c:	f01a 0f01 	tst.w	sl, #1
 80062a0:	d001      	beq.n	80062a6 <_vfiprintf_r+0x742>
 80062a2:	2430      	movs	r4, #48	@ 0x30
 80062a4:	e7a3      	b.n	80061ee <_vfiprintf_r+0x68a>
 80062a6:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80062aa:	e0d7      	b.n	800645c <_vfiprintf_r+0x8f8>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80a3 	beq.w	80063f8 <_vfiprintf_r+0x894>
 80062b2:	2400      	movs	r4, #0
 80062b4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80062b8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80062bc:	46a8      	mov	r8, r5
 80062be:	e5e0      	b.n	8005e82 <_vfiprintf_r+0x31e>
 80062c0:	08008718 	.word	0x08008718
 80062c4:	08008708 	.word	0x08008708
 80062c8:	080086d5 	.word	0x080086d5
 80062cc:	2110      	movs	r1, #16
 80062ce:	6071      	str	r1, [r6, #4]
 80062d0:	2a07      	cmp	r2, #7
 80062d2:	4461      	add	r1, ip
 80062d4:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80062d8:	dd08      	ble.n	80062ec <_vfiprintf_r+0x788>
 80062da:	9800      	ldr	r0, [sp, #0]
 80062dc:	aa0e      	add	r2, sp, #56	@ 0x38
 80062de:	4639      	mov	r1, r7
 80062e0:	f7ff fc0e 	bl	8005b00 <__sprint_r>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d166      	bne.n	80063b6 <_vfiprintf_r+0x852>
 80062e8:	4b60      	ldr	r3, [pc, #384]	@ (800646c <_vfiprintf_r+0x908>)
 80062ea:	a811      	add	r0, sp, #68	@ 0x44
 80062ec:	3d10      	subs	r5, #16
 80062ee:	4606      	mov	r6, r0
 80062f0:	e694      	b.n	800601c <_vfiprintf_r+0x4b8>
 80062f2:	4606      	mov	r6, r0
 80062f4:	e6ac      	b.n	8006050 <_vfiprintf_r+0x4ec>
 80062f6:	9800      	ldr	r0, [sp, #0]
 80062f8:	aa0e      	add	r2, sp, #56	@ 0x38
 80062fa:	4639      	mov	r1, r7
 80062fc:	f7ff fc00 	bl	8005b00 <__sprint_r>
 8006300:	2800      	cmp	r0, #0
 8006302:	d158      	bne.n	80063b6 <_vfiprintf_r+0x852>
 8006304:	ae11      	add	r6, sp, #68	@ 0x44
 8006306:	e6b5      	b.n	8006074 <_vfiprintf_r+0x510>
 8006308:	9800      	ldr	r0, [sp, #0]
 800630a:	aa0e      	add	r2, sp, #56	@ 0x38
 800630c:	4639      	mov	r1, r7
 800630e:	f7ff fbf7 	bl	8005b00 <__sprint_r>
 8006312:	2800      	cmp	r0, #0
 8006314:	d14f      	bne.n	80063b6 <_vfiprintf_r+0x852>
 8006316:	ae11      	add	r6, sp, #68	@ 0x44
 8006318:	e6bc      	b.n	8006094 <_vfiprintf_r+0x530>
 800631a:	2110      	movs	r1, #16
 800631c:	6071      	str	r1, [r6, #4]
 800631e:	2a07      	cmp	r2, #7
 8006320:	4461      	add	r1, ip
 8006322:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8006326:	dd08      	ble.n	800633a <_vfiprintf_r+0x7d6>
 8006328:	9800      	ldr	r0, [sp, #0]
 800632a:	aa0e      	add	r2, sp, #56	@ 0x38
 800632c:	4639      	mov	r1, r7
 800632e:	f7ff fbe7 	bl	8005b00 <__sprint_r>
 8006332:	2800      	cmp	r0, #0
 8006334:	d13f      	bne.n	80063b6 <_vfiprintf_r+0x852>
 8006336:	4b4e      	ldr	r3, [pc, #312]	@ (8006470 <_vfiprintf_r+0x90c>)
 8006338:	a811      	add	r0, sp, #68	@ 0x44
 800633a:	3d10      	subs	r5, #16
 800633c:	4606      	mov	r6, r0
 800633e:	e6b2      	b.n	80060a6 <_vfiprintf_r+0x542>
 8006340:	4606      	mov	r6, r0
 8006342:	e6ca      	b.n	80060da <_vfiprintf_r+0x576>
 8006344:	2010      	movs	r0, #16
 8006346:	4402      	add	r2, r0
 8006348:	2b07      	cmp	r3, #7
 800634a:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800634e:	6070      	str	r0, [r6, #4]
 8006350:	dd06      	ble.n	8006360 <_vfiprintf_r+0x7fc>
 8006352:	9800      	ldr	r0, [sp, #0]
 8006354:	aa0e      	add	r2, sp, #56	@ 0x38
 8006356:	4639      	mov	r1, r7
 8006358:	f7ff fbd2 	bl	8005b00 <__sprint_r>
 800635c:	bb58      	cbnz	r0, 80063b6 <_vfiprintf_r+0x852>
 800635e:	a911      	add	r1, sp, #68	@ 0x44
 8006360:	3c10      	subs	r4, #16
 8006362:	460e      	mov	r6, r1
 8006364:	e6bd      	b.n	80060e2 <_vfiprintf_r+0x57e>
 8006366:	460e      	mov	r6, r1
 8006368:	e6d6      	b.n	8006118 <_vfiprintf_r+0x5b4>
 800636a:	9800      	ldr	r0, [sp, #0]
 800636c:	aa0e      	add	r2, sp, #56	@ 0x38
 800636e:	4639      	mov	r1, r7
 8006370:	f7ff fbc6 	bl	8005b00 <__sprint_r>
 8006374:	b9f8      	cbnz	r0, 80063b6 <_vfiprintf_r+0x852>
 8006376:	ab11      	add	r3, sp, #68	@ 0x44
 8006378:	e6de      	b.n	8006138 <_vfiprintf_r+0x5d4>
 800637a:	9a02      	ldr	r2, [sp, #8]
 800637c:	9904      	ldr	r1, [sp, #16]
 800637e:	1a54      	subs	r4, r2, r1
 8006380:	2c00      	cmp	r4, #0
 8006382:	f77f aedd 	ble.w	8006140 <_vfiprintf_r+0x5dc>
 8006386:	4d39      	ldr	r5, [pc, #228]	@ (800646c <_vfiprintf_r+0x908>)
 8006388:	2610      	movs	r6, #16
 800638a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800638e:	2c10      	cmp	r4, #16
 8006390:	f102 0201 	add.w	r2, r2, #1
 8006394:	601d      	str	r5, [r3, #0]
 8006396:	dc1d      	bgt.n	80063d4 <_vfiprintf_r+0x870>
 8006398:	605c      	str	r4, [r3, #4]
 800639a:	2a07      	cmp	r2, #7
 800639c:	440c      	add	r4, r1
 800639e:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80063a2:	f77f aecd 	ble.w	8006140 <_vfiprintf_r+0x5dc>
 80063a6:	9800      	ldr	r0, [sp, #0]
 80063a8:	aa0e      	add	r2, sp, #56	@ 0x38
 80063aa:	4639      	mov	r1, r7
 80063ac:	f7ff fba8 	bl	8005b00 <__sprint_r>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f43f aec5 	beq.w	8006140 <_vfiprintf_r+0x5dc>
 80063b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063b8:	07d9      	lsls	r1, r3, #31
 80063ba:	d405      	bmi.n	80063c8 <_vfiprintf_r+0x864>
 80063bc:	89bb      	ldrh	r3, [r7, #12]
 80063be:	059a      	lsls	r2, r3, #22
 80063c0:	d402      	bmi.n	80063c8 <_vfiprintf_r+0x864>
 80063c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80063c4:	f7fd fdc1 	bl	8003f4a <__retarget_lock_release_recursive>
 80063c8:	89bb      	ldrh	r3, [r7, #12]
 80063ca:	065b      	lsls	r3, r3, #25
 80063cc:	f57f abfb 	bpl.w	8005bc6 <_vfiprintf_r+0x62>
 80063d0:	f7ff bbf6 	b.w	8005bc0 <_vfiprintf_r+0x5c>
 80063d4:	3110      	adds	r1, #16
 80063d6:	2a07      	cmp	r2, #7
 80063d8:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 80063dc:	605e      	str	r6, [r3, #4]
 80063de:	dc02      	bgt.n	80063e6 <_vfiprintf_r+0x882>
 80063e0:	3308      	adds	r3, #8
 80063e2:	3c10      	subs	r4, #16
 80063e4:	e7d1      	b.n	800638a <_vfiprintf_r+0x826>
 80063e6:	9800      	ldr	r0, [sp, #0]
 80063e8:	aa0e      	add	r2, sp, #56	@ 0x38
 80063ea:	4639      	mov	r1, r7
 80063ec:	f7ff fb88 	bl	8005b00 <__sprint_r>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d1e0      	bne.n	80063b6 <_vfiprintf_r+0x852>
 80063f4:	ab11      	add	r3, sp, #68	@ 0x44
 80063f6:	e7f4      	b.n	80063e2 <_vfiprintf_r+0x87e>
 80063f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063fa:	b913      	cbnz	r3, 8006402 <_vfiprintf_r+0x89e>
 80063fc:	2300      	movs	r3, #0
 80063fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006400:	e7d9      	b.n	80063b6 <_vfiprintf_r+0x852>
 8006402:	9800      	ldr	r0, [sp, #0]
 8006404:	aa0e      	add	r2, sp, #56	@ 0x38
 8006406:	4639      	mov	r1, r7
 8006408:	f7ff fb7a 	bl	8005b00 <__sprint_r>
 800640c:	2800      	cmp	r0, #0
 800640e:	d0f5      	beq.n	80063fc <_vfiprintf_r+0x898>
 8006410:	e7d1      	b.n	80063b6 <_vfiprintf_r+0x852>
 8006412:	ea54 0205 	orrs.w	r2, r4, r5
 8006416:	f8cd a010 	str.w	sl, [sp, #16]
 800641a:	f43f ada6 	beq.w	8005f6a <_vfiprintf_r+0x406>
 800641e:	2b01      	cmp	r3, #1
 8006420:	f43f aedf 	beq.w	80061e2 <_vfiprintf_r+0x67e>
 8006424:	2b02      	cmp	r3, #2
 8006426:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800642a:	f43f af28 	beq.w	800627e <_vfiprintf_r+0x71a>
 800642e:	f004 0307 	and.w	r3, r4, #7
 8006432:	08e4      	lsrs	r4, r4, #3
 8006434:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8006438:	08ed      	lsrs	r5, r5, #3
 800643a:	3330      	adds	r3, #48	@ 0x30
 800643c:	ea54 0105 	orrs.w	r1, r4, r5
 8006440:	464a      	mov	r2, r9
 8006442:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8006446:	d1f2      	bne.n	800642e <_vfiprintf_r+0x8ca>
 8006448:	9904      	ldr	r1, [sp, #16]
 800644a:	07c8      	lsls	r0, r1, #31
 800644c:	d506      	bpl.n	800645c <_vfiprintf_r+0x8f8>
 800644e:	2b30      	cmp	r3, #48	@ 0x30
 8006450:	d004      	beq.n	800645c <_vfiprintf_r+0x8f8>
 8006452:	2330      	movs	r3, #48	@ 0x30
 8006454:	f809 3c01 	strb.w	r3, [r9, #-1]
 8006458:	f1a2 0902 	sub.w	r9, r2, #2
 800645c:	ab3a      	add	r3, sp, #232	@ 0xe8
 800645e:	eba3 0309 	sub.w	r3, r3, r9
 8006462:	9c01      	ldr	r4, [sp, #4]
 8006464:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	e5bb      	b.n	8005fe4 <_vfiprintf_r+0x480>
 800646c:	08008718 	.word	0x08008718
 8006470:	08008708 	.word	0x08008708

08006474 <__sbprintf>:
 8006474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006476:	461f      	mov	r7, r3
 8006478:	898b      	ldrh	r3, [r1, #12]
 800647a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800647e:	f023 0302 	bic.w	r3, r3, #2
 8006482:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006486:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8006488:	9319      	str	r3, [sp, #100]	@ 0x64
 800648a:	89cb      	ldrh	r3, [r1, #14]
 800648c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006490:	69cb      	ldr	r3, [r1, #28]
 8006492:	9307      	str	r3, [sp, #28]
 8006494:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8006496:	9309      	str	r3, [sp, #36]	@ 0x24
 8006498:	ab1a      	add	r3, sp, #104	@ 0x68
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	9304      	str	r3, [sp, #16]
 800649e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064a2:	4615      	mov	r5, r2
 80064a4:	4606      	mov	r6, r0
 80064a6:	9302      	str	r3, [sp, #8]
 80064a8:	9305      	str	r3, [sp, #20]
 80064aa:	a816      	add	r0, sp, #88	@ 0x58
 80064ac:	2300      	movs	r3, #0
 80064ae:	460c      	mov	r4, r1
 80064b0:	9306      	str	r3, [sp, #24]
 80064b2:	f7fd fd47 	bl	8003f44 <__retarget_lock_init_recursive>
 80064b6:	462a      	mov	r2, r5
 80064b8:	463b      	mov	r3, r7
 80064ba:	4669      	mov	r1, sp
 80064bc:	4630      	mov	r0, r6
 80064be:	f7ff fb51 	bl	8005b64 <_vfiprintf_r>
 80064c2:	1e05      	subs	r5, r0, #0
 80064c4:	db07      	blt.n	80064d6 <__sbprintf+0x62>
 80064c6:	4669      	mov	r1, sp
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f8f1 	bl	80066b0 <_fflush_r>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	bf18      	it	ne
 80064d2:	f04f 35ff 	movne.w	r5, #4294967295
 80064d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80064da:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80064dc:	065b      	lsls	r3, r3, #25
 80064de:	bf42      	ittt	mi
 80064e0:	89a3      	ldrhmi	r3, [r4, #12]
 80064e2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 80064e6:	81a3      	strhmi	r3, [r4, #12]
 80064e8:	f7fd fd2d 	bl	8003f46 <__retarget_lock_close_recursive>
 80064ec:	4628      	mov	r0, r5
 80064ee:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 80064f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064f4 <_fclose_r>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4605      	mov	r5, r0
 80064f8:	460c      	mov	r4, r1
 80064fa:	b1b1      	cbz	r1, 800652a <_fclose_r+0x36>
 80064fc:	b118      	cbz	r0, 8006506 <_fclose_r+0x12>
 80064fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006500:	b90b      	cbnz	r3, 8006506 <_fclose_r+0x12>
 8006502:	f7fd fc1b 	bl	8003d3c <__sinit>
 8006506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006508:	07de      	lsls	r6, r3, #31
 800650a:	d405      	bmi.n	8006518 <_fclose_r+0x24>
 800650c:	89a3      	ldrh	r3, [r4, #12]
 800650e:	0598      	lsls	r0, r3, #22
 8006510:	d402      	bmi.n	8006518 <_fclose_r+0x24>
 8006512:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006514:	f7fd fd18 	bl	8003f48 <__retarget_lock_acquire_recursive>
 8006518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651c:	b943      	cbnz	r3, 8006530 <_fclose_r+0x3c>
 800651e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006520:	07d9      	lsls	r1, r3, #31
 8006522:	d402      	bmi.n	800652a <_fclose_r+0x36>
 8006524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006526:	f7fd fd10 	bl	8003f4a <__retarget_lock_release_recursive>
 800652a:	2600      	movs	r6, #0
 800652c:	4630      	mov	r0, r6
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	4621      	mov	r1, r4
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f834 	bl	80065a0 <__sflush_r>
 8006538:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800653a:	4606      	mov	r6, r0
 800653c:	b133      	cbz	r3, 800654c <_fclose_r+0x58>
 800653e:	69e1      	ldr	r1, [r4, #28]
 8006540:	4628      	mov	r0, r5
 8006542:	4798      	blx	r3
 8006544:	2800      	cmp	r0, #0
 8006546:	bfb8      	it	lt
 8006548:	f04f 36ff 	movlt.w	r6, #4294967295
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	061a      	lsls	r2, r3, #24
 8006550:	d503      	bpl.n	800655a <_fclose_r+0x66>
 8006552:	6921      	ldr	r1, [r4, #16]
 8006554:	4628      	mov	r0, r5
 8006556:	f7fd fd5f 	bl	8004018 <_free_r>
 800655a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800655c:	b141      	cbz	r1, 8006570 <_fclose_r+0x7c>
 800655e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8006562:	4299      	cmp	r1, r3
 8006564:	d002      	beq.n	800656c <_fclose_r+0x78>
 8006566:	4628      	mov	r0, r5
 8006568:	f7fd fd56 	bl	8004018 <_free_r>
 800656c:	2300      	movs	r3, #0
 800656e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006570:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006572:	b121      	cbz	r1, 800657e <_fclose_r+0x8a>
 8006574:	4628      	mov	r0, r5
 8006576:	f7fd fd4f 	bl	8004018 <_free_r>
 800657a:	2300      	movs	r3, #0
 800657c:	6463      	str	r3, [r4, #68]	@ 0x44
 800657e:	f7fd fbd1 	bl	8003d24 <__sfp_lock_acquire>
 8006582:	2300      	movs	r3, #0
 8006584:	81a3      	strh	r3, [r4, #12]
 8006586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006588:	07db      	lsls	r3, r3, #31
 800658a:	d402      	bmi.n	8006592 <_fclose_r+0x9e>
 800658c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800658e:	f7fd fcdc 	bl	8003f4a <__retarget_lock_release_recursive>
 8006592:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006594:	f7fd fcd7 	bl	8003f46 <__retarget_lock_close_recursive>
 8006598:	f7fd fbca 	bl	8003d30 <__sfp_lock_release>
 800659c:	e7c6      	b.n	800652c <_fclose_r+0x38>
	...

080065a0 <__sflush_r>:
 80065a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a4:	4605      	mov	r5, r0
 80065a6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80065aa:	0706      	lsls	r6, r0, #28
 80065ac:	460c      	mov	r4, r1
 80065ae:	d457      	bmi.n	8006660 <__sflush_r+0xc0>
 80065b0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 80065b4:	818b      	strh	r3, [r1, #12]
 80065b6:	684b      	ldr	r3, [r1, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	dc02      	bgt.n	80065c2 <__sflush_r+0x22>
 80065bc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd4c      	ble.n	800665c <__sflush_r+0xbc>
 80065c2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065c4:	2e00      	cmp	r6, #0
 80065c6:	d049      	beq.n	800665c <__sflush_r+0xbc>
 80065c8:	2300      	movs	r3, #0
 80065ca:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 80065ce:	682f      	ldr	r7, [r5, #0]
 80065d0:	69e1      	ldr	r1, [r4, #28]
 80065d2:	602b      	str	r3, [r5, #0]
 80065d4:	d034      	beq.n	8006640 <__sflush_r+0xa0>
 80065d6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	0759      	lsls	r1, r3, #29
 80065dc:	d505      	bpl.n	80065ea <__sflush_r+0x4a>
 80065de:	6863      	ldr	r3, [r4, #4]
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80065e4:	b10b      	cbz	r3, 80065ea <__sflush_r+0x4a>
 80065e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80065e8:	1ad2      	subs	r2, r2, r3
 80065ea:	2300      	movs	r3, #0
 80065ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065ee:	69e1      	ldr	r1, [r4, #28]
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b0      	blx	r6
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d106      	bne.n	8006606 <__sflush_r+0x66>
 80065f8:	682a      	ldr	r2, [r5, #0]
 80065fa:	2a1d      	cmp	r2, #29
 80065fc:	d848      	bhi.n	8006690 <__sflush_r+0xf0>
 80065fe:	4b2b      	ldr	r3, [pc, #172]	@ (80066ac <__sflush_r+0x10c>)
 8006600:	4113      	asrs	r3, r2
 8006602:	07de      	lsls	r6, r3, #31
 8006604:	d444      	bmi.n	8006690 <__sflush_r+0xf0>
 8006606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800660a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800660e:	81a2      	strh	r2, [r4, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	6062      	str	r2, [r4, #4]
 8006614:	04d9      	lsls	r1, r3, #19
 8006616:	6922      	ldr	r2, [r4, #16]
 8006618:	6022      	str	r2, [r4, #0]
 800661a:	d504      	bpl.n	8006626 <__sflush_r+0x86>
 800661c:	1c42      	adds	r2, r0, #1
 800661e:	d101      	bne.n	8006624 <__sflush_r+0x84>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	b903      	cbnz	r3, 8006626 <__sflush_r+0x86>
 8006624:	6520      	str	r0, [r4, #80]	@ 0x50
 8006626:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006628:	602f      	str	r7, [r5, #0]
 800662a:	b1b9      	cbz	r1, 800665c <__sflush_r+0xbc>
 800662c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8006630:	4299      	cmp	r1, r3
 8006632:	d002      	beq.n	800663a <__sflush_r+0x9a>
 8006634:	4628      	mov	r0, r5
 8006636:	f7fd fcef 	bl	8004018 <_free_r>
 800663a:	2300      	movs	r3, #0
 800663c:	6323      	str	r3, [r4, #48]	@ 0x30
 800663e:	e00d      	b.n	800665c <__sflush_r+0xbc>
 8006640:	2301      	movs	r3, #1
 8006642:	4628      	mov	r0, r5
 8006644:	47b0      	blx	r6
 8006646:	4602      	mov	r2, r0
 8006648:	1c50      	adds	r0, r2, #1
 800664a:	d1c5      	bne.n	80065d8 <__sflush_r+0x38>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0c2      	beq.n	80065d8 <__sflush_r+0x38>
 8006652:	2b1d      	cmp	r3, #29
 8006654:	d001      	beq.n	800665a <__sflush_r+0xba>
 8006656:	2b16      	cmp	r3, #22
 8006658:	d11a      	bne.n	8006690 <__sflush_r+0xf0>
 800665a:	602f      	str	r7, [r5, #0]
 800665c:	2000      	movs	r0, #0
 800665e:	e01e      	b.n	800669e <__sflush_r+0xfe>
 8006660:	690f      	ldr	r7, [r1, #16]
 8006662:	2f00      	cmp	r7, #0
 8006664:	d0fa      	beq.n	800665c <__sflush_r+0xbc>
 8006666:	0783      	lsls	r3, r0, #30
 8006668:	680e      	ldr	r6, [r1, #0]
 800666a:	bf08      	it	eq
 800666c:	694b      	ldreq	r3, [r1, #20]
 800666e:	600f      	str	r7, [r1, #0]
 8006670:	bf18      	it	ne
 8006672:	2300      	movne	r3, #0
 8006674:	eba6 0807 	sub.w	r8, r6, r7
 8006678:	608b      	str	r3, [r1, #8]
 800667a:	f1b8 0f00 	cmp.w	r8, #0
 800667e:	dded      	ble.n	800665c <__sflush_r+0xbc>
 8006680:	69e1      	ldr	r1, [r4, #28]
 8006682:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8006684:	4643      	mov	r3, r8
 8006686:	463a      	mov	r2, r7
 8006688:	4628      	mov	r0, r5
 800668a:	47b0      	blx	r6
 800668c:	2800      	cmp	r0, #0
 800668e:	dc08      	bgt.n	80066a2 <__sflush_r+0x102>
 8006690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	f04f 30ff 	mov.w	r0, #4294967295
 800669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a2:	4407      	add	r7, r0
 80066a4:	eba8 0800 	sub.w	r8, r8, r0
 80066a8:	e7e7      	b.n	800667a <__sflush_r+0xda>
 80066aa:	bf00      	nop
 80066ac:	dfbffffe 	.word	0xdfbffffe

080066b0 <_fflush_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	460c      	mov	r4, r1
 80066b4:	4605      	mov	r5, r0
 80066b6:	b118      	cbz	r0, 80066c0 <_fflush_r+0x10>
 80066b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80066ba:	b90b      	cbnz	r3, 80066c0 <_fflush_r+0x10>
 80066bc:	f7fd fb3e 	bl	8003d3c <__sinit>
 80066c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80066c4:	b1b8      	cbz	r0, 80066f6 <_fflush_r+0x46>
 80066c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066c8:	07db      	lsls	r3, r3, #31
 80066ca:	d404      	bmi.n	80066d6 <_fflush_r+0x26>
 80066cc:	0581      	lsls	r1, r0, #22
 80066ce:	d402      	bmi.n	80066d6 <_fflush_r+0x26>
 80066d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066d2:	f7fd fc39 	bl	8003f48 <__retarget_lock_acquire_recursive>
 80066d6:	4628      	mov	r0, r5
 80066d8:	4621      	mov	r1, r4
 80066da:	f7ff ff61 	bl	80065a0 <__sflush_r>
 80066de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066e0:	07da      	lsls	r2, r3, #31
 80066e2:	4605      	mov	r5, r0
 80066e4:	d405      	bmi.n	80066f2 <_fflush_r+0x42>
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	059b      	lsls	r3, r3, #22
 80066ea:	d402      	bmi.n	80066f2 <_fflush_r+0x42>
 80066ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066ee:	f7fd fc2c 	bl	8003f4a <__retarget_lock_release_recursive>
 80066f2:	4628      	mov	r0, r5
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	4605      	mov	r5, r0
 80066f8:	e7fb      	b.n	80066f2 <_fflush_r+0x42>
	...

080066fc <__sfvwrite_r>:
 80066fc:	6893      	ldr	r3, [r2, #8]
 80066fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006702:	4606      	mov	r6, r0
 8006704:	460c      	mov	r4, r1
 8006706:	4691      	mov	r9, r2
 8006708:	b91b      	cbnz	r3, 8006712 <__sfvwrite_r+0x16>
 800670a:	2000      	movs	r0, #0
 800670c:	b003      	add	sp, #12
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	898b      	ldrh	r3, [r1, #12]
 8006714:	0718      	lsls	r0, r3, #28
 8006716:	d550      	bpl.n	80067ba <__sfvwrite_r+0xbe>
 8006718:	690b      	ldr	r3, [r1, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d04d      	beq.n	80067ba <__sfvwrite_r+0xbe>
 800671e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006722:	f8d9 8000 	ldr.w	r8, [r9]
 8006726:	f013 0702 	ands.w	r7, r3, #2
 800672a:	d16b      	bne.n	8006804 <__sfvwrite_r+0x108>
 800672c:	f013 0301 	ands.w	r3, r3, #1
 8006730:	f000 809c 	beq.w	800686c <__sfvwrite_r+0x170>
 8006734:	4638      	mov	r0, r7
 8006736:	46ba      	mov	sl, r7
 8006738:	46bb      	mov	fp, r7
 800673a:	f1bb 0f00 	cmp.w	fp, #0
 800673e:	f000 8103 	beq.w	8006948 <__sfvwrite_r+0x24c>
 8006742:	b950      	cbnz	r0, 800675a <__sfvwrite_r+0x5e>
 8006744:	465a      	mov	r2, fp
 8006746:	210a      	movs	r1, #10
 8006748:	4650      	mov	r0, sl
 800674a:	f7f9 fd51 	bl	80001f0 <memchr>
 800674e:	2800      	cmp	r0, #0
 8006750:	f000 8100 	beq.w	8006954 <__sfvwrite_r+0x258>
 8006754:	3001      	adds	r0, #1
 8006756:	eba0 070a 	sub.w	r7, r0, sl
 800675a:	6820      	ldr	r0, [r4, #0]
 800675c:	6921      	ldr	r1, [r4, #16]
 800675e:	68a5      	ldr	r5, [r4, #8]
 8006760:	6963      	ldr	r3, [r4, #20]
 8006762:	455f      	cmp	r7, fp
 8006764:	463a      	mov	r2, r7
 8006766:	bf28      	it	cs
 8006768:	465a      	movcs	r2, fp
 800676a:	4288      	cmp	r0, r1
 800676c:	f240 80f5 	bls.w	800695a <__sfvwrite_r+0x25e>
 8006770:	441d      	add	r5, r3
 8006772:	42aa      	cmp	r2, r5
 8006774:	f340 80f1 	ble.w	800695a <__sfvwrite_r+0x25e>
 8006778:	4651      	mov	r1, sl
 800677a:	462a      	mov	r2, r5
 800677c:	f000 f9ca 	bl	8006b14 <memmove>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	442b      	add	r3, r5
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	4621      	mov	r1, r4
 8006788:	4630      	mov	r0, r6
 800678a:	f7ff ff91 	bl	80066b0 <_fflush_r>
 800678e:	2800      	cmp	r0, #0
 8006790:	d167      	bne.n	8006862 <__sfvwrite_r+0x166>
 8006792:	1b7f      	subs	r7, r7, r5
 8006794:	f040 80f9 	bne.w	800698a <__sfvwrite_r+0x28e>
 8006798:	4621      	mov	r1, r4
 800679a:	4630      	mov	r0, r6
 800679c:	f7ff ff88 	bl	80066b0 <_fflush_r>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d15e      	bne.n	8006862 <__sfvwrite_r+0x166>
 80067a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80067a8:	1b5b      	subs	r3, r3, r5
 80067aa:	44aa      	add	sl, r5
 80067ac:	ebab 0b05 	sub.w	fp, fp, r5
 80067b0:	f8c9 3008 	str.w	r3, [r9, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1c0      	bne.n	800673a <__sfvwrite_r+0x3e>
 80067b8:	e7a7      	b.n	800670a <__sfvwrite_r+0xe>
 80067ba:	4621      	mov	r1, r4
 80067bc:	4630      	mov	r0, r6
 80067be:	f000 f8e9 	bl	8006994 <__swsetup_r>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d0ab      	beq.n	800671e <__sfvwrite_r+0x22>
 80067c6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ca:	e79f      	b.n	800670c <__sfvwrite_r+0x10>
 80067cc:	e9d8 a500 	ldrd	sl, r5, [r8]
 80067d0:	f108 0808 	add.w	r8, r8, #8
 80067d4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80067d8:	69e1      	ldr	r1, [r4, #28]
 80067da:	2d00      	cmp	r5, #0
 80067dc:	d0f6      	beq.n	80067cc <__sfvwrite_r+0xd0>
 80067de:	42bd      	cmp	r5, r7
 80067e0:	462b      	mov	r3, r5
 80067e2:	4652      	mov	r2, sl
 80067e4:	bf28      	it	cs
 80067e6:	463b      	movcs	r3, r7
 80067e8:	4630      	mov	r0, r6
 80067ea:	47d8      	blx	fp
 80067ec:	2800      	cmp	r0, #0
 80067ee:	dd38      	ble.n	8006862 <__sfvwrite_r+0x166>
 80067f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80067f4:	1a1b      	subs	r3, r3, r0
 80067f6:	4482      	add	sl, r0
 80067f8:	1a2d      	subs	r5, r5, r0
 80067fa:	f8c9 3008 	str.w	r3, [r9, #8]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e8      	bne.n	80067d4 <__sfvwrite_r+0xd8>
 8006802:	e782      	b.n	800670a <__sfvwrite_r+0xe>
 8006804:	f04f 0a00 	mov.w	sl, #0
 8006808:	4f61      	ldr	r7, [pc, #388]	@ (8006990 <__sfvwrite_r+0x294>)
 800680a:	4655      	mov	r5, sl
 800680c:	e7e2      	b.n	80067d4 <__sfvwrite_r+0xd8>
 800680e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8006812:	f108 0808 	add.w	r8, r8, #8
 8006816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	68a2      	ldr	r2, [r4, #8]
 800681e:	f1ba 0f00 	cmp.w	sl, #0
 8006822:	d0f4      	beq.n	800680e <__sfvwrite_r+0x112>
 8006824:	0599      	lsls	r1, r3, #22
 8006826:	d563      	bpl.n	80068f0 <__sfvwrite_r+0x1f4>
 8006828:	4552      	cmp	r2, sl
 800682a:	d836      	bhi.n	800689a <__sfvwrite_r+0x19e>
 800682c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8006830:	d033      	beq.n	800689a <__sfvwrite_r+0x19e>
 8006832:	6921      	ldr	r1, [r4, #16]
 8006834:	6965      	ldr	r5, [r4, #20]
 8006836:	eba0 0b01 	sub.w	fp, r0, r1
 800683a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800683e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006842:	f10b 0201 	add.w	r2, fp, #1
 8006846:	106d      	asrs	r5, r5, #1
 8006848:	4452      	add	r2, sl
 800684a:	4295      	cmp	r5, r2
 800684c:	bf38      	it	cc
 800684e:	4615      	movcc	r5, r2
 8006850:	055b      	lsls	r3, r3, #21
 8006852:	d53d      	bpl.n	80068d0 <__sfvwrite_r+0x1d4>
 8006854:	4629      	mov	r1, r5
 8006856:	4630      	mov	r0, r6
 8006858:	f7fd fc9e 	bl	8004198 <_malloc_r>
 800685c:	b948      	cbnz	r0, 8006872 <__sfvwrite_r+0x176>
 800685e:	230c      	movs	r3, #12
 8006860:	6033      	str	r3, [r6, #0]
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006868:	81a3      	strh	r3, [r4, #12]
 800686a:	e7ac      	b.n	80067c6 <__sfvwrite_r+0xca>
 800686c:	461f      	mov	r7, r3
 800686e:	469a      	mov	sl, r3
 8006870:	e7d1      	b.n	8006816 <__sfvwrite_r+0x11a>
 8006872:	465a      	mov	r2, fp
 8006874:	6921      	ldr	r1, [r4, #16]
 8006876:	9001      	str	r0, [sp, #4]
 8006878:	f000 f9b4 	bl	8006be4 <memcpy>
 800687c:	89a2      	ldrh	r2, [r4, #12]
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8006884:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006888:	81a2      	strh	r2, [r4, #12]
 800688a:	6123      	str	r3, [r4, #16]
 800688c:	6165      	str	r5, [r4, #20]
 800688e:	445b      	add	r3, fp
 8006890:	eba5 050b 	sub.w	r5, r5, fp
 8006894:	6023      	str	r3, [r4, #0]
 8006896:	4652      	mov	r2, sl
 8006898:	60a5      	str	r5, [r4, #8]
 800689a:	4552      	cmp	r2, sl
 800689c:	bf28      	it	cs
 800689e:	4652      	movcs	r2, sl
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	9201      	str	r2, [sp, #4]
 80068a4:	4639      	mov	r1, r7
 80068a6:	f000 f935 	bl	8006b14 <memmove>
 80068aa:	68a3      	ldr	r3, [r4, #8]
 80068ac:	9a01      	ldr	r2, [sp, #4]
 80068ae:	1a9b      	subs	r3, r3, r2
 80068b0:	60a3      	str	r3, [r4, #8]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	4655      	mov	r5, sl
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80068be:	1b5b      	subs	r3, r3, r5
 80068c0:	442f      	add	r7, r5
 80068c2:	ebaa 0a05 	sub.w	sl, sl, r5
 80068c6:	f8c9 3008 	str.w	r3, [r9, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1a3      	bne.n	8006816 <__sfvwrite_r+0x11a>
 80068ce:	e71c      	b.n	800670a <__sfvwrite_r+0xe>
 80068d0:	462a      	mov	r2, r5
 80068d2:	4630      	mov	r0, r6
 80068d4:	f001 fb86 	bl	8007fe4 <_realloc_r>
 80068d8:	4603      	mov	r3, r0
 80068da:	2800      	cmp	r0, #0
 80068dc:	d1d5      	bne.n	800688a <__sfvwrite_r+0x18e>
 80068de:	6921      	ldr	r1, [r4, #16]
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7fd fb99 	bl	8004018 <_free_r>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	e7b6      	b.n	800685e <__sfvwrite_r+0x162>
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	4283      	cmp	r3, r0
 80068f4:	d302      	bcc.n	80068fc <__sfvwrite_r+0x200>
 80068f6:	6961      	ldr	r1, [r4, #20]
 80068f8:	4551      	cmp	r1, sl
 80068fa:	d915      	bls.n	8006928 <__sfvwrite_r+0x22c>
 80068fc:	4552      	cmp	r2, sl
 80068fe:	bf28      	it	cs
 8006900:	4652      	movcs	r2, sl
 8006902:	4639      	mov	r1, r7
 8006904:	4615      	mov	r5, r2
 8006906:	f000 f905 	bl	8006b14 <memmove>
 800690a:	68a3      	ldr	r3, [r4, #8]
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	1b5b      	subs	r3, r3, r5
 8006910:	442a      	add	r2, r5
 8006912:	60a3      	str	r3, [r4, #8]
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1cf      	bne.n	80068ba <__sfvwrite_r+0x1be>
 800691a:	4621      	mov	r1, r4
 800691c:	4630      	mov	r0, r6
 800691e:	f7ff fec7 	bl	80066b0 <_fflush_r>
 8006922:	2800      	cmp	r0, #0
 8006924:	d0c9      	beq.n	80068ba <__sfvwrite_r+0x1be>
 8006926:	e79c      	b.n	8006862 <__sfvwrite_r+0x166>
 8006928:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800692c:	4553      	cmp	r3, sl
 800692e:	bf28      	it	cs
 8006930:	4653      	movcs	r3, sl
 8006932:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006934:	fb93 f3f1 	sdiv	r3, r3, r1
 8006938:	463a      	mov	r2, r7
 800693a:	434b      	muls	r3, r1
 800693c:	4630      	mov	r0, r6
 800693e:	69e1      	ldr	r1, [r4, #28]
 8006940:	47a8      	blx	r5
 8006942:	1e05      	subs	r5, r0, #0
 8006944:	dcb9      	bgt.n	80068ba <__sfvwrite_r+0x1be>
 8006946:	e78c      	b.n	8006862 <__sfvwrite_r+0x166>
 8006948:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800694c:	2000      	movs	r0, #0
 800694e:	f108 0808 	add.w	r8, r8, #8
 8006952:	e6f2      	b.n	800673a <__sfvwrite_r+0x3e>
 8006954:	f10b 0701 	add.w	r7, fp, #1
 8006958:	e6ff      	b.n	800675a <__sfvwrite_r+0x5e>
 800695a:	4293      	cmp	r3, r2
 800695c:	dc08      	bgt.n	8006970 <__sfvwrite_r+0x274>
 800695e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006960:	69e1      	ldr	r1, [r4, #28]
 8006962:	4652      	mov	r2, sl
 8006964:	4630      	mov	r0, r6
 8006966:	47a8      	blx	r5
 8006968:	1e05      	subs	r5, r0, #0
 800696a:	f73f af12 	bgt.w	8006792 <__sfvwrite_r+0x96>
 800696e:	e778      	b.n	8006862 <__sfvwrite_r+0x166>
 8006970:	4651      	mov	r1, sl
 8006972:	9201      	str	r2, [sp, #4]
 8006974:	f000 f8ce 	bl	8006b14 <memmove>
 8006978:	9a01      	ldr	r2, [sp, #4]
 800697a:	68a3      	ldr	r3, [r4, #8]
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	4413      	add	r3, r2
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	4615      	mov	r5, r2
 8006988:	e703      	b.n	8006792 <__sfvwrite_r+0x96>
 800698a:	2001      	movs	r0, #1
 800698c:	e70a      	b.n	80067a4 <__sfvwrite_r+0xa8>
 800698e:	bf00      	nop
 8006990:	7ffffc00 	.word	0x7ffffc00

08006994 <__swsetup_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4b29      	ldr	r3, [pc, #164]	@ (8006a3c <__swsetup_r+0xa8>)
 8006998:	4605      	mov	r5, r0
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	460c      	mov	r4, r1
 800699e:	b118      	cbz	r0, 80069a8 <__swsetup_r+0x14>
 80069a0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80069a2:	b90b      	cbnz	r3, 80069a8 <__swsetup_r+0x14>
 80069a4:	f7fd f9ca 	bl	8003d3c <__sinit>
 80069a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ac:	0719      	lsls	r1, r3, #28
 80069ae:	d422      	bmi.n	80069f6 <__swsetup_r+0x62>
 80069b0:	06da      	lsls	r2, r3, #27
 80069b2:	d407      	bmi.n	80069c4 <__swsetup_r+0x30>
 80069b4:	2209      	movs	r2, #9
 80069b6:	602a      	str	r2, [r5, #0]
 80069b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	f04f 30ff 	mov.w	r0, #4294967295
 80069c2:	e033      	b.n	8006a2c <__swsetup_r+0x98>
 80069c4:	0758      	lsls	r0, r3, #29
 80069c6:	d512      	bpl.n	80069ee <__swsetup_r+0x5a>
 80069c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80069ca:	b141      	cbz	r1, 80069de <__swsetup_r+0x4a>
 80069cc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 80069d0:	4299      	cmp	r1, r3
 80069d2:	d002      	beq.n	80069da <__swsetup_r+0x46>
 80069d4:	4628      	mov	r0, r5
 80069d6:	f7fd fb1f 	bl	8004018 <_free_r>
 80069da:	2300      	movs	r3, #0
 80069dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069e4:	81a3      	strh	r3, [r4, #12]
 80069e6:	2300      	movs	r3, #0
 80069e8:	6063      	str	r3, [r4, #4]
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	f043 0308 	orr.w	r3, r3, #8
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	b94b      	cbnz	r3, 8006a0e <__swsetup_r+0x7a>
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a04:	d003      	beq.n	8006a0e <__swsetup_r+0x7a>
 8006a06:	4621      	mov	r1, r4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f001 fcdf 	bl	80083cc <__smakebuf_r>
 8006a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a12:	f013 0201 	ands.w	r2, r3, #1
 8006a16:	d00a      	beq.n	8006a2e <__swsetup_r+0x9a>
 8006a18:	2200      	movs	r2, #0
 8006a1a:	60a2      	str	r2, [r4, #8]
 8006a1c:	6962      	ldr	r2, [r4, #20]
 8006a1e:	4252      	negs	r2, r2
 8006a20:	61a2      	str	r2, [r4, #24]
 8006a22:	6922      	ldr	r2, [r4, #16]
 8006a24:	b942      	cbnz	r2, 8006a38 <__swsetup_r+0xa4>
 8006a26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a2a:	d1c5      	bne.n	80069b8 <__swsetup_r+0x24>
 8006a2c:	bd38      	pop	{r3, r4, r5, pc}
 8006a2e:	0799      	lsls	r1, r3, #30
 8006a30:	bf58      	it	pl
 8006a32:	6962      	ldrpl	r2, [r4, #20]
 8006a34:	60a2      	str	r2, [r4, #8]
 8006a36:	e7f4      	b.n	8006a22 <__swsetup_r+0x8e>
 8006a38:	2000      	movs	r0, #0
 8006a3a:	e7f7      	b.n	8006a2c <__swsetup_r+0x98>
 8006a3c:	20000018 	.word	0x20000018

08006a40 <__fputwc>:
 8006a40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a44:	4680      	mov	r8, r0
 8006a46:	460f      	mov	r7, r1
 8006a48:	4614      	mov	r4, r2
 8006a4a:	f000 f891 	bl	8006b70 <__locale_mb_cur_max>
 8006a4e:	2801      	cmp	r0, #1
 8006a50:	4605      	mov	r5, r0
 8006a52:	d11b      	bne.n	8006a8c <__fputwc+0x4c>
 8006a54:	1e7b      	subs	r3, r7, #1
 8006a56:	2bfe      	cmp	r3, #254	@ 0xfe
 8006a58:	d818      	bhi.n	8006a8c <__fputwc+0x4c>
 8006a5a:	f88d 7004 	strb.w	r7, [sp, #4]
 8006a5e:	2600      	movs	r6, #0
 8006a60:	f10d 0904 	add.w	r9, sp, #4
 8006a64:	42ae      	cmp	r6, r5
 8006a66:	d021      	beq.n	8006aac <__fputwc+0x6c>
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	f816 1009 	ldrb.w	r1, [r6, r9]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	60a3      	str	r3, [r4, #8]
 8006a74:	da04      	bge.n	8006a80 <__fputwc+0x40>
 8006a76:	69a2      	ldr	r2, [r4, #24]
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	db1b      	blt.n	8006ab4 <__fputwc+0x74>
 8006a7c:	290a      	cmp	r1, #10
 8006a7e:	d019      	beq.n	8006ab4 <__fputwc+0x74>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	7019      	strb	r1, [r3, #0]
 8006a88:	3601      	adds	r6, #1
 8006a8a:	e7eb      	b.n	8006a64 <__fputwc+0x24>
 8006a8c:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8006a90:	463a      	mov	r2, r7
 8006a92:	a901      	add	r1, sp, #4
 8006a94:	4640      	mov	r0, r8
 8006a96:	f001 fc5b 	bl	8008350 <_wcrtomb_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	d1de      	bne.n	8006a5e <__fputwc+0x1e>
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8006aac:	4638      	mov	r0, r7
 8006aae:	b003      	add	sp, #12
 8006ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ab4:	4622      	mov	r2, r4
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	f001 fcc4 	bl	8008444 <__swbuf_r>
 8006abc:	3001      	adds	r0, #1
 8006abe:	d1e3      	bne.n	8006a88 <__fputwc+0x48>
 8006ac0:	e7f2      	b.n	8006aa8 <__fputwc+0x68>

08006ac2 <_fputwc_r>:
 8006ac2:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8006ac4:	07db      	lsls	r3, r3, #31
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460e      	mov	r6, r1
 8006acc:	4614      	mov	r4, r2
 8006ace:	d405      	bmi.n	8006adc <_fputwc_r+0x1a>
 8006ad0:	8993      	ldrh	r3, [r2, #12]
 8006ad2:	0598      	lsls	r0, r3, #22
 8006ad4:	d402      	bmi.n	8006adc <_fputwc_r+0x1a>
 8006ad6:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8006ad8:	f7fd fa36 	bl	8003f48 <__retarget_lock_acquire_recursive>
 8006adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae0:	0499      	lsls	r1, r3, #18
 8006ae2:	d406      	bmi.n	8006af2 <_fputwc_r+0x30>
 8006ae4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006aec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006af0:	6663      	str	r3, [r4, #100]	@ 0x64
 8006af2:	4622      	mov	r2, r4
 8006af4:	4628      	mov	r0, r5
 8006af6:	4631      	mov	r1, r6
 8006af8:	f7ff ffa2 	bl	8006a40 <__fputwc>
 8006afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006afe:	07da      	lsls	r2, r3, #31
 8006b00:	4605      	mov	r5, r0
 8006b02:	d405      	bmi.n	8006b10 <_fputwc_r+0x4e>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	059b      	lsls	r3, r3, #22
 8006b08:	d402      	bmi.n	8006b10 <_fputwc_r+0x4e>
 8006b0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b0c:	f7fd fa1d 	bl	8003f4a <__retarget_lock_release_recursive>
 8006b10:	4628      	mov	r0, r5
 8006b12:	bd70      	pop	{r4, r5, r6, pc}

08006b14 <memmove>:
 8006b14:	4288      	cmp	r0, r1
 8006b16:	b510      	push	{r4, lr}
 8006b18:	eb01 0402 	add.w	r4, r1, r2
 8006b1c:	d902      	bls.n	8006b24 <memmove+0x10>
 8006b1e:	4284      	cmp	r4, r0
 8006b20:	4623      	mov	r3, r4
 8006b22:	d807      	bhi.n	8006b34 <memmove+0x20>
 8006b24:	1e43      	subs	r3, r0, #1
 8006b26:	42a1      	cmp	r1, r4
 8006b28:	d008      	beq.n	8006b3c <memmove+0x28>
 8006b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b32:	e7f8      	b.n	8006b26 <memmove+0x12>
 8006b34:	4402      	add	r2, r0
 8006b36:	4601      	mov	r1, r0
 8006b38:	428a      	cmp	r2, r1
 8006b3a:	d100      	bne.n	8006b3e <memmove+0x2a>
 8006b3c:	bd10      	pop	{r4, pc}
 8006b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b46:	e7f7      	b.n	8006b38 <memmove+0x24>

08006b48 <strncpy>:
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	3901      	subs	r1, #1
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	b132      	cbz	r2, 8006b5e <strncpy+0x16>
 8006b50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b54:	f803 4b01 	strb.w	r4, [r3], #1
 8006b58:	3a01      	subs	r2, #1
 8006b5a:	2c00      	cmp	r4, #0
 8006b5c:	d1f7      	bne.n	8006b4e <strncpy+0x6>
 8006b5e:	441a      	add	r2, r3
 8006b60:	2100      	movs	r1, #0
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d100      	bne.n	8006b68 <strncpy+0x20>
 8006b66:	bd10      	pop	{r4, pc}
 8006b68:	f803 1b01 	strb.w	r1, [r3], #1
 8006b6c:	e7f9      	b.n	8006b62 <strncpy+0x1a>
	...

08006b70 <__locale_mb_cur_max>:
 8006b70:	4b01      	ldr	r3, [pc, #4]	@ (8006b78 <__locale_mb_cur_max+0x8>)
 8006b72:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 8006b76:	4770      	bx	lr
 8006b78:	20000554 	.word	0x20000554

08006b7c <_localeconv_r>:
 8006b7c:	4800      	ldr	r0, [pc, #0]	@ (8006b80 <_localeconv_r+0x4>)
 8006b7e:	4770      	bx	lr
 8006b80:	20000644 	.word	0x20000644

08006b84 <_sbrk_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d06      	ldr	r5, [pc, #24]	@ (8006ba0 <_sbrk_r+0x1c>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	602b      	str	r3, [r5, #0]
 8006b90:	f7fa fdda 	bl	8001748 <_sbrk>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_sbrk_r+0x1a>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_sbrk_r+0x1a>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20000f7c 	.word	0x20000f7c

08006ba4 <__libc_fini_array>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d07      	ldr	r5, [pc, #28]	@ (8006bc4 <__libc_fini_array+0x20>)
 8006ba8:	4c07      	ldr	r4, [pc, #28]	@ (8006bc8 <__libc_fini_array+0x24>)
 8006baa:	1b64      	subs	r4, r4, r5
 8006bac:	10a4      	asrs	r4, r4, #2
 8006bae:	b91c      	cbnz	r4, 8006bb8 <__libc_fini_array+0x14>
 8006bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb4:	f001 bd6a 	b.w	800868c <_fini>
 8006bb8:	3c01      	subs	r4, #1
 8006bba:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006bbe:	4798      	blx	r3
 8006bc0:	e7f5      	b.n	8006bae <__libc_fini_array+0xa>
 8006bc2:	bf00      	nop
 8006bc4:	08008a50 	.word	0x08008a50
 8006bc8:	08008a54 	.word	0x08008a54

08006bcc <sysconf>:
 8006bcc:	2808      	cmp	r0, #8
 8006bce:	b508      	push	{r3, lr}
 8006bd0:	d006      	beq.n	8006be0 <sysconf+0x14>
 8006bd2:	f7fd f98d 	bl	8003ef0 <__errno>
 8006bd6:	2316      	movs	r3, #22
 8006bd8:	6003      	str	r3, [r0, #0]
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295
 8006bde:	bd08      	pop	{r3, pc}
 8006be0:	2080      	movs	r0, #128	@ 0x80
 8006be2:	e7fc      	b.n	8006bde <sysconf+0x12>

08006be4 <memcpy>:
 8006be4:	440a      	add	r2, r1
 8006be6:	4291      	cmp	r1, r2
 8006be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bec:	d100      	bne.n	8006bf0 <memcpy+0xc>
 8006bee:	4770      	bx	lr
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bfa:	4291      	cmp	r1, r2
 8006bfc:	d1f9      	bne.n	8006bf2 <memcpy+0xe>
 8006bfe:	bd10      	pop	{r4, pc}

08006c00 <frexp>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	2100      	movs	r1, #0
 8006c04:	ec55 4b10 	vmov	r4, r5, d0
 8006c08:	6001      	str	r1, [r0, #0]
 8006c0a:	4915      	ldr	r1, [pc, #84]	@ (8006c60 <frexp+0x60>)
 8006c0c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006c10:	428a      	cmp	r2, r1
 8006c12:	4606      	mov	r6, r0
 8006c14:	462b      	mov	r3, r5
 8006c16:	d820      	bhi.n	8006c5a <frexp+0x5a>
 8006c18:	4621      	mov	r1, r4
 8006c1a:	4311      	orrs	r1, r2
 8006c1c:	d01d      	beq.n	8006c5a <frexp+0x5a>
 8006c1e:	4911      	ldr	r1, [pc, #68]	@ (8006c64 <frexp+0x64>)
 8006c20:	4029      	ands	r1, r5
 8006c22:	b961      	cbnz	r1, 8006c3e <frexp+0x3e>
 8006c24:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <frexp+0x68>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7f9 fcf4 	bl	8000618 <__aeabi_dmul>
 8006c30:	460b      	mov	r3, r1
 8006c32:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006c36:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	6031      	str	r1, [r6, #0]
 8006c3e:	6831      	ldr	r1, [r6, #0]
 8006c40:	1512      	asrs	r2, r2, #20
 8006c42:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006c46:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8006c4a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006c4e:	4411      	add	r1, r2
 8006c50:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8006c54:	6031      	str	r1, [r6, #0]
 8006c56:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8006c5a:	ec45 4b10 	vmov	d0, r4, r5
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	7fefffff 	.word	0x7fefffff
 8006c64:	7ff00000 	.word	0x7ff00000
 8006c68:	43500000 	.word	0x43500000

08006c6c <__register_exitproc>:
 8006c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8006ce8 <__register_exitproc+0x7c>
 8006c74:	4606      	mov	r6, r0
 8006c76:	f8da 0000 	ldr.w	r0, [sl]
 8006c7a:	4698      	mov	r8, r3
 8006c7c:	460f      	mov	r7, r1
 8006c7e:	4691      	mov	r9, r2
 8006c80:	f7fd f962 	bl	8003f48 <__retarget_lock_acquire_recursive>
 8006c84:	4b16      	ldr	r3, [pc, #88]	@ (8006ce0 <__register_exitproc+0x74>)
 8006c86:	681c      	ldr	r4, [r3, #0]
 8006c88:	b90c      	cbnz	r4, 8006c8e <__register_exitproc+0x22>
 8006c8a:	4c16      	ldr	r4, [pc, #88]	@ (8006ce4 <__register_exitproc+0x78>)
 8006c8c:	601c      	str	r4, [r3, #0]
 8006c8e:	6865      	ldr	r5, [r4, #4]
 8006c90:	f8da 0000 	ldr.w	r0, [sl]
 8006c94:	2d1f      	cmp	r5, #31
 8006c96:	dd05      	ble.n	8006ca4 <__register_exitproc+0x38>
 8006c98:	f7fd f957 	bl	8003f4a <__retarget_lock_release_recursive>
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca4:	b19e      	cbz	r6, 8006cce <__register_exitproc+0x62>
 8006ca6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8006caa:	2201      	movs	r2, #1
 8006cac:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8006cb0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8006cb4:	40aa      	lsls	r2, r5
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8006cbc:	2e02      	cmp	r6, #2
 8006cbe:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8006cc2:	bf02      	ittt	eq
 8006cc4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8006cc8:	4313      	orreq	r3, r2
 8006cca:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8006cce:	1c6b      	adds	r3, r5, #1
 8006cd0:	3502      	adds	r5, #2
 8006cd2:	6063      	str	r3, [r4, #4]
 8006cd4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8006cd8:	f7fd f937 	bl	8003f4a <__retarget_lock_release_recursive>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e7df      	b.n	8006ca0 <__register_exitproc+0x34>
 8006ce0:	20000f84 	.word	0x20000f84
 8006ce4:	20000fbc 	.word	0x20000fbc
 8006ce8:	20000140 	.word	0x20000140

08006cec <quorem>:
 8006cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	6903      	ldr	r3, [r0, #16]
 8006cf2:	690c      	ldr	r4, [r1, #16]
 8006cf4:	42a3      	cmp	r3, r4
 8006cf6:	4607      	mov	r7, r0
 8006cf8:	db7e      	blt.n	8006df8 <quorem+0x10c>
 8006cfa:	3c01      	subs	r4, #1
 8006cfc:	f101 0814 	add.w	r8, r1, #20
 8006d00:	00a3      	lsls	r3, r4, #2
 8006d02:	f100 0514 	add.w	r5, r0, #20
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d16:	3301      	adds	r3, #1
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d22:	d32e      	bcc.n	8006d82 <quorem+0x96>
 8006d24:	f04f 0a00 	mov.w	sl, #0
 8006d28:	46c4      	mov	ip, r8
 8006d2a:	46ae      	mov	lr, r5
 8006d2c:	46d3      	mov	fp, sl
 8006d2e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d32:	b298      	uxth	r0, r3
 8006d34:	fb06 a000 	mla	r0, r6, r0, sl
 8006d38:	0c02      	lsrs	r2, r0, #16
 8006d3a:	0c1b      	lsrs	r3, r3, #16
 8006d3c:	fb06 2303 	mla	r3, r6, r3, r2
 8006d40:	f8de 2000 	ldr.w	r2, [lr]
 8006d44:	b280      	uxth	r0, r0
 8006d46:	b292      	uxth	r2, r2
 8006d48:	1a12      	subs	r2, r2, r0
 8006d4a:	445a      	add	r2, fp
 8006d4c:	f8de 0000 	ldr.w	r0, [lr]
 8006d50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d5a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d5e:	b292      	uxth	r2, r2
 8006d60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d64:	45e1      	cmp	r9, ip
 8006d66:	f84e 2b04 	str.w	r2, [lr], #4
 8006d6a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d6e:	d2de      	bcs.n	8006d2e <quorem+0x42>
 8006d70:	9b00      	ldr	r3, [sp, #0]
 8006d72:	58eb      	ldr	r3, [r5, r3]
 8006d74:	b92b      	cbnz	r3, 8006d82 <quorem+0x96>
 8006d76:	9b01      	ldr	r3, [sp, #4]
 8006d78:	3b04      	subs	r3, #4
 8006d7a:	429d      	cmp	r5, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	d32f      	bcc.n	8006de0 <quorem+0xf4>
 8006d80:	613c      	str	r4, [r7, #16]
 8006d82:	4638      	mov	r0, r7
 8006d84:	f001 f826 	bl	8007dd4 <__mcmp>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	db25      	blt.n	8006dd8 <quorem+0xec>
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d94:	f8d1 c000 	ldr.w	ip, [r1]
 8006d98:	fa1f fe82 	uxth.w	lr, r2
 8006d9c:	fa1f f38c 	uxth.w	r3, ip
 8006da0:	eba3 030e 	sub.w	r3, r3, lr
 8006da4:	4403      	add	r3, r0
 8006da6:	0c12      	lsrs	r2, r2, #16
 8006da8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006dac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db6:	45c1      	cmp	r9, r8
 8006db8:	f841 3b04 	str.w	r3, [r1], #4
 8006dbc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006dc0:	d2e6      	bcs.n	8006d90 <quorem+0xa4>
 8006dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dca:	b922      	cbnz	r2, 8006dd6 <quorem+0xea>
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	429d      	cmp	r5, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	d30b      	bcc.n	8006dec <quorem+0x100>
 8006dd4:	613c      	str	r4, [r7, #16]
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	4630      	mov	r0, r6
 8006dda:	b003      	add	sp, #12
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	3b04      	subs	r3, #4
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	d1cb      	bne.n	8006d80 <quorem+0x94>
 8006de8:	3c01      	subs	r4, #1
 8006dea:	e7c6      	b.n	8006d7a <quorem+0x8e>
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	3b04      	subs	r3, #4
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	d1ef      	bne.n	8006dd4 <quorem+0xe8>
 8006df4:	3c01      	subs	r4, #1
 8006df6:	e7ea      	b.n	8006dce <quorem+0xe2>
 8006df8:	2000      	movs	r0, #0
 8006dfa:	e7ee      	b.n	8006dda <quorem+0xee>
 8006dfc:	0000      	movs	r0, r0
	...

08006e00 <_dtoa_r>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	b099      	sub	sp, #100	@ 0x64
 8006e06:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e0c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8006e0e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e10:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e12:	ec55 4b10 	vmov	r4, r5, d0
 8006e16:	4683      	mov	fp, r0
 8006e18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e1a:	b149      	cbz	r1, 8006e30 <_dtoa_r+0x30>
 8006e1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e1e:	604a      	str	r2, [r1, #4]
 8006e20:	2301      	movs	r3, #1
 8006e22:	4093      	lsls	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
 8006e26:	f000 fdce 	bl	80079c6 <_Bfree>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8006e30:	1e2b      	subs	r3, r5, #0
 8006e32:	bfb9      	ittee	lt
 8006e34:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e38:	9303      	strlt	r3, [sp, #12]
 8006e3a:	2300      	movge	r3, #0
 8006e3c:	6033      	strge	r3, [r6, #0]
 8006e3e:	9f03      	ldr	r7, [sp, #12]
 8006e40:	4b97      	ldr	r3, [pc, #604]	@ (80070a0 <_dtoa_r+0x2a0>)
 8006e42:	bfbc      	itt	lt
 8006e44:	2201      	movlt	r2, #1
 8006e46:	6032      	strlt	r2, [r6, #0]
 8006e48:	43bb      	bics	r3, r7
 8006e4a:	d114      	bne.n	8006e76 <_dtoa_r+0x76>
 8006e4c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e4e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e58:	4323      	orrs	r3, r4
 8006e5a:	f000 854c 	beq.w	80078f6 <_dtoa_r+0xaf6>
 8006e5e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e60:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80070b8 <_dtoa_r+0x2b8>
 8006e64:	b11b      	cbz	r3, 8006e6e <_dtoa_r+0x6e>
 8006e66:	f10a 0303 	add.w	r3, sl, #3
 8006e6a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	4650      	mov	r0, sl
 8006e70:	b019      	add	sp, #100	@ 0x64
 8006e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	ec51 0b17 	vmov	r0, r1, d7
 8006e80:	2300      	movs	r3, #0
 8006e82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006e86:	f7f9 fe2f 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	b150      	cbz	r0, 8006ea4 <_dtoa_r+0xa4>
 8006e8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e90:	2301      	movs	r3, #1
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e96:	b113      	cbz	r3, 8006e9e <_dtoa_r+0x9e>
 8006e98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e9a:	4b82      	ldr	r3, [pc, #520]	@ (80070a4 <_dtoa_r+0x2a4>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80070bc <_dtoa_r+0x2bc>
 8006ea2:	e7e4      	b.n	8006e6e <_dtoa_r+0x6e>
 8006ea4:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ea8:	aa16      	add	r2, sp, #88	@ 0x58
 8006eaa:	a917      	add	r1, sp, #92	@ 0x5c
 8006eac:	4658      	mov	r0, fp
 8006eae:	f001 f841 	bl	8007f34 <__d2b>
 8006eb2:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006eb6:	4681      	mov	r9, r0
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	d077      	beq.n	8006fac <_dtoa_r+0x1ac>
 8006ebc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ebe:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ec2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eca:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ece:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ed2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4b73      	ldr	r3, [pc, #460]	@ (80070a8 <_dtoa_r+0x2a8>)
 8006edc:	f7f9 f9e4 	bl	80002a8 <__aeabi_dsub>
 8006ee0:	a369      	add	r3, pc, #420	@ (adr r3, 8007088 <_dtoa_r+0x288>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f7f9 fb97 	bl	8000618 <__aeabi_dmul>
 8006eea:	a369      	add	r3, pc, #420	@ (adr r3, 8007090 <_dtoa_r+0x290>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 f9dc 	bl	80002ac <__adddf3>
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	460d      	mov	r5, r1
 8006efa:	f7f9 fb23 	bl	8000544 <__aeabi_i2d>
 8006efe:	a366      	add	r3, pc, #408	@ (adr r3, 8007098 <_dtoa_r+0x298>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 fb88 	bl	8000618 <__aeabi_dmul>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 f9cc 	bl	80002ac <__adddf3>
 8006f14:	4604      	mov	r4, r0
 8006f16:	460d      	mov	r5, r1
 8006f18:	f7f9 fe2e 	bl	8000b78 <__aeabi_d2iz>
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4607      	mov	r7, r0
 8006f20:	2300      	movs	r3, #0
 8006f22:	4620      	mov	r0, r4
 8006f24:	4629      	mov	r1, r5
 8006f26:	f7f9 fde9 	bl	8000afc <__aeabi_dcmplt>
 8006f2a:	b140      	cbz	r0, 8006f3e <_dtoa_r+0x13e>
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7f9 fb09 	bl	8000544 <__aeabi_i2d>
 8006f32:	4622      	mov	r2, r4
 8006f34:	462b      	mov	r3, r5
 8006f36:	f7f9 fdd7 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f3a:	b900      	cbnz	r0, 8006f3e <_dtoa_r+0x13e>
 8006f3c:	3f01      	subs	r7, #1
 8006f3e:	2f16      	cmp	r7, #22
 8006f40:	d851      	bhi.n	8006fe6 <_dtoa_r+0x1e6>
 8006f42:	4b5a      	ldr	r3, [pc, #360]	@ (80070ac <_dtoa_r+0x2ac>)
 8006f44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f50:	f7f9 fdd4 	bl	8000afc <__aeabi_dcmplt>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d048      	beq.n	8006fea <_dtoa_r+0x1ea>
 8006f58:	3f01      	subs	r7, #1
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f5e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f60:	1b9b      	subs	r3, r3, r6
 8006f62:	1e5a      	subs	r2, r3, #1
 8006f64:	bf44      	itt	mi
 8006f66:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f6a:	2300      	movmi	r3, #0
 8006f6c:	9208      	str	r2, [sp, #32]
 8006f6e:	bf54      	ite	pl
 8006f70:	f04f 0800 	movpl.w	r8, #0
 8006f74:	9308      	strmi	r3, [sp, #32]
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	db39      	blt.n	8006fee <_dtoa_r+0x1ee>
 8006f7a:	9b08      	ldr	r3, [sp, #32]
 8006f7c:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006f7e:	443b      	add	r3, r7
 8006f80:	9308      	str	r3, [sp, #32]
 8006f82:	2300      	movs	r3, #0
 8006f84:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f88:	2b09      	cmp	r3, #9
 8006f8a:	d865      	bhi.n	8007058 <_dtoa_r+0x258>
 8006f8c:	2b05      	cmp	r3, #5
 8006f8e:	bfc4      	itt	gt
 8006f90:	3b04      	subgt	r3, #4
 8006f92:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f96:	f1a3 0302 	sub.w	r3, r3, #2
 8006f9a:	bfcc      	ite	gt
 8006f9c:	2400      	movgt	r4, #0
 8006f9e:	2401      	movle	r4, #1
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d864      	bhi.n	800706e <_dtoa_r+0x26e>
 8006fa4:	e8df f003 	tbb	[pc, r3]
 8006fa8:	5635372a 	.word	0x5635372a
 8006fac:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006fb0:	441e      	add	r6, r3
 8006fb2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	bfc1      	itttt	gt
 8006fba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006fbe:	409f      	lslgt	r7, r3
 8006fc0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006fc4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006fc8:	bfd6      	itet	le
 8006fca:	f1c3 0320 	rsble	r3, r3, #32
 8006fce:	ea47 0003 	orrgt.w	r0, r7, r3
 8006fd2:	fa04 f003 	lslle.w	r0, r4, r3
 8006fd6:	f7f9 faa5 	bl	8000524 <__aeabi_ui2d>
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006fe0:	3e01      	subs	r6, #1
 8006fe2:	9214      	str	r2, [sp, #80]	@ 0x50
 8006fe4:	e777      	b.n	8006ed6 <_dtoa_r+0xd6>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7b8      	b.n	8006f5c <_dtoa_r+0x15c>
 8006fea:	9012      	str	r0, [sp, #72]	@ 0x48
 8006fec:	e7b7      	b.n	8006f5e <_dtoa_r+0x15e>
 8006fee:	427b      	negs	r3, r7
 8006ff0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	eba8 0807 	sub.w	r8, r8, r7
 8006ff8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ffa:	e7c4      	b.n	8006f86 <_dtoa_r+0x186>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007000:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007002:	2b00      	cmp	r3, #0
 8007004:	dc36      	bgt.n	8007074 <_dtoa_r+0x274>
 8007006:	2301      	movs	r3, #1
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	9307      	str	r3, [sp, #28]
 800700c:	461a      	mov	r2, r3
 800700e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007010:	e00b      	b.n	800702a <_dtoa_r+0x22a>
 8007012:	2301      	movs	r3, #1
 8007014:	e7f3      	b.n	8006ffe <_dtoa_r+0x1fe>
 8007016:	2300      	movs	r3, #0
 8007018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800701a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	2b01      	cmp	r3, #1
 8007024:	9307      	str	r3, [sp, #28]
 8007026:	bfb8      	it	lt
 8007028:	2301      	movlt	r3, #1
 800702a:	2100      	movs	r1, #0
 800702c:	2204      	movs	r2, #4
 800702e:	f102 0014 	add.w	r0, r2, #20
 8007032:	4298      	cmp	r0, r3
 8007034:	d922      	bls.n	800707c <_dtoa_r+0x27c>
 8007036:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800703a:	4658      	mov	r0, fp
 800703c:	f000 fc9e 	bl	800797c <_Balloc>
 8007040:	4682      	mov	sl, r0
 8007042:	2800      	cmp	r0, #0
 8007044:	d13c      	bne.n	80070c0 <_dtoa_r+0x2c0>
 8007046:	4b1a      	ldr	r3, [pc, #104]	@ (80070b0 <_dtoa_r+0x2b0>)
 8007048:	4602      	mov	r2, r0
 800704a:	f240 11af 	movw	r1, #431	@ 0x1af
 800704e:	4819      	ldr	r0, [pc, #100]	@ (80070b4 <_dtoa_r+0x2b4>)
 8007050:	f001 fa64 	bl	800851c <__assert_func>
 8007054:	2301      	movs	r3, #1
 8007056:	e7df      	b.n	8007018 <_dtoa_r+0x218>
 8007058:	2401      	movs	r4, #1
 800705a:	2300      	movs	r3, #0
 800705c:	9309      	str	r3, [sp, #36]	@ 0x24
 800705e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	9307      	str	r3, [sp, #28]
 8007068:	2200      	movs	r2, #0
 800706a:	2312      	movs	r3, #18
 800706c:	e7cf      	b.n	800700e <_dtoa_r+0x20e>
 800706e:	2301      	movs	r3, #1
 8007070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007072:	e7f5      	b.n	8007060 <_dtoa_r+0x260>
 8007074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	9307      	str	r3, [sp, #28]
 800707a:	e7d6      	b.n	800702a <_dtoa_r+0x22a>
 800707c:	3101      	adds	r1, #1
 800707e:	0052      	lsls	r2, r2, #1
 8007080:	e7d5      	b.n	800702e <_dtoa_r+0x22e>
 8007082:	bf00      	nop
 8007084:	f3af 8000 	nop.w
 8007088:	636f4361 	.word	0x636f4361
 800708c:	3fd287a7 	.word	0x3fd287a7
 8007090:	8b60c8b3 	.word	0x8b60c8b3
 8007094:	3fc68a28 	.word	0x3fc68a28
 8007098:	509f79fb 	.word	0x509f79fb
 800709c:	3fd34413 	.word	0x3fd34413
 80070a0:	7ff00000 	.word	0x7ff00000
 80070a4:	080086e7 	.word	0x080086e7
 80070a8:	3ff80000 	.word	0x3ff80000
 80070ac:	08008838 	.word	0x08008838
 80070b0:	0800873f 	.word	0x0800873f
 80070b4:	08008750 	.word	0x08008750
 80070b8:	0800873b 	.word	0x0800873b
 80070bc:	080086e6 	.word	0x080086e6
 80070c0:	9b07      	ldr	r3, [sp, #28]
 80070c2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 80070c6:	2b0e      	cmp	r3, #14
 80070c8:	f200 80a4 	bhi.w	8007214 <_dtoa_r+0x414>
 80070cc:	2c00      	cmp	r4, #0
 80070ce:	f000 80a1 	beq.w	8007214 <_dtoa_r+0x414>
 80070d2:	2f00      	cmp	r7, #0
 80070d4:	dd33      	ble.n	800713e <_dtoa_r+0x33e>
 80070d6:	4bae      	ldr	r3, [pc, #696]	@ (8007390 <_dtoa_r+0x590>)
 80070d8:	f007 020f 	and.w	r2, r7, #15
 80070dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070e0:	ed93 7b00 	vldr	d7, [r3]
 80070e4:	05f8      	lsls	r0, r7, #23
 80070e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070ea:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070ee:	d516      	bpl.n	800711e <_dtoa_r+0x31e>
 80070f0:	4ba8      	ldr	r3, [pc, #672]	@ (8007394 <_dtoa_r+0x594>)
 80070f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070fa:	f7f9 fbb7 	bl	800086c <__aeabi_ddiv>
 80070fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007102:	f004 040f 	and.w	r4, r4, #15
 8007106:	2603      	movs	r6, #3
 8007108:	4da2      	ldr	r5, [pc, #648]	@ (8007394 <_dtoa_r+0x594>)
 800710a:	b954      	cbnz	r4, 8007122 <_dtoa_r+0x322>
 800710c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007114:	f7f9 fbaa 	bl	800086c <__aeabi_ddiv>
 8007118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800711c:	e028      	b.n	8007170 <_dtoa_r+0x370>
 800711e:	2602      	movs	r6, #2
 8007120:	e7f2      	b.n	8007108 <_dtoa_r+0x308>
 8007122:	07e1      	lsls	r1, r4, #31
 8007124:	d508      	bpl.n	8007138 <_dtoa_r+0x338>
 8007126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800712a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800712e:	f7f9 fa73 	bl	8000618 <__aeabi_dmul>
 8007132:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007136:	3601      	adds	r6, #1
 8007138:	1064      	asrs	r4, r4, #1
 800713a:	3508      	adds	r5, #8
 800713c:	e7e5      	b.n	800710a <_dtoa_r+0x30a>
 800713e:	f000 80d2 	beq.w	80072e6 <_dtoa_r+0x4e6>
 8007142:	427c      	negs	r4, r7
 8007144:	4b92      	ldr	r3, [pc, #584]	@ (8007390 <_dtoa_r+0x590>)
 8007146:	4d93      	ldr	r5, [pc, #588]	@ (8007394 <_dtoa_r+0x594>)
 8007148:	f004 020f 	and.w	r2, r4, #15
 800714c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007158:	f7f9 fa5e 	bl	8000618 <__aeabi_dmul>
 800715c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007160:	1124      	asrs	r4, r4, #4
 8007162:	2300      	movs	r3, #0
 8007164:	2602      	movs	r6, #2
 8007166:	2c00      	cmp	r4, #0
 8007168:	f040 80b2 	bne.w	80072d0 <_dtoa_r+0x4d0>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1d3      	bne.n	8007118 <_dtoa_r+0x318>
 8007170:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007172:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 80b7 	beq.w	80072ea <_dtoa_r+0x4ea>
 800717c:	4b86      	ldr	r3, [pc, #536]	@ (8007398 <_dtoa_r+0x598>)
 800717e:	2200      	movs	r2, #0
 8007180:	4620      	mov	r0, r4
 8007182:	4629      	mov	r1, r5
 8007184:	f7f9 fcba 	bl	8000afc <__aeabi_dcmplt>
 8007188:	2800      	cmp	r0, #0
 800718a:	f000 80ae 	beq.w	80072ea <_dtoa_r+0x4ea>
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80aa 	beq.w	80072ea <_dtoa_r+0x4ea>
 8007196:	9b00      	ldr	r3, [sp, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd37      	ble.n	800720c <_dtoa_r+0x40c>
 800719c:	1e7b      	subs	r3, r7, #1
 800719e:	9304      	str	r3, [sp, #16]
 80071a0:	4620      	mov	r0, r4
 80071a2:	4b7e      	ldr	r3, [pc, #504]	@ (800739c <_dtoa_r+0x59c>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	4629      	mov	r1, r5
 80071a8:	f7f9 fa36 	bl	8000618 <__aeabi_dmul>
 80071ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b0:	9c00      	ldr	r4, [sp, #0]
 80071b2:	3601      	adds	r6, #1
 80071b4:	4630      	mov	r0, r6
 80071b6:	f7f9 f9c5 	bl	8000544 <__aeabi_i2d>
 80071ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071be:	f7f9 fa2b 	bl	8000618 <__aeabi_dmul>
 80071c2:	4b77      	ldr	r3, [pc, #476]	@ (80073a0 <_dtoa_r+0x5a0>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	f7f9 f871 	bl	80002ac <__adddf3>
 80071ca:	4605      	mov	r5, r0
 80071cc:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80071d0:	2c00      	cmp	r4, #0
 80071d2:	f040 808d 	bne.w	80072f0 <_dtoa_r+0x4f0>
 80071d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071da:	4b72      	ldr	r3, [pc, #456]	@ (80073a4 <_dtoa_r+0x5a4>)
 80071dc:	2200      	movs	r2, #0
 80071de:	f7f9 f863 	bl	80002a8 <__aeabi_dsub>
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071ea:	462a      	mov	r2, r5
 80071ec:	4633      	mov	r3, r6
 80071ee:	f7f9 fca3 	bl	8000b38 <__aeabi_dcmpgt>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f040 828c 	bne.w	8007710 <_dtoa_r+0x910>
 80071f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071fc:	462a      	mov	r2, r5
 80071fe:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007202:	f7f9 fc7b 	bl	8000afc <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	f040 8129 	bne.w	800745e <_dtoa_r+0x65e>
 800720c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007210:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007214:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007216:	2b00      	cmp	r3, #0
 8007218:	f2c0 815b 	blt.w	80074d2 <_dtoa_r+0x6d2>
 800721c:	2f0e      	cmp	r7, #14
 800721e:	f300 8158 	bgt.w	80074d2 <_dtoa_r+0x6d2>
 8007222:	4b5b      	ldr	r3, [pc, #364]	@ (8007390 <_dtoa_r+0x590>)
 8007224:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007228:	ed93 7b00 	vldr	d7, [r3]
 800722c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800722e:	2b00      	cmp	r3, #0
 8007230:	ed8d 7b00 	vstr	d7, [sp]
 8007234:	da03      	bge.n	800723e <_dtoa_r+0x43e>
 8007236:	9b07      	ldr	r3, [sp, #28]
 8007238:	2b00      	cmp	r3, #0
 800723a:	f340 8102 	ble.w	8007442 <_dtoa_r+0x642>
 800723e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007242:	4656      	mov	r6, sl
 8007244:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007248:	4620      	mov	r0, r4
 800724a:	4629      	mov	r1, r5
 800724c:	f7f9 fb0e 	bl	800086c <__aeabi_ddiv>
 8007250:	f7f9 fc92 	bl	8000b78 <__aeabi_d2iz>
 8007254:	4680      	mov	r8, r0
 8007256:	f7f9 f975 	bl	8000544 <__aeabi_i2d>
 800725a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800725e:	f7f9 f9db 	bl	8000618 <__aeabi_dmul>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800726e:	f7f9 f81b 	bl	80002a8 <__aeabi_dsub>
 8007272:	f806 4b01 	strb.w	r4, [r6], #1
 8007276:	9d07      	ldr	r5, [sp, #28]
 8007278:	eba6 040a 	sub.w	r4, r6, sl
 800727c:	42a5      	cmp	r5, r4
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	f040 8118 	bne.w	80074b6 <_dtoa_r+0x6b6>
 8007286:	f7f9 f811 	bl	80002ac <__adddf3>
 800728a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	f7f9 fc51 	bl	8000b38 <__aeabi_dcmpgt>
 8007296:	2800      	cmp	r0, #0
 8007298:	f040 80fa 	bne.w	8007490 <_dtoa_r+0x690>
 800729c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072a0:	4620      	mov	r0, r4
 80072a2:	4629      	mov	r1, r5
 80072a4:	f7f9 fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 80072a8:	b118      	cbz	r0, 80072b2 <_dtoa_r+0x4b2>
 80072aa:	f018 0f01 	tst.w	r8, #1
 80072ae:	f040 80ef 	bne.w	8007490 <_dtoa_r+0x690>
 80072b2:	4649      	mov	r1, r9
 80072b4:	4658      	mov	r0, fp
 80072b6:	f000 fb86 	bl	80079c6 <_Bfree>
 80072ba:	2300      	movs	r3, #0
 80072bc:	7033      	strb	r3, [r6, #0]
 80072be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072c0:	3701      	adds	r7, #1
 80072c2:	601f      	str	r7, [r3, #0]
 80072c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f43f add1 	beq.w	8006e6e <_dtoa_r+0x6e>
 80072cc:	601e      	str	r6, [r3, #0]
 80072ce:	e5ce      	b.n	8006e6e <_dtoa_r+0x6e>
 80072d0:	07e2      	lsls	r2, r4, #31
 80072d2:	d505      	bpl.n	80072e0 <_dtoa_r+0x4e0>
 80072d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072d8:	f7f9 f99e 	bl	8000618 <__aeabi_dmul>
 80072dc:	3601      	adds	r6, #1
 80072de:	2301      	movs	r3, #1
 80072e0:	1064      	asrs	r4, r4, #1
 80072e2:	3508      	adds	r5, #8
 80072e4:	e73f      	b.n	8007166 <_dtoa_r+0x366>
 80072e6:	2602      	movs	r6, #2
 80072e8:	e742      	b.n	8007170 <_dtoa_r+0x370>
 80072ea:	9c07      	ldr	r4, [sp, #28]
 80072ec:	9704      	str	r7, [sp, #16]
 80072ee:	e761      	b.n	80071b4 <_dtoa_r+0x3b4>
 80072f0:	4b27      	ldr	r3, [pc, #156]	@ (8007390 <_dtoa_r+0x590>)
 80072f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072fc:	4454      	add	r4, sl
 80072fe:	2900      	cmp	r1, #0
 8007300:	d054      	beq.n	80073ac <_dtoa_r+0x5ac>
 8007302:	4929      	ldr	r1, [pc, #164]	@ (80073a8 <_dtoa_r+0x5a8>)
 8007304:	2000      	movs	r0, #0
 8007306:	f7f9 fab1 	bl	800086c <__aeabi_ddiv>
 800730a:	4633      	mov	r3, r6
 800730c:	462a      	mov	r2, r5
 800730e:	f7f8 ffcb 	bl	80002a8 <__aeabi_dsub>
 8007312:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007316:	4656      	mov	r6, sl
 8007318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800731c:	f7f9 fc2c 	bl	8000b78 <__aeabi_d2iz>
 8007320:	4605      	mov	r5, r0
 8007322:	f7f9 f90f 	bl	8000544 <__aeabi_i2d>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732e:	f7f8 ffbb 	bl	80002a8 <__aeabi_dsub>
 8007332:	3530      	adds	r5, #48	@ 0x30
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800733c:	f806 5b01 	strb.w	r5, [r6], #1
 8007340:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007344:	f7f9 fbda 	bl	8000afc <__aeabi_dcmplt>
 8007348:	2800      	cmp	r0, #0
 800734a:	d172      	bne.n	8007432 <_dtoa_r+0x632>
 800734c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007350:	4911      	ldr	r1, [pc, #68]	@ (8007398 <_dtoa_r+0x598>)
 8007352:	2000      	movs	r0, #0
 8007354:	f7f8 ffa8 	bl	80002a8 <__aeabi_dsub>
 8007358:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800735c:	f7f9 fbce 	bl	8000afc <__aeabi_dcmplt>
 8007360:	2800      	cmp	r0, #0
 8007362:	f040 8096 	bne.w	8007492 <_dtoa_r+0x692>
 8007366:	42a6      	cmp	r6, r4
 8007368:	f43f af50 	beq.w	800720c <_dtoa_r+0x40c>
 800736c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007370:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <_dtoa_r+0x59c>)
 8007372:	2200      	movs	r2, #0
 8007374:	f7f9 f950 	bl	8000618 <__aeabi_dmul>
 8007378:	4b08      	ldr	r3, [pc, #32]	@ (800739c <_dtoa_r+0x59c>)
 800737a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800737e:	2200      	movs	r2, #0
 8007380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007384:	f7f9 f948 	bl	8000618 <__aeabi_dmul>
 8007388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800738c:	e7c4      	b.n	8007318 <_dtoa_r+0x518>
 800738e:	bf00      	nop
 8007390:	08008838 	.word	0x08008838
 8007394:	08008810 	.word	0x08008810
 8007398:	3ff00000 	.word	0x3ff00000
 800739c:	40240000 	.word	0x40240000
 80073a0:	401c0000 	.word	0x401c0000
 80073a4:	40140000 	.word	0x40140000
 80073a8:	3fe00000 	.word	0x3fe00000
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	f7f9 f932 	bl	8000618 <__aeabi_dmul>
 80073b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073b8:	9415      	str	r4, [sp, #84]	@ 0x54
 80073ba:	4656      	mov	r6, sl
 80073bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c0:	f7f9 fbda 	bl	8000b78 <__aeabi_d2iz>
 80073c4:	4605      	mov	r5, r0
 80073c6:	f7f9 f8bd 	bl	8000544 <__aeabi_i2d>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d2:	f7f8 ff69 	bl	80002a8 <__aeabi_dsub>
 80073d6:	3530      	adds	r5, #48	@ 0x30
 80073d8:	f806 5b01 	strb.w	r5, [r6], #1
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	42a6      	cmp	r6, r4
 80073e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073e6:	f04f 0200 	mov.w	r2, #0
 80073ea:	d124      	bne.n	8007436 <_dtoa_r+0x636>
 80073ec:	4bac      	ldr	r3, [pc, #688]	@ (80076a0 <_dtoa_r+0x8a0>)
 80073ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073f2:	f7f8 ff5b 	bl	80002ac <__adddf3>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fe:	f7f9 fb9b 	bl	8000b38 <__aeabi_dcmpgt>
 8007402:	2800      	cmp	r0, #0
 8007404:	d145      	bne.n	8007492 <_dtoa_r+0x692>
 8007406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800740a:	49a5      	ldr	r1, [pc, #660]	@ (80076a0 <_dtoa_r+0x8a0>)
 800740c:	2000      	movs	r0, #0
 800740e:	f7f8 ff4b 	bl	80002a8 <__aeabi_dsub>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741a:	f7f9 fb6f 	bl	8000afc <__aeabi_dcmplt>
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f aef4 	beq.w	800720c <_dtoa_r+0x40c>
 8007424:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007426:	1e73      	subs	r3, r6, #1
 8007428:	9315      	str	r3, [sp, #84]	@ 0x54
 800742a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800742e:	2b30      	cmp	r3, #48	@ 0x30
 8007430:	d0f8      	beq.n	8007424 <_dtoa_r+0x624>
 8007432:	9f04      	ldr	r7, [sp, #16]
 8007434:	e73d      	b.n	80072b2 <_dtoa_r+0x4b2>
 8007436:	4b9b      	ldr	r3, [pc, #620]	@ (80076a4 <_dtoa_r+0x8a4>)
 8007438:	f7f9 f8ee 	bl	8000618 <__aeabi_dmul>
 800743c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007440:	e7bc      	b.n	80073bc <_dtoa_r+0x5bc>
 8007442:	d10c      	bne.n	800745e <_dtoa_r+0x65e>
 8007444:	4b98      	ldr	r3, [pc, #608]	@ (80076a8 <_dtoa_r+0x8a8>)
 8007446:	2200      	movs	r2, #0
 8007448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800744c:	f7f9 f8e4 	bl	8000618 <__aeabi_dmul>
 8007450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007454:	f7f9 fb66 	bl	8000b24 <__aeabi_dcmpge>
 8007458:	2800      	cmp	r0, #0
 800745a:	f000 8157 	beq.w	800770c <_dtoa_r+0x90c>
 800745e:	2400      	movs	r4, #0
 8007460:	4625      	mov	r5, r4
 8007462:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007464:	43db      	mvns	r3, r3
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	4656      	mov	r6, sl
 800746a:	2700      	movs	r7, #0
 800746c:	4621      	mov	r1, r4
 800746e:	4658      	mov	r0, fp
 8007470:	f000 faa9 	bl	80079c6 <_Bfree>
 8007474:	2d00      	cmp	r5, #0
 8007476:	d0dc      	beq.n	8007432 <_dtoa_r+0x632>
 8007478:	b12f      	cbz	r7, 8007486 <_dtoa_r+0x686>
 800747a:	42af      	cmp	r7, r5
 800747c:	d003      	beq.n	8007486 <_dtoa_r+0x686>
 800747e:	4639      	mov	r1, r7
 8007480:	4658      	mov	r0, fp
 8007482:	f000 faa0 	bl	80079c6 <_Bfree>
 8007486:	4629      	mov	r1, r5
 8007488:	4658      	mov	r0, fp
 800748a:	f000 fa9c 	bl	80079c6 <_Bfree>
 800748e:	e7d0      	b.n	8007432 <_dtoa_r+0x632>
 8007490:	9704      	str	r7, [sp, #16]
 8007492:	4633      	mov	r3, r6
 8007494:	461e      	mov	r6, r3
 8007496:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800749a:	2a39      	cmp	r2, #57	@ 0x39
 800749c:	d107      	bne.n	80074ae <_dtoa_r+0x6ae>
 800749e:	459a      	cmp	sl, r3
 80074a0:	d1f8      	bne.n	8007494 <_dtoa_r+0x694>
 80074a2:	9a04      	ldr	r2, [sp, #16]
 80074a4:	3201      	adds	r2, #1
 80074a6:	9204      	str	r2, [sp, #16]
 80074a8:	2230      	movs	r2, #48	@ 0x30
 80074aa:	f88a 2000 	strb.w	r2, [sl]
 80074ae:	781a      	ldrb	r2, [r3, #0]
 80074b0:	3201      	adds	r2, #1
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	e7bd      	b.n	8007432 <_dtoa_r+0x632>
 80074b6:	4b7b      	ldr	r3, [pc, #492]	@ (80076a4 <_dtoa_r+0x8a4>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	f7f9 f8ad 	bl	8000618 <__aeabi_dmul>
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	4604      	mov	r4, r0
 80074c4:	460d      	mov	r5, r1
 80074c6:	f7f9 fb0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f43f aeba 	beq.w	8007244 <_dtoa_r+0x444>
 80074d0:	e6ef      	b.n	80072b2 <_dtoa_r+0x4b2>
 80074d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074d4:	2a00      	cmp	r2, #0
 80074d6:	f000 80db 	beq.w	8007690 <_dtoa_r+0x890>
 80074da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074dc:	2a01      	cmp	r2, #1
 80074de:	f300 80bf 	bgt.w	8007660 <_dtoa_r+0x860>
 80074e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	f000 80b7 	beq.w	8007658 <_dtoa_r+0x858>
 80074ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074f0:	4646      	mov	r6, r8
 80074f2:	9a08      	ldr	r2, [sp, #32]
 80074f4:	2101      	movs	r1, #1
 80074f6:	441a      	add	r2, r3
 80074f8:	4658      	mov	r0, fp
 80074fa:	4498      	add	r8, r3
 80074fc:	9208      	str	r2, [sp, #32]
 80074fe:	f000 fafd 	bl	8007afc <__i2b>
 8007502:	4605      	mov	r5, r0
 8007504:	b15e      	cbz	r6, 800751e <_dtoa_r+0x71e>
 8007506:	9b08      	ldr	r3, [sp, #32]
 8007508:	2b00      	cmp	r3, #0
 800750a:	dd08      	ble.n	800751e <_dtoa_r+0x71e>
 800750c:	42b3      	cmp	r3, r6
 800750e:	9a08      	ldr	r2, [sp, #32]
 8007510:	bfa8      	it	ge
 8007512:	4633      	movge	r3, r6
 8007514:	eba8 0803 	sub.w	r8, r8, r3
 8007518:	1af6      	subs	r6, r6, r3
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	9308      	str	r3, [sp, #32]
 800751e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007520:	b1f3      	cbz	r3, 8007560 <_dtoa_r+0x760>
 8007522:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 80b7 	beq.w	8007698 <_dtoa_r+0x898>
 800752a:	b18c      	cbz	r4, 8007550 <_dtoa_r+0x750>
 800752c:	4629      	mov	r1, r5
 800752e:	4622      	mov	r2, r4
 8007530:	4658      	mov	r0, fp
 8007532:	f000 fba3 	bl	8007c7c <__pow5mult>
 8007536:	464a      	mov	r2, r9
 8007538:	4601      	mov	r1, r0
 800753a:	4605      	mov	r5, r0
 800753c:	4658      	mov	r0, fp
 800753e:	f000 faf3 	bl	8007b28 <__multiply>
 8007542:	4649      	mov	r1, r9
 8007544:	9004      	str	r0, [sp, #16]
 8007546:	4658      	mov	r0, fp
 8007548:	f000 fa3d 	bl	80079c6 <_Bfree>
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	4699      	mov	r9, r3
 8007550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007552:	1b1a      	subs	r2, r3, r4
 8007554:	d004      	beq.n	8007560 <_dtoa_r+0x760>
 8007556:	4649      	mov	r1, r9
 8007558:	4658      	mov	r0, fp
 800755a:	f000 fb8f 	bl	8007c7c <__pow5mult>
 800755e:	4681      	mov	r9, r0
 8007560:	2101      	movs	r1, #1
 8007562:	4658      	mov	r0, fp
 8007564:	f000 faca 	bl	8007afc <__i2b>
 8007568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800756a:	4604      	mov	r4, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 81cc 	beq.w	800790a <_dtoa_r+0xb0a>
 8007572:	461a      	mov	r2, r3
 8007574:	4601      	mov	r1, r0
 8007576:	4658      	mov	r0, fp
 8007578:	f000 fb80 	bl	8007c7c <__pow5mult>
 800757c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757e:	2b01      	cmp	r3, #1
 8007580:	4604      	mov	r4, r0
 8007582:	f300 8095 	bgt.w	80076b0 <_dtoa_r+0x8b0>
 8007586:	9b02      	ldr	r3, [sp, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 8087 	bne.w	800769c <_dtoa_r+0x89c>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007594:	2b00      	cmp	r3, #0
 8007596:	f040 8089 	bne.w	80076ac <_dtoa_r+0x8ac>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075a0:	0d1b      	lsrs	r3, r3, #20
 80075a2:	051b      	lsls	r3, r3, #20
 80075a4:	b12b      	cbz	r3, 80075b2 <_dtoa_r+0x7b2>
 80075a6:	9b08      	ldr	r3, [sp, #32]
 80075a8:	3301      	adds	r3, #1
 80075aa:	9308      	str	r3, [sp, #32]
 80075ac:	f108 0801 	add.w	r8, r8, #1
 80075b0:	2301      	movs	r3, #1
 80075b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 81ad 	beq.w	8007916 <_dtoa_r+0xb16>
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075c2:	6918      	ldr	r0, [r3, #16]
 80075c4:	f000 fa4e 	bl	8007a64 <__hi0bits>
 80075c8:	f1c0 0020 	rsb	r0, r0, #32
 80075cc:	9b08      	ldr	r3, [sp, #32]
 80075ce:	4418      	add	r0, r3
 80075d0:	f010 001f 	ands.w	r0, r0, #31
 80075d4:	d077      	beq.n	80076c6 <_dtoa_r+0x8c6>
 80075d6:	f1c0 0320 	rsb	r3, r0, #32
 80075da:	2b04      	cmp	r3, #4
 80075dc:	dd6b      	ble.n	80076b6 <_dtoa_r+0x8b6>
 80075de:	9b08      	ldr	r3, [sp, #32]
 80075e0:	f1c0 001c 	rsb	r0, r0, #28
 80075e4:	4403      	add	r3, r0
 80075e6:	4480      	add	r8, r0
 80075e8:	4406      	add	r6, r0
 80075ea:	9308      	str	r3, [sp, #32]
 80075ec:	f1b8 0f00 	cmp.w	r8, #0
 80075f0:	dd05      	ble.n	80075fe <_dtoa_r+0x7fe>
 80075f2:	4649      	mov	r1, r9
 80075f4:	4642      	mov	r2, r8
 80075f6:	4658      	mov	r0, fp
 80075f8:	f000 fb80 	bl	8007cfc <__lshift>
 80075fc:	4681      	mov	r9, r0
 80075fe:	9b08      	ldr	r3, [sp, #32]
 8007600:	2b00      	cmp	r3, #0
 8007602:	dd05      	ble.n	8007610 <_dtoa_r+0x810>
 8007604:	4621      	mov	r1, r4
 8007606:	461a      	mov	r2, r3
 8007608:	4658      	mov	r0, fp
 800760a:	f000 fb77 	bl	8007cfc <__lshift>
 800760e:	4604      	mov	r4, r0
 8007610:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007612:	2b00      	cmp	r3, #0
 8007614:	d059      	beq.n	80076ca <_dtoa_r+0x8ca>
 8007616:	4621      	mov	r1, r4
 8007618:	4648      	mov	r0, r9
 800761a:	f000 fbdb 	bl	8007dd4 <__mcmp>
 800761e:	2800      	cmp	r0, #0
 8007620:	da53      	bge.n	80076ca <_dtoa_r+0x8ca>
 8007622:	1e7b      	subs	r3, r7, #1
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	4649      	mov	r1, r9
 8007628:	2300      	movs	r3, #0
 800762a:	220a      	movs	r2, #10
 800762c:	4658      	mov	r0, fp
 800762e:	f000 f9d3 	bl	80079d8 <__multadd>
 8007632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007634:	4681      	mov	r9, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 816f 	beq.w	800791a <_dtoa_r+0xb1a>
 800763c:	2300      	movs	r3, #0
 800763e:	4629      	mov	r1, r5
 8007640:	220a      	movs	r2, #10
 8007642:	4658      	mov	r0, fp
 8007644:	f000 f9c8 	bl	80079d8 <__multadd>
 8007648:	9b00      	ldr	r3, [sp, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	4605      	mov	r5, r0
 800764e:	dc67      	bgt.n	8007720 <_dtoa_r+0x920>
 8007650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007652:	2b02      	cmp	r3, #2
 8007654:	dc41      	bgt.n	80076da <_dtoa_r+0x8da>
 8007656:	e063      	b.n	8007720 <_dtoa_r+0x920>
 8007658:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800765a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800765e:	e746      	b.n	80074ee <_dtoa_r+0x6ee>
 8007660:	9b07      	ldr	r3, [sp, #28]
 8007662:	1e5c      	subs	r4, r3, #1
 8007664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007666:	42a3      	cmp	r3, r4
 8007668:	bfbf      	itttt	lt
 800766a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800766c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800766e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007670:	1ae3      	sublt	r3, r4, r3
 8007672:	bfb4      	ite	lt
 8007674:	18d2      	addlt	r2, r2, r3
 8007676:	1b1c      	subge	r4, r3, r4
 8007678:	9b07      	ldr	r3, [sp, #28]
 800767a:	bfbc      	itt	lt
 800767c:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800767e:	2400      	movlt	r4, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfb5      	itete	lt
 8007684:	eba8 0603 	sublt.w	r6, r8, r3
 8007688:	9b07      	ldrge	r3, [sp, #28]
 800768a:	2300      	movlt	r3, #0
 800768c:	4646      	movge	r6, r8
 800768e:	e730      	b.n	80074f2 <_dtoa_r+0x6f2>
 8007690:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007692:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007694:	4646      	mov	r6, r8
 8007696:	e735      	b.n	8007504 <_dtoa_r+0x704>
 8007698:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800769a:	e75c      	b.n	8007556 <_dtoa_r+0x756>
 800769c:	2300      	movs	r3, #0
 800769e:	e788      	b.n	80075b2 <_dtoa_r+0x7b2>
 80076a0:	3fe00000 	.word	0x3fe00000
 80076a4:	40240000 	.word	0x40240000
 80076a8:	40140000 	.word	0x40140000
 80076ac:	9b02      	ldr	r3, [sp, #8]
 80076ae:	e780      	b.n	80075b2 <_dtoa_r+0x7b2>
 80076b0:	2300      	movs	r3, #0
 80076b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80076b4:	e782      	b.n	80075bc <_dtoa_r+0x7bc>
 80076b6:	d099      	beq.n	80075ec <_dtoa_r+0x7ec>
 80076b8:	9a08      	ldr	r2, [sp, #32]
 80076ba:	331c      	adds	r3, #28
 80076bc:	441a      	add	r2, r3
 80076be:	4498      	add	r8, r3
 80076c0:	441e      	add	r6, r3
 80076c2:	9208      	str	r2, [sp, #32]
 80076c4:	e792      	b.n	80075ec <_dtoa_r+0x7ec>
 80076c6:	4603      	mov	r3, r0
 80076c8:	e7f6      	b.n	80076b8 <_dtoa_r+0x8b8>
 80076ca:	9b07      	ldr	r3, [sp, #28]
 80076cc:	9704      	str	r7, [sp, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	dc20      	bgt.n	8007714 <_dtoa_r+0x914>
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	dd1e      	ble.n	8007718 <_dtoa_r+0x918>
 80076da:	9b00      	ldr	r3, [sp, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f47f aec0 	bne.w	8007462 <_dtoa_r+0x662>
 80076e2:	4621      	mov	r1, r4
 80076e4:	2205      	movs	r2, #5
 80076e6:	4658      	mov	r0, fp
 80076e8:	f000 f976 	bl	80079d8 <__multadd>
 80076ec:	4601      	mov	r1, r0
 80076ee:	4604      	mov	r4, r0
 80076f0:	4648      	mov	r0, r9
 80076f2:	f000 fb6f 	bl	8007dd4 <__mcmp>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	f77f aeb3 	ble.w	8007462 <_dtoa_r+0x662>
 80076fc:	4656      	mov	r6, sl
 80076fe:	2331      	movs	r3, #49	@ 0x31
 8007700:	f806 3b01 	strb.w	r3, [r6], #1
 8007704:	9b04      	ldr	r3, [sp, #16]
 8007706:	3301      	adds	r3, #1
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	e6ae      	b.n	800746a <_dtoa_r+0x66a>
 800770c:	9c07      	ldr	r4, [sp, #28]
 800770e:	9704      	str	r7, [sp, #16]
 8007710:	4625      	mov	r5, r4
 8007712:	e7f3      	b.n	80076fc <_dtoa_r+0x8fc>
 8007714:	9b07      	ldr	r3, [sp, #28]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 8101 	beq.w	8007922 <_dtoa_r+0xb22>
 8007720:	2e00      	cmp	r6, #0
 8007722:	dd05      	ble.n	8007730 <_dtoa_r+0x930>
 8007724:	4629      	mov	r1, r5
 8007726:	4632      	mov	r2, r6
 8007728:	4658      	mov	r0, fp
 800772a:	f000 fae7 	bl	8007cfc <__lshift>
 800772e:	4605      	mov	r5, r0
 8007730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	d059      	beq.n	80077ea <_dtoa_r+0x9ea>
 8007736:	6869      	ldr	r1, [r5, #4]
 8007738:	4658      	mov	r0, fp
 800773a:	f000 f91f 	bl	800797c <_Balloc>
 800773e:	4606      	mov	r6, r0
 8007740:	b920      	cbnz	r0, 800774c <_dtoa_r+0x94c>
 8007742:	4b83      	ldr	r3, [pc, #524]	@ (8007950 <_dtoa_r+0xb50>)
 8007744:	4602      	mov	r2, r0
 8007746:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800774a:	e480      	b.n	800704e <_dtoa_r+0x24e>
 800774c:	692a      	ldr	r2, [r5, #16]
 800774e:	3202      	adds	r2, #2
 8007750:	0092      	lsls	r2, r2, #2
 8007752:	f105 010c 	add.w	r1, r5, #12
 8007756:	300c      	adds	r0, #12
 8007758:	f7ff fa44 	bl	8006be4 <memcpy>
 800775c:	2201      	movs	r2, #1
 800775e:	4631      	mov	r1, r6
 8007760:	4658      	mov	r0, fp
 8007762:	f000 facb 	bl	8007cfc <__lshift>
 8007766:	f10a 0301 	add.w	r3, sl, #1
 800776a:	9307      	str	r3, [sp, #28]
 800776c:	9b00      	ldr	r3, [sp, #0]
 800776e:	4453      	add	r3, sl
 8007770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007772:	9b02      	ldr	r3, [sp, #8]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	462f      	mov	r7, r5
 800777a:	930a      	str	r3, [sp, #40]	@ 0x28
 800777c:	4605      	mov	r5, r0
 800777e:	9b07      	ldr	r3, [sp, #28]
 8007780:	4621      	mov	r1, r4
 8007782:	3b01      	subs	r3, #1
 8007784:	4648      	mov	r0, r9
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	f7ff fab0 	bl	8006cec <quorem>
 800778c:	4639      	mov	r1, r7
 800778e:	9002      	str	r0, [sp, #8]
 8007790:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007794:	4648      	mov	r0, r9
 8007796:	f000 fb1d 	bl	8007dd4 <__mcmp>
 800779a:	462a      	mov	r2, r5
 800779c:	9008      	str	r0, [sp, #32]
 800779e:	4621      	mov	r1, r4
 80077a0:	4658      	mov	r0, fp
 80077a2:	f000 fb33 	bl	8007e0c <__mdiff>
 80077a6:	68c2      	ldr	r2, [r0, #12]
 80077a8:	4606      	mov	r6, r0
 80077aa:	bb02      	cbnz	r2, 80077ee <_dtoa_r+0x9ee>
 80077ac:	4601      	mov	r1, r0
 80077ae:	4648      	mov	r0, r9
 80077b0:	f000 fb10 	bl	8007dd4 <__mcmp>
 80077b4:	4602      	mov	r2, r0
 80077b6:	4631      	mov	r1, r6
 80077b8:	4658      	mov	r0, fp
 80077ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80077bc:	f000 f903 	bl	80079c6 <_Bfree>
 80077c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077c4:	9e07      	ldr	r6, [sp, #28]
 80077c6:	ea43 0102 	orr.w	r1, r3, r2
 80077ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077cc:	4319      	orrs	r1, r3
 80077ce:	d110      	bne.n	80077f2 <_dtoa_r+0x9f2>
 80077d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077d4:	d029      	beq.n	800782a <_dtoa_r+0xa2a>
 80077d6:	9b08      	ldr	r3, [sp, #32]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dd02      	ble.n	80077e2 <_dtoa_r+0x9e2>
 80077dc:	9b02      	ldr	r3, [sp, #8]
 80077de:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077e2:	9b00      	ldr	r3, [sp, #0]
 80077e4:	f883 8000 	strb.w	r8, [r3]
 80077e8:	e640      	b.n	800746c <_dtoa_r+0x66c>
 80077ea:	4628      	mov	r0, r5
 80077ec:	e7bb      	b.n	8007766 <_dtoa_r+0x966>
 80077ee:	2201      	movs	r2, #1
 80077f0:	e7e1      	b.n	80077b6 <_dtoa_r+0x9b6>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	db04      	blt.n	8007802 <_dtoa_r+0xa02>
 80077f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077fa:	430b      	orrs	r3, r1
 80077fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077fe:	430b      	orrs	r3, r1
 8007800:	d120      	bne.n	8007844 <_dtoa_r+0xa44>
 8007802:	2a00      	cmp	r2, #0
 8007804:	dded      	ble.n	80077e2 <_dtoa_r+0x9e2>
 8007806:	4649      	mov	r1, r9
 8007808:	2201      	movs	r2, #1
 800780a:	4658      	mov	r0, fp
 800780c:	f000 fa76 	bl	8007cfc <__lshift>
 8007810:	4621      	mov	r1, r4
 8007812:	4681      	mov	r9, r0
 8007814:	f000 fade 	bl	8007dd4 <__mcmp>
 8007818:	2800      	cmp	r0, #0
 800781a:	dc03      	bgt.n	8007824 <_dtoa_r+0xa24>
 800781c:	d1e1      	bne.n	80077e2 <_dtoa_r+0x9e2>
 800781e:	f018 0f01 	tst.w	r8, #1
 8007822:	d0de      	beq.n	80077e2 <_dtoa_r+0x9e2>
 8007824:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007828:	d1d8      	bne.n	80077dc <_dtoa_r+0x9dc>
 800782a:	9a00      	ldr	r2, [sp, #0]
 800782c:	2339      	movs	r3, #57	@ 0x39
 800782e:	7013      	strb	r3, [r2, #0]
 8007830:	4633      	mov	r3, r6
 8007832:	461e      	mov	r6, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800783a:	2a39      	cmp	r2, #57	@ 0x39
 800783c:	d052      	beq.n	80078e4 <_dtoa_r+0xae4>
 800783e:	3201      	adds	r2, #1
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	e613      	b.n	800746c <_dtoa_r+0x66c>
 8007844:	2a00      	cmp	r2, #0
 8007846:	dd07      	ble.n	8007858 <_dtoa_r+0xa58>
 8007848:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800784c:	d0ed      	beq.n	800782a <_dtoa_r+0xa2a>
 800784e:	9a00      	ldr	r2, [sp, #0]
 8007850:	f108 0301 	add.w	r3, r8, #1
 8007854:	7013      	strb	r3, [r2, #0]
 8007856:	e609      	b.n	800746c <_dtoa_r+0x66c>
 8007858:	9b07      	ldr	r3, [sp, #28]
 800785a:	9a07      	ldr	r2, [sp, #28]
 800785c:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007860:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007862:	4293      	cmp	r3, r2
 8007864:	d028      	beq.n	80078b8 <_dtoa_r+0xab8>
 8007866:	4649      	mov	r1, r9
 8007868:	2300      	movs	r3, #0
 800786a:	220a      	movs	r2, #10
 800786c:	4658      	mov	r0, fp
 800786e:	f000 f8b3 	bl	80079d8 <__multadd>
 8007872:	42af      	cmp	r7, r5
 8007874:	4681      	mov	r9, r0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	f04f 020a 	mov.w	r2, #10
 800787e:	4639      	mov	r1, r7
 8007880:	4658      	mov	r0, fp
 8007882:	d107      	bne.n	8007894 <_dtoa_r+0xa94>
 8007884:	f000 f8a8 	bl	80079d8 <__multadd>
 8007888:	4607      	mov	r7, r0
 800788a:	4605      	mov	r5, r0
 800788c:	9b07      	ldr	r3, [sp, #28]
 800788e:	3301      	adds	r3, #1
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	e774      	b.n	800777e <_dtoa_r+0x97e>
 8007894:	f000 f8a0 	bl	80079d8 <__multadd>
 8007898:	4629      	mov	r1, r5
 800789a:	4607      	mov	r7, r0
 800789c:	2300      	movs	r3, #0
 800789e:	220a      	movs	r2, #10
 80078a0:	4658      	mov	r0, fp
 80078a2:	f000 f899 	bl	80079d8 <__multadd>
 80078a6:	4605      	mov	r5, r0
 80078a8:	e7f0      	b.n	800788c <_dtoa_r+0xa8c>
 80078aa:	9b00      	ldr	r3, [sp, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfcc      	ite	gt
 80078b0:	461e      	movgt	r6, r3
 80078b2:	2601      	movle	r6, #1
 80078b4:	4456      	add	r6, sl
 80078b6:	2700      	movs	r7, #0
 80078b8:	4649      	mov	r1, r9
 80078ba:	2201      	movs	r2, #1
 80078bc:	4658      	mov	r0, fp
 80078be:	f000 fa1d 	bl	8007cfc <__lshift>
 80078c2:	4621      	mov	r1, r4
 80078c4:	4681      	mov	r9, r0
 80078c6:	f000 fa85 	bl	8007dd4 <__mcmp>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	dcb0      	bgt.n	8007830 <_dtoa_r+0xa30>
 80078ce:	d102      	bne.n	80078d6 <_dtoa_r+0xad6>
 80078d0:	f018 0f01 	tst.w	r8, #1
 80078d4:	d1ac      	bne.n	8007830 <_dtoa_r+0xa30>
 80078d6:	4633      	mov	r3, r6
 80078d8:	461e      	mov	r6, r3
 80078da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078de:	2a30      	cmp	r2, #48	@ 0x30
 80078e0:	d0fa      	beq.n	80078d8 <_dtoa_r+0xad8>
 80078e2:	e5c3      	b.n	800746c <_dtoa_r+0x66c>
 80078e4:	459a      	cmp	sl, r3
 80078e6:	d1a4      	bne.n	8007832 <_dtoa_r+0xa32>
 80078e8:	9b04      	ldr	r3, [sp, #16]
 80078ea:	3301      	adds	r3, #1
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	2331      	movs	r3, #49	@ 0x31
 80078f0:	f88a 3000 	strb.w	r3, [sl]
 80078f4:	e5ba      	b.n	800746c <_dtoa_r+0x66c>
 80078f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007954 <_dtoa_r+0xb54>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f43f aab6 	beq.w	8006e6e <_dtoa_r+0x6e>
 8007902:	f10a 0308 	add.w	r3, sl, #8
 8007906:	f7ff bab0 	b.w	8006e6a <_dtoa_r+0x6a>
 800790a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800790c:	2b01      	cmp	r3, #1
 800790e:	f77f ae3a 	ble.w	8007586 <_dtoa_r+0x786>
 8007912:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007914:	930a      	str	r3, [sp, #40]	@ 0x28
 8007916:	2001      	movs	r0, #1
 8007918:	e658      	b.n	80075cc <_dtoa_r+0x7cc>
 800791a:	9b00      	ldr	r3, [sp, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f77f aed9 	ble.w	80076d4 <_dtoa_r+0x8d4>
 8007922:	4656      	mov	r6, sl
 8007924:	4621      	mov	r1, r4
 8007926:	4648      	mov	r0, r9
 8007928:	f7ff f9e0 	bl	8006cec <quorem>
 800792c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007930:	f806 8b01 	strb.w	r8, [r6], #1
 8007934:	9b00      	ldr	r3, [sp, #0]
 8007936:	eba6 020a 	sub.w	r2, r6, sl
 800793a:	4293      	cmp	r3, r2
 800793c:	ddb5      	ble.n	80078aa <_dtoa_r+0xaaa>
 800793e:	4649      	mov	r1, r9
 8007940:	2300      	movs	r3, #0
 8007942:	220a      	movs	r2, #10
 8007944:	4658      	mov	r0, fp
 8007946:	f000 f847 	bl	80079d8 <__multadd>
 800794a:	4681      	mov	r9, r0
 800794c:	e7ea      	b.n	8007924 <_dtoa_r+0xb24>
 800794e:	bf00      	nop
 8007950:	0800873f 	.word	0x0800873f
 8007954:	08008732 	.word	0x08008732

08007958 <__ascii_mbtowc>:
 8007958:	b082      	sub	sp, #8
 800795a:	b901      	cbnz	r1, 800795e <__ascii_mbtowc+0x6>
 800795c:	a901      	add	r1, sp, #4
 800795e:	b142      	cbz	r2, 8007972 <__ascii_mbtowc+0x1a>
 8007960:	b14b      	cbz	r3, 8007976 <__ascii_mbtowc+0x1e>
 8007962:	7813      	ldrb	r3, [r2, #0]
 8007964:	600b      	str	r3, [r1, #0]
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	1e10      	subs	r0, r2, #0
 800796a:	bf18      	it	ne
 800796c:	2001      	movne	r0, #1
 800796e:	b002      	add	sp, #8
 8007970:	4770      	bx	lr
 8007972:	4610      	mov	r0, r2
 8007974:	e7fb      	b.n	800796e <__ascii_mbtowc+0x16>
 8007976:	f06f 0001 	mvn.w	r0, #1
 800797a:	e7f8      	b.n	800796e <__ascii_mbtowc+0x16>

0800797c <_Balloc>:
 800797c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800797e:	b570      	push	{r4, r5, r6, lr}
 8007980:	4605      	mov	r5, r0
 8007982:	460c      	mov	r4, r1
 8007984:	b17b      	cbz	r3, 80079a6 <_Balloc+0x2a>
 8007986:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007988:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800798c:	b9a0      	cbnz	r0, 80079b8 <_Balloc+0x3c>
 800798e:	2101      	movs	r1, #1
 8007990:	fa01 f604 	lsl.w	r6, r1, r4
 8007994:	1d72      	adds	r2, r6, #5
 8007996:	0092      	lsls	r2, r2, #2
 8007998:	4628      	mov	r0, r5
 800799a:	f000 fddd 	bl	8008558 <_calloc_r>
 800799e:	b148      	cbz	r0, 80079b4 <_Balloc+0x38>
 80079a0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80079a4:	e00b      	b.n	80079be <_Balloc+0x42>
 80079a6:	2221      	movs	r2, #33	@ 0x21
 80079a8:	2104      	movs	r1, #4
 80079aa:	f000 fdd5 	bl	8008558 <_calloc_r>
 80079ae:	6468      	str	r0, [r5, #68]	@ 0x44
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1e8      	bne.n	8007986 <_Balloc+0xa>
 80079b4:	2000      	movs	r0, #0
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	6802      	ldr	r2, [r0, #0]
 80079ba:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80079be:	2300      	movs	r3, #0
 80079c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079c4:	e7f7      	b.n	80079b6 <_Balloc+0x3a>

080079c6 <_Bfree>:
 80079c6:	b131      	cbz	r1, 80079d6 <_Bfree+0x10>
 80079c8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80079ca:	684a      	ldr	r2, [r1, #4]
 80079cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80079d0:	6008      	str	r0, [r1, #0]
 80079d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80079d6:	4770      	bx	lr

080079d8 <__multadd>:
 80079d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079dc:	690d      	ldr	r5, [r1, #16]
 80079de:	4607      	mov	r7, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	461e      	mov	r6, r3
 80079e4:	f101 0c14 	add.w	ip, r1, #20
 80079e8:	2000      	movs	r0, #0
 80079ea:	f8dc 3000 	ldr.w	r3, [ip]
 80079ee:	b299      	uxth	r1, r3
 80079f0:	fb02 6101 	mla	r1, r2, r1, r6
 80079f4:	0c1e      	lsrs	r6, r3, #16
 80079f6:	0c0b      	lsrs	r3, r1, #16
 80079f8:	fb02 3306 	mla	r3, r2, r6, r3
 80079fc:	b289      	uxth	r1, r1
 80079fe:	3001      	adds	r0, #1
 8007a00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a04:	4285      	cmp	r5, r0
 8007a06:	f84c 1b04 	str.w	r1, [ip], #4
 8007a0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a0e:	dcec      	bgt.n	80079ea <__multadd+0x12>
 8007a10:	b30e      	cbz	r6, 8007a56 <__multadd+0x7e>
 8007a12:	68a3      	ldr	r3, [r4, #8]
 8007a14:	42ab      	cmp	r3, r5
 8007a16:	dc19      	bgt.n	8007a4c <__multadd+0x74>
 8007a18:	6861      	ldr	r1, [r4, #4]
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	3101      	adds	r1, #1
 8007a1e:	f7ff ffad 	bl	800797c <_Balloc>
 8007a22:	4680      	mov	r8, r0
 8007a24:	b928      	cbnz	r0, 8007a32 <__multadd+0x5a>
 8007a26:	4602      	mov	r2, r0
 8007a28:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <__multadd+0x84>)
 8007a2a:	480d      	ldr	r0, [pc, #52]	@ (8007a60 <__multadd+0x88>)
 8007a2c:	21ba      	movs	r1, #186	@ 0xba
 8007a2e:	f000 fd75 	bl	800851c <__assert_func>
 8007a32:	6922      	ldr	r2, [r4, #16]
 8007a34:	3202      	adds	r2, #2
 8007a36:	f104 010c 	add.w	r1, r4, #12
 8007a3a:	0092      	lsls	r2, r2, #2
 8007a3c:	300c      	adds	r0, #12
 8007a3e:	f7ff f8d1 	bl	8006be4 <memcpy>
 8007a42:	4621      	mov	r1, r4
 8007a44:	4638      	mov	r0, r7
 8007a46:	f7ff ffbe 	bl	80079c6 <_Bfree>
 8007a4a:	4644      	mov	r4, r8
 8007a4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a50:	3501      	adds	r5, #1
 8007a52:	615e      	str	r6, [r3, #20]
 8007a54:	6125      	str	r5, [r4, #16]
 8007a56:	4620      	mov	r0, r4
 8007a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a5c:	0800873f 	.word	0x0800873f
 8007a60:	080087a8 	.word	0x080087a8

08007a64 <__hi0bits>:
 8007a64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a68:	4603      	mov	r3, r0
 8007a6a:	bf36      	itet	cc
 8007a6c:	0403      	lslcc	r3, r0, #16
 8007a6e:	2000      	movcs	r0, #0
 8007a70:	2010      	movcc	r0, #16
 8007a72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a76:	bf3c      	itt	cc
 8007a78:	021b      	lslcc	r3, r3, #8
 8007a7a:	3008      	addcc	r0, #8
 8007a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a80:	bf3c      	itt	cc
 8007a82:	011b      	lslcc	r3, r3, #4
 8007a84:	3004      	addcc	r0, #4
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a8a:	bf3c      	itt	cc
 8007a8c:	009b      	lslcc	r3, r3, #2
 8007a8e:	3002      	addcc	r0, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	db05      	blt.n	8007aa0 <__hi0bits+0x3c>
 8007a94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a98:	f100 0001 	add.w	r0, r0, #1
 8007a9c:	bf08      	it	eq
 8007a9e:	2020      	moveq	r0, #32
 8007aa0:	4770      	bx	lr

08007aa2 <__lo0bits>:
 8007aa2:	6803      	ldr	r3, [r0, #0]
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	f013 0007 	ands.w	r0, r3, #7
 8007aaa:	d00b      	beq.n	8007ac4 <__lo0bits+0x22>
 8007aac:	07d9      	lsls	r1, r3, #31
 8007aae:	d421      	bmi.n	8007af4 <__lo0bits+0x52>
 8007ab0:	0798      	lsls	r0, r3, #30
 8007ab2:	bf49      	itett	mi
 8007ab4:	085b      	lsrmi	r3, r3, #1
 8007ab6:	089b      	lsrpl	r3, r3, #2
 8007ab8:	2001      	movmi	r0, #1
 8007aba:	6013      	strmi	r3, [r2, #0]
 8007abc:	bf5c      	itt	pl
 8007abe:	6013      	strpl	r3, [r2, #0]
 8007ac0:	2002      	movpl	r0, #2
 8007ac2:	4770      	bx	lr
 8007ac4:	b299      	uxth	r1, r3
 8007ac6:	b909      	cbnz	r1, 8007acc <__lo0bits+0x2a>
 8007ac8:	0c1b      	lsrs	r3, r3, #16
 8007aca:	2010      	movs	r0, #16
 8007acc:	b2d9      	uxtb	r1, r3
 8007ace:	b909      	cbnz	r1, 8007ad4 <__lo0bits+0x32>
 8007ad0:	3008      	adds	r0, #8
 8007ad2:	0a1b      	lsrs	r3, r3, #8
 8007ad4:	0719      	lsls	r1, r3, #28
 8007ad6:	bf04      	itt	eq
 8007ad8:	091b      	lsreq	r3, r3, #4
 8007ada:	3004      	addeq	r0, #4
 8007adc:	0799      	lsls	r1, r3, #30
 8007ade:	bf04      	itt	eq
 8007ae0:	089b      	lsreq	r3, r3, #2
 8007ae2:	3002      	addeq	r0, #2
 8007ae4:	07d9      	lsls	r1, r3, #31
 8007ae6:	d403      	bmi.n	8007af0 <__lo0bits+0x4e>
 8007ae8:	085b      	lsrs	r3, r3, #1
 8007aea:	f100 0001 	add.w	r0, r0, #1
 8007aee:	d003      	beq.n	8007af8 <__lo0bits+0x56>
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	4770      	bx	lr
 8007af4:	2000      	movs	r0, #0
 8007af6:	4770      	bx	lr
 8007af8:	2020      	movs	r0, #32
 8007afa:	4770      	bx	lr

08007afc <__i2b>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	460c      	mov	r4, r1
 8007b00:	2101      	movs	r1, #1
 8007b02:	f7ff ff3b 	bl	800797c <_Balloc>
 8007b06:	4602      	mov	r2, r0
 8007b08:	b928      	cbnz	r0, 8007b16 <__i2b+0x1a>
 8007b0a:	4b05      	ldr	r3, [pc, #20]	@ (8007b20 <__i2b+0x24>)
 8007b0c:	4805      	ldr	r0, [pc, #20]	@ (8007b24 <__i2b+0x28>)
 8007b0e:	f240 1145 	movw	r1, #325	@ 0x145
 8007b12:	f000 fd03 	bl	800851c <__assert_func>
 8007b16:	2301      	movs	r3, #1
 8007b18:	6144      	str	r4, [r0, #20]
 8007b1a:	6103      	str	r3, [r0, #16]
 8007b1c:	bd10      	pop	{r4, pc}
 8007b1e:	bf00      	nop
 8007b20:	0800873f 	.word	0x0800873f
 8007b24:	080087a8 	.word	0x080087a8

08007b28 <__multiply>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	690a      	ldr	r2, [r1, #16]
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	bfa8      	it	ge
 8007b36:	4623      	movge	r3, r4
 8007b38:	460f      	mov	r7, r1
 8007b3a:	bfa4      	itt	ge
 8007b3c:	460c      	movge	r4, r1
 8007b3e:	461f      	movge	r7, r3
 8007b40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007b44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007b48:	68a3      	ldr	r3, [r4, #8]
 8007b4a:	6861      	ldr	r1, [r4, #4]
 8007b4c:	eb0a 0609 	add.w	r6, sl, r9
 8007b50:	42b3      	cmp	r3, r6
 8007b52:	b085      	sub	sp, #20
 8007b54:	bfb8      	it	lt
 8007b56:	3101      	addlt	r1, #1
 8007b58:	f7ff ff10 	bl	800797c <_Balloc>
 8007b5c:	b930      	cbnz	r0, 8007b6c <__multiply+0x44>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	4b44      	ldr	r3, [pc, #272]	@ (8007c74 <__multiply+0x14c>)
 8007b62:	4845      	ldr	r0, [pc, #276]	@ (8007c78 <__multiply+0x150>)
 8007b64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b68:	f000 fcd8 	bl	800851c <__assert_func>
 8007b6c:	f100 0514 	add.w	r5, r0, #20
 8007b70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b74:	462b      	mov	r3, r5
 8007b76:	2200      	movs	r2, #0
 8007b78:	4543      	cmp	r3, r8
 8007b7a:	d321      	bcc.n	8007bc0 <__multiply+0x98>
 8007b7c:	f107 0114 	add.w	r1, r7, #20
 8007b80:	f104 0214 	add.w	r2, r4, #20
 8007b84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b8c:	9302      	str	r3, [sp, #8]
 8007b8e:	1b13      	subs	r3, r2, r4
 8007b90:	3b15      	subs	r3, #21
 8007b92:	f023 0303 	bic.w	r3, r3, #3
 8007b96:	3304      	adds	r3, #4
 8007b98:	f104 0715 	add.w	r7, r4, #21
 8007b9c:	42ba      	cmp	r2, r7
 8007b9e:	bf38      	it	cc
 8007ba0:	2304      	movcc	r3, #4
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	9b02      	ldr	r3, [sp, #8]
 8007ba6:	9103      	str	r1, [sp, #12]
 8007ba8:	428b      	cmp	r3, r1
 8007baa:	d80c      	bhi.n	8007bc6 <__multiply+0x9e>
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	dd03      	ble.n	8007bb8 <__multiply+0x90>
 8007bb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d05b      	beq.n	8007c70 <__multiply+0x148>
 8007bb8:	6106      	str	r6, [r0, #16]
 8007bba:	b005      	add	sp, #20
 8007bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc0:	f843 2b04 	str.w	r2, [r3], #4
 8007bc4:	e7d8      	b.n	8007b78 <__multiply+0x50>
 8007bc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007bca:	f1ba 0f00 	cmp.w	sl, #0
 8007bce:	d024      	beq.n	8007c1a <__multiply+0xf2>
 8007bd0:	f104 0e14 	add.w	lr, r4, #20
 8007bd4:	46a9      	mov	r9, r5
 8007bd6:	f04f 0c00 	mov.w	ip, #0
 8007bda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bde:	f8d9 3000 	ldr.w	r3, [r9]
 8007be2:	fa1f fb87 	uxth.w	fp, r7
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007bec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007bf0:	f8d9 7000 	ldr.w	r7, [r9]
 8007bf4:	4463      	add	r3, ip
 8007bf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bfa:	fb0a c70b 	mla	r7, sl, fp, ip
 8007bfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c08:	4572      	cmp	r2, lr
 8007c0a:	f849 3b04 	str.w	r3, [r9], #4
 8007c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c12:	d8e2      	bhi.n	8007bda <__multiply+0xb2>
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	f845 c003 	str.w	ip, [r5, r3]
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c20:	3104      	adds	r1, #4
 8007c22:	f1b9 0f00 	cmp.w	r9, #0
 8007c26:	d021      	beq.n	8007c6c <__multiply+0x144>
 8007c28:	682b      	ldr	r3, [r5, #0]
 8007c2a:	f104 0c14 	add.w	ip, r4, #20
 8007c2e:	46ae      	mov	lr, r5
 8007c30:	f04f 0a00 	mov.w	sl, #0
 8007c34:	f8bc b000 	ldrh.w	fp, [ip]
 8007c38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007c3c:	fb09 770b 	mla	r7, r9, fp, r7
 8007c40:	4457      	add	r7, sl
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c48:	f84e 3b04 	str.w	r3, [lr], #4
 8007c4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c54:	f8be 3000 	ldrh.w	r3, [lr]
 8007c58:	fb09 330a 	mla	r3, r9, sl, r3
 8007c5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c60:	4562      	cmp	r2, ip
 8007c62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c66:	d8e5      	bhi.n	8007c34 <__multiply+0x10c>
 8007c68:	9f01      	ldr	r7, [sp, #4]
 8007c6a:	51eb      	str	r3, [r5, r7]
 8007c6c:	3504      	adds	r5, #4
 8007c6e:	e799      	b.n	8007ba4 <__multiply+0x7c>
 8007c70:	3e01      	subs	r6, #1
 8007c72:	e79b      	b.n	8007bac <__multiply+0x84>
 8007c74:	0800873f 	.word	0x0800873f
 8007c78:	080087a8 	.word	0x080087a8

08007c7c <__pow5mult>:
 8007c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c80:	4615      	mov	r5, r2
 8007c82:	f012 0203 	ands.w	r2, r2, #3
 8007c86:	4607      	mov	r7, r0
 8007c88:	460e      	mov	r6, r1
 8007c8a:	d007      	beq.n	8007c9c <__pow5mult+0x20>
 8007c8c:	4c1a      	ldr	r4, [pc, #104]	@ (8007cf8 <__pow5mult+0x7c>)
 8007c8e:	3a01      	subs	r2, #1
 8007c90:	2300      	movs	r3, #0
 8007c92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c96:	f7ff fe9f 	bl	80079d8 <__multadd>
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	10ad      	asrs	r5, r5, #2
 8007c9e:	d027      	beq.n	8007cf0 <__pow5mult+0x74>
 8007ca0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8007ca2:	b944      	cbnz	r4, 8007cb6 <__pow5mult+0x3a>
 8007ca4:	f240 2171 	movw	r1, #625	@ 0x271
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7ff ff27 	bl	8007afc <__i2b>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6438      	str	r0, [r7, #64]	@ 0x40
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	6003      	str	r3, [r0, #0]
 8007cb6:	f04f 0900 	mov.w	r9, #0
 8007cba:	07eb      	lsls	r3, r5, #31
 8007cbc:	d50a      	bpl.n	8007cd4 <__pow5mult+0x58>
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	f7ff ff30 	bl	8007b28 <__multiply>
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4680      	mov	r8, r0
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff fe7a 	bl	80079c6 <_Bfree>
 8007cd2:	4646      	mov	r6, r8
 8007cd4:	106d      	asrs	r5, r5, #1
 8007cd6:	d00b      	beq.n	8007cf0 <__pow5mult+0x74>
 8007cd8:	6820      	ldr	r0, [r4, #0]
 8007cda:	b938      	cbnz	r0, 8007cec <__pow5mult+0x70>
 8007cdc:	4622      	mov	r2, r4
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f7ff ff21 	bl	8007b28 <__multiply>
 8007ce6:	6020      	str	r0, [r4, #0]
 8007ce8:	f8c0 9000 	str.w	r9, [r0]
 8007cec:	4604      	mov	r4, r0
 8007cee:	e7e4      	b.n	8007cba <__pow5mult+0x3e>
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cf6:	bf00      	nop
 8007cf8:	08008804 	.word	0x08008804

08007cfc <__lshift>:
 8007cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	460c      	mov	r4, r1
 8007d02:	6849      	ldr	r1, [r1, #4]
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	4607      	mov	r7, r0
 8007d0e:	4691      	mov	r9, r2
 8007d10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d14:	f108 0601 	add.w	r6, r8, #1
 8007d18:	42b3      	cmp	r3, r6
 8007d1a:	db0b      	blt.n	8007d34 <__lshift+0x38>
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	f7ff fe2d 	bl	800797c <_Balloc>
 8007d22:	4605      	mov	r5, r0
 8007d24:	b948      	cbnz	r0, 8007d3a <__lshift+0x3e>
 8007d26:	4602      	mov	r2, r0
 8007d28:	4b28      	ldr	r3, [pc, #160]	@ (8007dcc <__lshift+0xd0>)
 8007d2a:	4829      	ldr	r0, [pc, #164]	@ (8007dd0 <__lshift+0xd4>)
 8007d2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d30:	f000 fbf4 	bl	800851c <__assert_func>
 8007d34:	3101      	adds	r1, #1
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	e7ee      	b.n	8007d18 <__lshift+0x1c>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f100 0114 	add.w	r1, r0, #20
 8007d40:	f100 0210 	add.w	r2, r0, #16
 8007d44:	4618      	mov	r0, r3
 8007d46:	4553      	cmp	r3, sl
 8007d48:	db33      	blt.n	8007db2 <__lshift+0xb6>
 8007d4a:	6920      	ldr	r0, [r4, #16]
 8007d4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d50:	f104 0314 	add.w	r3, r4, #20
 8007d54:	f019 091f 	ands.w	r9, r9, #31
 8007d58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d60:	d02b      	beq.n	8007dba <__lshift+0xbe>
 8007d62:	f1c9 0e20 	rsb	lr, r9, #32
 8007d66:	468a      	mov	sl, r1
 8007d68:	2200      	movs	r2, #0
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	fa00 f009 	lsl.w	r0, r0, r9
 8007d70:	4310      	orrs	r0, r2
 8007d72:	f84a 0b04 	str.w	r0, [sl], #4
 8007d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7a:	459c      	cmp	ip, r3
 8007d7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d80:	d8f3      	bhi.n	8007d6a <__lshift+0x6e>
 8007d82:	ebac 0304 	sub.w	r3, ip, r4
 8007d86:	3b15      	subs	r3, #21
 8007d88:	f023 0303 	bic.w	r3, r3, #3
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	f104 0015 	add.w	r0, r4, #21
 8007d92:	4584      	cmp	ip, r0
 8007d94:	bf38      	it	cc
 8007d96:	2304      	movcc	r3, #4
 8007d98:	50ca      	str	r2, [r1, r3]
 8007d9a:	b10a      	cbz	r2, 8007da0 <__lshift+0xa4>
 8007d9c:	f108 0602 	add.w	r6, r8, #2
 8007da0:	3e01      	subs	r6, #1
 8007da2:	4638      	mov	r0, r7
 8007da4:	612e      	str	r6, [r5, #16]
 8007da6:	4621      	mov	r1, r4
 8007da8:	f7ff fe0d 	bl	80079c6 <_Bfree>
 8007dac:	4628      	mov	r0, r5
 8007dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007db6:	3301      	adds	r3, #1
 8007db8:	e7c5      	b.n	8007d46 <__lshift+0x4a>
 8007dba:	3904      	subs	r1, #4
 8007dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dc4:	459c      	cmp	ip, r3
 8007dc6:	d8f9      	bhi.n	8007dbc <__lshift+0xc0>
 8007dc8:	e7ea      	b.n	8007da0 <__lshift+0xa4>
 8007dca:	bf00      	nop
 8007dcc:	0800873f 	.word	0x0800873f
 8007dd0:	080087a8 	.word	0x080087a8

08007dd4 <__mcmp>:
 8007dd4:	690a      	ldr	r2, [r1, #16]
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6900      	ldr	r0, [r0, #16]
 8007dda:	1a80      	subs	r0, r0, r2
 8007ddc:	b530      	push	{r4, r5, lr}
 8007dde:	d10e      	bne.n	8007dfe <__mcmp+0x2a>
 8007de0:	3314      	adds	r3, #20
 8007de2:	3114      	adds	r1, #20
 8007de4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007de8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007dec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007df0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007df4:	4295      	cmp	r5, r2
 8007df6:	d003      	beq.n	8007e00 <__mcmp+0x2c>
 8007df8:	d205      	bcs.n	8007e06 <__mcmp+0x32>
 8007dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfe:	bd30      	pop	{r4, r5, pc}
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	d3f3      	bcc.n	8007dec <__mcmp+0x18>
 8007e04:	e7fb      	b.n	8007dfe <__mcmp+0x2a>
 8007e06:	2001      	movs	r0, #1
 8007e08:	e7f9      	b.n	8007dfe <__mcmp+0x2a>
	...

08007e0c <__mdiff>:
 8007e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	4689      	mov	r9, r1
 8007e12:	4606      	mov	r6, r0
 8007e14:	4611      	mov	r1, r2
 8007e16:	4648      	mov	r0, r9
 8007e18:	4614      	mov	r4, r2
 8007e1a:	f7ff ffdb 	bl	8007dd4 <__mcmp>
 8007e1e:	1e05      	subs	r5, r0, #0
 8007e20:	d112      	bne.n	8007e48 <__mdiff+0x3c>
 8007e22:	4629      	mov	r1, r5
 8007e24:	4630      	mov	r0, r6
 8007e26:	f7ff fda9 	bl	800797c <_Balloc>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	b928      	cbnz	r0, 8007e3a <__mdiff+0x2e>
 8007e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f2c <__mdiff+0x120>)
 8007e30:	f240 2137 	movw	r1, #567	@ 0x237
 8007e34:	483e      	ldr	r0, [pc, #248]	@ (8007f30 <__mdiff+0x124>)
 8007e36:	f000 fb71 	bl	800851c <__assert_func>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e40:	4610      	mov	r0, r2
 8007e42:	b003      	add	sp, #12
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	bfbc      	itt	lt
 8007e4a:	464b      	movlt	r3, r9
 8007e4c:	46a1      	movlt	r9, r4
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e54:	bfba      	itte	lt
 8007e56:	461c      	movlt	r4, r3
 8007e58:	2501      	movlt	r5, #1
 8007e5a:	2500      	movge	r5, #0
 8007e5c:	f7ff fd8e 	bl	800797c <_Balloc>
 8007e60:	4602      	mov	r2, r0
 8007e62:	b918      	cbnz	r0, 8007e6c <__mdiff+0x60>
 8007e64:	4b31      	ldr	r3, [pc, #196]	@ (8007f2c <__mdiff+0x120>)
 8007e66:	f240 2145 	movw	r1, #581	@ 0x245
 8007e6a:	e7e3      	b.n	8007e34 <__mdiff+0x28>
 8007e6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e70:	6926      	ldr	r6, [r4, #16]
 8007e72:	60c5      	str	r5, [r0, #12]
 8007e74:	f109 0310 	add.w	r3, r9, #16
 8007e78:	f109 0514 	add.w	r5, r9, #20
 8007e7c:	f104 0e14 	add.w	lr, r4, #20
 8007e80:	f100 0b14 	add.w	fp, r0, #20
 8007e84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	46d9      	mov	r9, fp
 8007e90:	f04f 0c00 	mov.w	ip, #0
 8007e94:	9b01      	ldr	r3, [sp, #4]
 8007e96:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	fa1f f38a 	uxth.w	r3, sl
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	b283      	uxth	r3, r0
 8007ea8:	1acb      	subs	r3, r1, r3
 8007eaa:	0c00      	lsrs	r0, r0, #16
 8007eac:	4463      	add	r3, ip
 8007eae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007eb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ebc:	4576      	cmp	r6, lr
 8007ebe:	f849 3b04 	str.w	r3, [r9], #4
 8007ec2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ec6:	d8e5      	bhi.n	8007e94 <__mdiff+0x88>
 8007ec8:	1b33      	subs	r3, r6, r4
 8007eca:	3b15      	subs	r3, #21
 8007ecc:	f023 0303 	bic.w	r3, r3, #3
 8007ed0:	3415      	adds	r4, #21
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	42a6      	cmp	r6, r4
 8007ed6:	bf38      	it	cc
 8007ed8:	2304      	movcc	r3, #4
 8007eda:	441d      	add	r5, r3
 8007edc:	445b      	add	r3, fp
 8007ede:	461e      	mov	r6, r3
 8007ee0:	462c      	mov	r4, r5
 8007ee2:	4544      	cmp	r4, r8
 8007ee4:	d30e      	bcc.n	8007f04 <__mdiff+0xf8>
 8007ee6:	f108 0103 	add.w	r1, r8, #3
 8007eea:	1b49      	subs	r1, r1, r5
 8007eec:	f021 0103 	bic.w	r1, r1, #3
 8007ef0:	3d03      	subs	r5, #3
 8007ef2:	45a8      	cmp	r8, r5
 8007ef4:	bf38      	it	cc
 8007ef6:	2100      	movcc	r1, #0
 8007ef8:	440b      	add	r3, r1
 8007efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007efe:	b191      	cbz	r1, 8007f26 <__mdiff+0x11a>
 8007f00:	6117      	str	r7, [r2, #16]
 8007f02:	e79d      	b.n	8007e40 <__mdiff+0x34>
 8007f04:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f08:	46e6      	mov	lr, ip
 8007f0a:	0c08      	lsrs	r0, r1, #16
 8007f0c:	fa1c fc81 	uxtah	ip, ip, r1
 8007f10:	4471      	add	r1, lr
 8007f12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f16:	b289      	uxth	r1, r1
 8007f18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f1c:	f846 1b04 	str.w	r1, [r6], #4
 8007f20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f24:	e7dd      	b.n	8007ee2 <__mdiff+0xd6>
 8007f26:	3f01      	subs	r7, #1
 8007f28:	e7e7      	b.n	8007efa <__mdiff+0xee>
 8007f2a:	bf00      	nop
 8007f2c:	0800873f 	.word	0x0800873f
 8007f30:	080087a8 	.word	0x080087a8

08007f34 <__d2b>:
 8007f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f38:	460f      	mov	r7, r1
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	ec59 8b10 	vmov	r8, r9, d0
 8007f40:	4616      	mov	r6, r2
 8007f42:	f7ff fd1b 	bl	800797c <_Balloc>
 8007f46:	4604      	mov	r4, r0
 8007f48:	b930      	cbnz	r0, 8007f58 <__d2b+0x24>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	4b23      	ldr	r3, [pc, #140]	@ (8007fdc <__d2b+0xa8>)
 8007f4e:	4824      	ldr	r0, [pc, #144]	@ (8007fe0 <__d2b+0xac>)
 8007f50:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f54:	f000 fae2 	bl	800851c <__assert_func>
 8007f58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f60:	b10d      	cbz	r5, 8007f66 <__d2b+0x32>
 8007f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	f1b8 0300 	subs.w	r3, r8, #0
 8007f6c:	d023      	beq.n	8007fb6 <__d2b+0x82>
 8007f6e:	4668      	mov	r0, sp
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	f7ff fd96 	bl	8007aa2 <__lo0bits>
 8007f76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f7a:	b1d0      	cbz	r0, 8007fb2 <__d2b+0x7e>
 8007f7c:	f1c0 0320 	rsb	r3, r0, #32
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	430b      	orrs	r3, r1
 8007f86:	40c2      	lsrs	r2, r0
 8007f88:	6163      	str	r3, [r4, #20]
 8007f8a:	9201      	str	r2, [sp, #4]
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	61a3      	str	r3, [r4, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bf0c      	ite	eq
 8007f94:	2201      	moveq	r2, #1
 8007f96:	2202      	movne	r2, #2
 8007f98:	6122      	str	r2, [r4, #16]
 8007f9a:	b1a5      	cbz	r5, 8007fc6 <__d2b+0x92>
 8007f9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fa0:	4405      	add	r5, r0
 8007fa2:	603d      	str	r5, [r7, #0]
 8007fa4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fa8:	6030      	str	r0, [r6, #0]
 8007faa:	4620      	mov	r0, r4
 8007fac:	b003      	add	sp, #12
 8007fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb2:	6161      	str	r1, [r4, #20]
 8007fb4:	e7ea      	b.n	8007f8c <__d2b+0x58>
 8007fb6:	a801      	add	r0, sp, #4
 8007fb8:	f7ff fd73 	bl	8007aa2 <__lo0bits>
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	6163      	str	r3, [r4, #20]
 8007fc0:	3020      	adds	r0, #32
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	e7e8      	b.n	8007f98 <__d2b+0x64>
 8007fc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fce:	6038      	str	r0, [r7, #0]
 8007fd0:	6918      	ldr	r0, [r3, #16]
 8007fd2:	f7ff fd47 	bl	8007a64 <__hi0bits>
 8007fd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fda:	e7e5      	b.n	8007fa8 <__d2b+0x74>
 8007fdc:	0800873f 	.word	0x0800873f
 8007fe0:	080087a8 	.word	0x080087a8

08007fe4 <_realloc_r>:
 8007fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	4682      	mov	sl, r0
 8007fea:	4693      	mov	fp, r2
 8007fec:	460c      	mov	r4, r1
 8007fee:	b929      	cbnz	r1, 8007ffc <_realloc_r+0x18>
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	b003      	add	sp, #12
 8007ff4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff8:	f7fc b8ce 	b.w	8004198 <_malloc_r>
 8007ffc:	f7fc fb06 	bl	800460c <__malloc_lock>
 8008000:	f10b 080b 	add.w	r8, fp, #11
 8008004:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8008008:	f1b8 0f16 	cmp.w	r8, #22
 800800c:	f1a4 0908 	sub.w	r9, r4, #8
 8008010:	f025 0603 	bic.w	r6, r5, #3
 8008014:	d908      	bls.n	8008028 <_realloc_r+0x44>
 8008016:	f038 0807 	bics.w	r8, r8, #7
 800801a:	d507      	bpl.n	800802c <_realloc_r+0x48>
 800801c:	230c      	movs	r3, #12
 800801e:	f8ca 3000 	str.w	r3, [sl]
 8008022:	f04f 0b00 	mov.w	fp, #0
 8008026:	e032      	b.n	800808e <_realloc_r+0xaa>
 8008028:	f04f 0810 	mov.w	r8, #16
 800802c:	45c3      	cmp	fp, r8
 800802e:	d8f5      	bhi.n	800801c <_realloc_r+0x38>
 8008030:	4546      	cmp	r6, r8
 8008032:	f280 8174 	bge.w	800831e <_realloc_r+0x33a>
 8008036:	4b9e      	ldr	r3, [pc, #632]	@ (80082b0 <_realloc_r+0x2cc>)
 8008038:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800803c:	eb09 0106 	add.w	r1, r9, r6
 8008040:	458c      	cmp	ip, r1
 8008042:	6848      	ldr	r0, [r1, #4]
 8008044:	d005      	beq.n	8008052 <_realloc_r+0x6e>
 8008046:	f020 0201 	bic.w	r2, r0, #1
 800804a:	440a      	add	r2, r1
 800804c:	6852      	ldr	r2, [r2, #4]
 800804e:	07d7      	lsls	r7, r2, #31
 8008050:	d449      	bmi.n	80080e6 <_realloc_r+0x102>
 8008052:	f020 0003 	bic.w	r0, r0, #3
 8008056:	458c      	cmp	ip, r1
 8008058:	eb06 0700 	add.w	r7, r6, r0
 800805c:	d11b      	bne.n	8008096 <_realloc_r+0xb2>
 800805e:	f108 0210 	add.w	r2, r8, #16
 8008062:	42ba      	cmp	r2, r7
 8008064:	dc41      	bgt.n	80080ea <_realloc_r+0x106>
 8008066:	eb09 0208 	add.w	r2, r9, r8
 800806a:	eba7 0708 	sub.w	r7, r7, r8
 800806e:	f047 0701 	orr.w	r7, r7, #1
 8008072:	609a      	str	r2, [r3, #8]
 8008074:	6057      	str	r7, [r2, #4]
 8008076:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	ea43 0308 	orr.w	r3, r3, r8
 8008082:	f844 3c04 	str.w	r3, [r4, #-4]
 8008086:	4650      	mov	r0, sl
 8008088:	f7fc fac6 	bl	8004618 <__malloc_unlock>
 800808c:	46a3      	mov	fp, r4
 800808e:	4658      	mov	r0, fp
 8008090:	b003      	add	sp, #12
 8008092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008096:	45b8      	cmp	r8, r7
 8008098:	dc27      	bgt.n	80080ea <_realloc_r+0x106>
 800809a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800809e:	60d3      	str	r3, [r2, #12]
 80080a0:	609a      	str	r2, [r3, #8]
 80080a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80080a6:	eba7 0008 	sub.w	r0, r7, r8
 80080aa:	280f      	cmp	r0, #15
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	eb09 0207 	add.w	r2, r9, r7
 80080b4:	f240 8135 	bls.w	8008322 <_realloc_r+0x33e>
 80080b8:	eb09 0108 	add.w	r1, r9, r8
 80080bc:	ea48 0303 	orr.w	r3, r8, r3
 80080c0:	f040 0001 	orr.w	r0, r0, #1
 80080c4:	f8c9 3004 	str.w	r3, [r9, #4]
 80080c8:	6048      	str	r0, [r1, #4]
 80080ca:	6853      	ldr	r3, [r2, #4]
 80080cc:	f043 0301 	orr.w	r3, r3, #1
 80080d0:	6053      	str	r3, [r2, #4]
 80080d2:	3108      	adds	r1, #8
 80080d4:	4650      	mov	r0, sl
 80080d6:	f7fb ff9f 	bl	8004018 <_free_r>
 80080da:	4650      	mov	r0, sl
 80080dc:	f7fc fa9c 	bl	8004618 <__malloc_unlock>
 80080e0:	f109 0b08 	add.w	fp, r9, #8
 80080e4:	e7d3      	b.n	800808e <_realloc_r+0xaa>
 80080e6:	2000      	movs	r0, #0
 80080e8:	4601      	mov	r1, r0
 80080ea:	07ea      	lsls	r2, r5, #31
 80080ec:	f100 80c7 	bmi.w	800827e <_realloc_r+0x29a>
 80080f0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80080f4:	eba9 0505 	sub.w	r5, r9, r5
 80080f8:	686a      	ldr	r2, [r5, #4]
 80080fa:	f022 0203 	bic.w	r2, r2, #3
 80080fe:	4432      	add	r2, r6
 8008100:	9201      	str	r2, [sp, #4]
 8008102:	2900      	cmp	r1, #0
 8008104:	f000 8086 	beq.w	8008214 <_realloc_r+0x230>
 8008108:	458c      	cmp	ip, r1
 800810a:	eb00 0702 	add.w	r7, r0, r2
 800810e:	d149      	bne.n	80081a4 <_realloc_r+0x1c0>
 8008110:	f108 0210 	add.w	r2, r8, #16
 8008114:	42ba      	cmp	r2, r7
 8008116:	dc7d      	bgt.n	8008214 <_realloc_r+0x230>
 8008118:	46ab      	mov	fp, r5
 800811a:	68ea      	ldr	r2, [r5, #12]
 800811c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8008120:	60ca      	str	r2, [r1, #12]
 8008122:	6091      	str	r1, [r2, #8]
 8008124:	1f32      	subs	r2, r6, #4
 8008126:	2a24      	cmp	r2, #36	@ 0x24
 8008128:	d836      	bhi.n	8008198 <_realloc_r+0x1b4>
 800812a:	2a13      	cmp	r2, #19
 800812c:	d932      	bls.n	8008194 <_realloc_r+0x1b0>
 800812e:	6821      	ldr	r1, [r4, #0]
 8008130:	60a9      	str	r1, [r5, #8]
 8008132:	6861      	ldr	r1, [r4, #4]
 8008134:	60e9      	str	r1, [r5, #12]
 8008136:	2a1b      	cmp	r2, #27
 8008138:	d81a      	bhi.n	8008170 <_realloc_r+0x18c>
 800813a:	3408      	adds	r4, #8
 800813c:	f105 0210 	add.w	r2, r5, #16
 8008140:	6821      	ldr	r1, [r4, #0]
 8008142:	6011      	str	r1, [r2, #0]
 8008144:	6861      	ldr	r1, [r4, #4]
 8008146:	6051      	str	r1, [r2, #4]
 8008148:	68a1      	ldr	r1, [r4, #8]
 800814a:	6091      	str	r1, [r2, #8]
 800814c:	eb05 0208 	add.w	r2, r5, r8
 8008150:	eba7 0708 	sub.w	r7, r7, r8
 8008154:	f047 0701 	orr.w	r7, r7, #1
 8008158:	609a      	str	r2, [r3, #8]
 800815a:	6057      	str	r7, [r2, #4]
 800815c:	686b      	ldr	r3, [r5, #4]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	ea43 0308 	orr.w	r3, r3, r8
 8008166:	606b      	str	r3, [r5, #4]
 8008168:	4650      	mov	r0, sl
 800816a:	f7fc fa55 	bl	8004618 <__malloc_unlock>
 800816e:	e78e      	b.n	800808e <_realloc_r+0xaa>
 8008170:	68a1      	ldr	r1, [r4, #8]
 8008172:	6129      	str	r1, [r5, #16]
 8008174:	68e1      	ldr	r1, [r4, #12]
 8008176:	6169      	str	r1, [r5, #20]
 8008178:	2a24      	cmp	r2, #36	@ 0x24
 800817a:	bf01      	itttt	eq
 800817c:	6922      	ldreq	r2, [r4, #16]
 800817e:	61aa      	streq	r2, [r5, #24]
 8008180:	6961      	ldreq	r1, [r4, #20]
 8008182:	61e9      	streq	r1, [r5, #28]
 8008184:	bf19      	ittee	ne
 8008186:	3410      	addne	r4, #16
 8008188:	f105 0218 	addne.w	r2, r5, #24
 800818c:	f105 0220 	addeq.w	r2, r5, #32
 8008190:	3418      	addeq	r4, #24
 8008192:	e7d5      	b.n	8008140 <_realloc_r+0x15c>
 8008194:	465a      	mov	r2, fp
 8008196:	e7d3      	b.n	8008140 <_realloc_r+0x15c>
 8008198:	4621      	mov	r1, r4
 800819a:	4658      	mov	r0, fp
 800819c:	f7fe fcba 	bl	8006b14 <memmove>
 80081a0:	4b43      	ldr	r3, [pc, #268]	@ (80082b0 <_realloc_r+0x2cc>)
 80081a2:	e7d3      	b.n	800814c <_realloc_r+0x168>
 80081a4:	45b8      	cmp	r8, r7
 80081a6:	dc35      	bgt.n	8008214 <_realloc_r+0x230>
 80081a8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80081ac:	4628      	mov	r0, r5
 80081ae:	60d3      	str	r3, [r2, #12]
 80081b0:	609a      	str	r2, [r3, #8]
 80081b2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80081b6:	68eb      	ldr	r3, [r5, #12]
 80081b8:	60d3      	str	r3, [r2, #12]
 80081ba:	609a      	str	r2, [r3, #8]
 80081bc:	1f32      	subs	r2, r6, #4
 80081be:	2a24      	cmp	r2, #36	@ 0x24
 80081c0:	d824      	bhi.n	800820c <_realloc_r+0x228>
 80081c2:	2a13      	cmp	r2, #19
 80081c4:	d908      	bls.n	80081d8 <_realloc_r+0x1f4>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	60ab      	str	r3, [r5, #8]
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	60eb      	str	r3, [r5, #12]
 80081ce:	2a1b      	cmp	r2, #27
 80081d0:	d80a      	bhi.n	80081e8 <_realloc_r+0x204>
 80081d2:	3408      	adds	r4, #8
 80081d4:	f105 0010 	add.w	r0, r5, #16
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	6003      	str	r3, [r0, #0]
 80081dc:	6863      	ldr	r3, [r4, #4]
 80081de:	6043      	str	r3, [r0, #4]
 80081e0:	68a3      	ldr	r3, [r4, #8]
 80081e2:	6083      	str	r3, [r0, #8]
 80081e4:	46a9      	mov	r9, r5
 80081e6:	e75c      	b.n	80080a2 <_realloc_r+0xbe>
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	612b      	str	r3, [r5, #16]
 80081ec:	68e3      	ldr	r3, [r4, #12]
 80081ee:	616b      	str	r3, [r5, #20]
 80081f0:	2a24      	cmp	r2, #36	@ 0x24
 80081f2:	bf01      	itttt	eq
 80081f4:	6923      	ldreq	r3, [r4, #16]
 80081f6:	61ab      	streq	r3, [r5, #24]
 80081f8:	6963      	ldreq	r3, [r4, #20]
 80081fa:	61eb      	streq	r3, [r5, #28]
 80081fc:	bf19      	ittee	ne
 80081fe:	3410      	addne	r4, #16
 8008200:	f105 0018 	addne.w	r0, r5, #24
 8008204:	f105 0020 	addeq.w	r0, r5, #32
 8008208:	3418      	addeq	r4, #24
 800820a:	e7e5      	b.n	80081d8 <_realloc_r+0x1f4>
 800820c:	4621      	mov	r1, r4
 800820e:	f7fe fc81 	bl	8006b14 <memmove>
 8008212:	e7e7      	b.n	80081e4 <_realloc_r+0x200>
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	4598      	cmp	r8, r3
 8008218:	dc31      	bgt.n	800827e <_realloc_r+0x29a>
 800821a:	4628      	mov	r0, r5
 800821c:	68eb      	ldr	r3, [r5, #12]
 800821e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008222:	60d3      	str	r3, [r2, #12]
 8008224:	609a      	str	r2, [r3, #8]
 8008226:	1f32      	subs	r2, r6, #4
 8008228:	2a24      	cmp	r2, #36	@ 0x24
 800822a:	d824      	bhi.n	8008276 <_realloc_r+0x292>
 800822c:	2a13      	cmp	r2, #19
 800822e:	d908      	bls.n	8008242 <_realloc_r+0x25e>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	60ab      	str	r3, [r5, #8]
 8008234:	6863      	ldr	r3, [r4, #4]
 8008236:	60eb      	str	r3, [r5, #12]
 8008238:	2a1b      	cmp	r2, #27
 800823a:	d80a      	bhi.n	8008252 <_realloc_r+0x26e>
 800823c:	3408      	adds	r4, #8
 800823e:	f105 0010 	add.w	r0, r5, #16
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	6043      	str	r3, [r0, #4]
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	6083      	str	r3, [r0, #8]
 800824e:	9f01      	ldr	r7, [sp, #4]
 8008250:	e7c8      	b.n	80081e4 <_realloc_r+0x200>
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	612b      	str	r3, [r5, #16]
 8008256:	68e3      	ldr	r3, [r4, #12]
 8008258:	616b      	str	r3, [r5, #20]
 800825a:	2a24      	cmp	r2, #36	@ 0x24
 800825c:	bf01      	itttt	eq
 800825e:	6923      	ldreq	r3, [r4, #16]
 8008260:	61ab      	streq	r3, [r5, #24]
 8008262:	6963      	ldreq	r3, [r4, #20]
 8008264:	61eb      	streq	r3, [r5, #28]
 8008266:	bf19      	ittee	ne
 8008268:	3410      	addne	r4, #16
 800826a:	f105 0018 	addne.w	r0, r5, #24
 800826e:	f105 0020 	addeq.w	r0, r5, #32
 8008272:	3418      	addeq	r4, #24
 8008274:	e7e5      	b.n	8008242 <_realloc_r+0x25e>
 8008276:	4621      	mov	r1, r4
 8008278:	f7fe fc4c 	bl	8006b14 <memmove>
 800827c:	e7e7      	b.n	800824e <_realloc_r+0x26a>
 800827e:	4659      	mov	r1, fp
 8008280:	4650      	mov	r0, sl
 8008282:	f7fb ff89 	bl	8004198 <_malloc_r>
 8008286:	4683      	mov	fp, r0
 8008288:	b918      	cbnz	r0, 8008292 <_realloc_r+0x2ae>
 800828a:	4650      	mov	r0, sl
 800828c:	f7fc f9c4 	bl	8004618 <__malloc_unlock>
 8008290:	e6c7      	b.n	8008022 <_realloc_r+0x3e>
 8008292:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008296:	f023 0301 	bic.w	r3, r3, #1
 800829a:	444b      	add	r3, r9
 800829c:	f1a0 0208 	sub.w	r2, r0, #8
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d107      	bne.n	80082b4 <_realloc_r+0x2d0>
 80082a4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80082a8:	f027 0703 	bic.w	r7, r7, #3
 80082ac:	4437      	add	r7, r6
 80082ae:	e6f8      	b.n	80080a2 <_realloc_r+0xbe>
 80082b0:	2000014c 	.word	0x2000014c
 80082b4:	1f32      	subs	r2, r6, #4
 80082b6:	2a24      	cmp	r2, #36	@ 0x24
 80082b8:	d82d      	bhi.n	8008316 <_realloc_r+0x332>
 80082ba:	2a13      	cmp	r2, #19
 80082bc:	d928      	bls.n	8008310 <_realloc_r+0x32c>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	6003      	str	r3, [r0, #0]
 80082c2:	6863      	ldr	r3, [r4, #4]
 80082c4:	6043      	str	r3, [r0, #4]
 80082c6:	2a1b      	cmp	r2, #27
 80082c8:	d80e      	bhi.n	80082e8 <_realloc_r+0x304>
 80082ca:	f104 0208 	add.w	r2, r4, #8
 80082ce:	f100 0308 	add.w	r3, r0, #8
 80082d2:	6811      	ldr	r1, [r2, #0]
 80082d4:	6019      	str	r1, [r3, #0]
 80082d6:	6851      	ldr	r1, [r2, #4]
 80082d8:	6059      	str	r1, [r3, #4]
 80082da:	6892      	ldr	r2, [r2, #8]
 80082dc:	609a      	str	r2, [r3, #8]
 80082de:	4621      	mov	r1, r4
 80082e0:	4650      	mov	r0, sl
 80082e2:	f7fb fe99 	bl	8004018 <_free_r>
 80082e6:	e73f      	b.n	8008168 <_realloc_r+0x184>
 80082e8:	68a3      	ldr	r3, [r4, #8]
 80082ea:	6083      	str	r3, [r0, #8]
 80082ec:	68e3      	ldr	r3, [r4, #12]
 80082ee:	60c3      	str	r3, [r0, #12]
 80082f0:	2a24      	cmp	r2, #36	@ 0x24
 80082f2:	bf01      	itttt	eq
 80082f4:	6923      	ldreq	r3, [r4, #16]
 80082f6:	6103      	streq	r3, [r0, #16]
 80082f8:	6961      	ldreq	r1, [r4, #20]
 80082fa:	6141      	streq	r1, [r0, #20]
 80082fc:	bf19      	ittee	ne
 80082fe:	f104 0210 	addne.w	r2, r4, #16
 8008302:	f100 0310 	addne.w	r3, r0, #16
 8008306:	f104 0218 	addeq.w	r2, r4, #24
 800830a:	f100 0318 	addeq.w	r3, r0, #24
 800830e:	e7e0      	b.n	80082d2 <_realloc_r+0x2ee>
 8008310:	4603      	mov	r3, r0
 8008312:	4622      	mov	r2, r4
 8008314:	e7dd      	b.n	80082d2 <_realloc_r+0x2ee>
 8008316:	4621      	mov	r1, r4
 8008318:	f7fe fbfc 	bl	8006b14 <memmove>
 800831c:	e7df      	b.n	80082de <_realloc_r+0x2fa>
 800831e:	4637      	mov	r7, r6
 8008320:	e6bf      	b.n	80080a2 <_realloc_r+0xbe>
 8008322:	431f      	orrs	r7, r3
 8008324:	f8c9 7004 	str.w	r7, [r9, #4]
 8008328:	6853      	ldr	r3, [r2, #4]
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6053      	str	r3, [r2, #4]
 8008330:	e6d3      	b.n	80080da <_realloc_r+0xf6>
 8008332:	bf00      	nop

08008334 <__ascii_wctomb>:
 8008334:	4603      	mov	r3, r0
 8008336:	4608      	mov	r0, r1
 8008338:	b141      	cbz	r1, 800834c <__ascii_wctomb+0x18>
 800833a:	2aff      	cmp	r2, #255	@ 0xff
 800833c:	d904      	bls.n	8008348 <__ascii_wctomb+0x14>
 800833e:	228a      	movs	r2, #138	@ 0x8a
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	4770      	bx	lr
 8008348:	700a      	strb	r2, [r1, #0]
 800834a:	2001      	movs	r0, #1
 800834c:	4770      	bx	lr
	...

08008350 <_wcrtomb_r>:
 8008350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008352:	4c09      	ldr	r4, [pc, #36]	@ (8008378 <_wcrtomb_r+0x28>)
 8008354:	b085      	sub	sp, #20
 8008356:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800835a:	4605      	mov	r5, r0
 800835c:	461e      	mov	r6, r3
 800835e:	b909      	cbnz	r1, 8008364 <_wcrtomb_r+0x14>
 8008360:	460a      	mov	r2, r1
 8008362:	a901      	add	r1, sp, #4
 8008364:	47b8      	blx	r7
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	bf01      	itttt	eq
 800836a:	2300      	moveq	r3, #0
 800836c:	6033      	streq	r3, [r6, #0]
 800836e:	238a      	moveq	r3, #138	@ 0x8a
 8008370:	602b      	streq	r3, [r5, #0]
 8008372:	b005      	add	sp, #20
 8008374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008376:	bf00      	nop
 8008378:	20000554 	.word	0x20000554

0800837c <__swhatbuf_r>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	460c      	mov	r4, r1
 8008380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008384:	2900      	cmp	r1, #0
 8008386:	b096      	sub	sp, #88	@ 0x58
 8008388:	4615      	mov	r5, r2
 800838a:	461e      	mov	r6, r3
 800838c:	da07      	bge.n	800839e <__swhatbuf_r+0x22>
 800838e:	89a1      	ldrh	r1, [r4, #12]
 8008390:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8008394:	d117      	bne.n	80083c6 <__swhatbuf_r+0x4a>
 8008396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800839a:	4608      	mov	r0, r1
 800839c:	e00f      	b.n	80083be <__swhatbuf_r+0x42>
 800839e:	466a      	mov	r2, sp
 80083a0:	f000 f89a 	bl	80084d8 <_fstat_r>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	dbf2      	blt.n	800838e <__swhatbuf_r+0x12>
 80083a8:	9901      	ldr	r1, [sp, #4]
 80083aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083b2:	4259      	negs	r1, r3
 80083b4:	4159      	adcs	r1, r3
 80083b6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80083ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083be:	6031      	str	r1, [r6, #0]
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	b016      	add	sp, #88	@ 0x58
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	2100      	movs	r1, #0
 80083c8:	2340      	movs	r3, #64	@ 0x40
 80083ca:	e7e6      	b.n	800839a <__swhatbuf_r+0x1e>

080083cc <__smakebuf_r>:
 80083cc:	898b      	ldrh	r3, [r1, #12]
 80083ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d0:	079d      	lsls	r5, r3, #30
 80083d2:	4606      	mov	r6, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	d507      	bpl.n	80083e8 <__smakebuf_r+0x1c>
 80083d8:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	2301      	movs	r3, #1
 80083e2:	6163      	str	r3, [r4, #20]
 80083e4:	b003      	add	sp, #12
 80083e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083e8:	ab01      	add	r3, sp, #4
 80083ea:	466a      	mov	r2, sp
 80083ec:	f7ff ffc6 	bl	800837c <__swhatbuf_r>
 80083f0:	9f00      	ldr	r7, [sp, #0]
 80083f2:	4605      	mov	r5, r0
 80083f4:	4639      	mov	r1, r7
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7fb fece 	bl	8004198 <_malloc_r>
 80083fc:	b948      	cbnz	r0, 8008412 <__smakebuf_r+0x46>
 80083fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008402:	059a      	lsls	r2, r3, #22
 8008404:	d4ee      	bmi.n	80083e4 <__smakebuf_r+0x18>
 8008406:	f023 0303 	bic.w	r3, r3, #3
 800840a:	f043 0302 	orr.w	r3, r3, #2
 800840e:	81a3      	strh	r3, [r4, #12]
 8008410:	e7e2      	b.n	80083d8 <__smakebuf_r+0xc>
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	6020      	str	r0, [r4, #0]
 8008416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008422:	b15b      	cbz	r3, 800843c <__smakebuf_r+0x70>
 8008424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008428:	4630      	mov	r0, r6
 800842a:	f000 f867 	bl	80084fc <_isatty_r>
 800842e:	b128      	cbz	r0, 800843c <__smakebuf_r+0x70>
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f023 0303 	bic.w	r3, r3, #3
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	431d      	orrs	r5, r3
 8008440:	81a5      	strh	r5, [r4, #12]
 8008442:	e7cf      	b.n	80083e4 <__smakebuf_r+0x18>

08008444 <__swbuf_r>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	460e      	mov	r6, r1
 8008448:	4614      	mov	r4, r2
 800844a:	4605      	mov	r5, r0
 800844c:	b118      	cbz	r0, 8008456 <__swbuf_r+0x12>
 800844e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008450:	b90b      	cbnz	r3, 8008456 <__swbuf_r+0x12>
 8008452:	f7fb fc73 	bl	8003d3c <__sinit>
 8008456:	69a3      	ldr	r3, [r4, #24]
 8008458:	60a3      	str	r3, [r4, #8]
 800845a:	89a3      	ldrh	r3, [r4, #12]
 800845c:	0719      	lsls	r1, r3, #28
 800845e:	d501      	bpl.n	8008464 <__swbuf_r+0x20>
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	b943      	cbnz	r3, 8008476 <__swbuf_r+0x32>
 8008464:	4621      	mov	r1, r4
 8008466:	4628      	mov	r0, r5
 8008468:	f7fe fa94 	bl	8006994 <__swsetup_r>
 800846c:	b118      	cbz	r0, 8008476 <__swbuf_r+0x32>
 800846e:	f04f 37ff 	mov.w	r7, #4294967295
 8008472:	4638      	mov	r0, r7
 8008474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847a:	b2f6      	uxtb	r6, r6
 800847c:	049a      	lsls	r2, r3, #18
 800847e:	4637      	mov	r7, r6
 8008480:	d406      	bmi.n	8008490 <__swbuf_r+0x4c>
 8008482:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008486:	81a3      	strh	r3, [r4, #12]
 8008488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800848a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800848e:	6663      	str	r3, [r4, #100]	@ 0x64
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	6922      	ldr	r2, [r4, #16]
 8008494:	1a98      	subs	r0, r3, r2
 8008496:	6963      	ldr	r3, [r4, #20]
 8008498:	4283      	cmp	r3, r0
 800849a:	dc05      	bgt.n	80084a8 <__swbuf_r+0x64>
 800849c:	4621      	mov	r1, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	f7fe f906 	bl	80066b0 <_fflush_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d1e2      	bne.n	800846e <__swbuf_r+0x2a>
 80084a8:	68a3      	ldr	r3, [r4, #8]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	60a3      	str	r3, [r4, #8]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	6022      	str	r2, [r4, #0]
 80084b4:	701e      	strb	r6, [r3, #0]
 80084b6:	6962      	ldr	r2, [r4, #20]
 80084b8:	1c43      	adds	r3, r0, #1
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d004      	beq.n	80084c8 <__swbuf_r+0x84>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	07db      	lsls	r3, r3, #31
 80084c2:	d5d6      	bpl.n	8008472 <__swbuf_r+0x2e>
 80084c4:	2e0a      	cmp	r6, #10
 80084c6:	d1d4      	bne.n	8008472 <__swbuf_r+0x2e>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	f7fe f8f0 	bl	80066b0 <_fflush_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d0ce      	beq.n	8008472 <__swbuf_r+0x2e>
 80084d4:	e7cb      	b.n	800846e <__swbuf_r+0x2a>
	...

080084d8 <_fstat_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d07      	ldr	r5, [pc, #28]	@ (80084f8 <_fstat_r+0x20>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	602b      	str	r3, [r5, #0]
 80084e6:	f7f9 f906 	bl	80016f6 <_fstat>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d102      	bne.n	80084f4 <_fstat_r+0x1c>
 80084ee:	682b      	ldr	r3, [r5, #0]
 80084f0:	b103      	cbz	r3, 80084f4 <_fstat_r+0x1c>
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop
 80084f8:	20000f7c 	.word	0x20000f7c

080084fc <_isatty_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4d06      	ldr	r5, [pc, #24]	@ (8008518 <_isatty_r+0x1c>)
 8008500:	2300      	movs	r3, #0
 8008502:	4604      	mov	r4, r0
 8008504:	4608      	mov	r0, r1
 8008506:	602b      	str	r3, [r5, #0]
 8008508:	f7f9 f905 	bl	8001716 <_isatty>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_isatty_r+0x1a>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b103      	cbz	r3, 8008516 <_isatty_r+0x1a>
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	20000f7c 	.word	0x20000f7c

0800851c <__assert_func>:
 800851c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800851e:	4614      	mov	r4, r2
 8008520:	461a      	mov	r2, r3
 8008522:	4b09      	ldr	r3, [pc, #36]	@ (8008548 <__assert_func+0x2c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4605      	mov	r5, r0
 8008528:	68d8      	ldr	r0, [r3, #12]
 800852a:	b954      	cbnz	r4, 8008542 <__assert_func+0x26>
 800852c:	4b07      	ldr	r3, [pc, #28]	@ (800854c <__assert_func+0x30>)
 800852e:	461c      	mov	r4, r3
 8008530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008534:	9100      	str	r1, [sp, #0]
 8008536:	462b      	mov	r3, r5
 8008538:	4905      	ldr	r1, [pc, #20]	@ (8008550 <__assert_func+0x34>)
 800853a:	f000 f843 	bl	80085c4 <fiprintf>
 800853e:	f000 f853 	bl	80085e8 <abort>
 8008542:	4b04      	ldr	r3, [pc, #16]	@ (8008554 <__assert_func+0x38>)
 8008544:	e7f4      	b.n	8008530 <__assert_func+0x14>
 8008546:	bf00      	nop
 8008548:	20000018 	.word	0x20000018
 800854c:	08008a3c 	.word	0x08008a3c
 8008550:	08008a0e 	.word	0x08008a0e
 8008554:	08008a01 	.word	0x08008a01

08008558 <_calloc_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	fba1 1502 	umull	r1, r5, r1, r2
 800855e:	b935      	cbnz	r5, 800856e <_calloc_r+0x16>
 8008560:	f7fb fe1a 	bl	8004198 <_malloc_r>
 8008564:	4604      	mov	r4, r0
 8008566:	b938      	cbnz	r0, 8008578 <_calloc_r+0x20>
 8008568:	2400      	movs	r4, #0
 800856a:	4620      	mov	r0, r4
 800856c:	bd38      	pop	{r3, r4, r5, pc}
 800856e:	f7fb fcbf 	bl	8003ef0 <__errno>
 8008572:	230c      	movs	r3, #12
 8008574:	6003      	str	r3, [r0, #0]
 8008576:	e7f7      	b.n	8008568 <_calloc_r+0x10>
 8008578:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800857c:	f022 0203 	bic.w	r2, r2, #3
 8008580:	3a04      	subs	r2, #4
 8008582:	2a24      	cmp	r2, #36	@ 0x24
 8008584:	d819      	bhi.n	80085ba <_calloc_r+0x62>
 8008586:	2a13      	cmp	r2, #19
 8008588:	d915      	bls.n	80085b6 <_calloc_r+0x5e>
 800858a:	2a1b      	cmp	r2, #27
 800858c:	e9c0 5500 	strd	r5, r5, [r0]
 8008590:	d806      	bhi.n	80085a0 <_calloc_r+0x48>
 8008592:	f100 0308 	add.w	r3, r0, #8
 8008596:	2200      	movs	r2, #0
 8008598:	e9c3 2200 	strd	r2, r2, [r3]
 800859c:	609a      	str	r2, [r3, #8]
 800859e:	e7e4      	b.n	800856a <_calloc_r+0x12>
 80085a0:	2a24      	cmp	r2, #36	@ 0x24
 80085a2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80085a6:	bf11      	iteee	ne
 80085a8:	f100 0310 	addne.w	r3, r0, #16
 80085ac:	6105      	streq	r5, [r0, #16]
 80085ae:	f100 0318 	addeq.w	r3, r0, #24
 80085b2:	6145      	streq	r5, [r0, #20]
 80085b4:	e7ef      	b.n	8008596 <_calloc_r+0x3e>
 80085b6:	4603      	mov	r3, r0
 80085b8:	e7ed      	b.n	8008596 <_calloc_r+0x3e>
 80085ba:	4629      	mov	r1, r5
 80085bc:	f7fb fc49 	bl	8003e52 <memset>
 80085c0:	e7d3      	b.n	800856a <_calloc_r+0x12>
	...

080085c4 <fiprintf>:
 80085c4:	b40e      	push	{r1, r2, r3}
 80085c6:	b503      	push	{r0, r1, lr}
 80085c8:	4601      	mov	r1, r0
 80085ca:	ab03      	add	r3, sp, #12
 80085cc:	4805      	ldr	r0, [pc, #20]	@ (80085e4 <fiprintf+0x20>)
 80085ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d2:	6800      	ldr	r0, [r0, #0]
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	f7fd fac5 	bl	8005b64 <_vfiprintf_r>
 80085da:	b002      	add	sp, #8
 80085dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80085e0:	b003      	add	sp, #12
 80085e2:	4770      	bx	lr
 80085e4:	20000018 	.word	0x20000018

080085e8 <abort>:
 80085e8:	b508      	push	{r3, lr}
 80085ea:	2006      	movs	r0, #6
 80085ec:	f000 f82c 	bl	8008648 <raise>
 80085f0:	2001      	movs	r0, #1
 80085f2:	f7f9 f830 	bl	8001656 <_exit>

080085f6 <_raise_r>:
 80085f6:	291f      	cmp	r1, #31
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4605      	mov	r5, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	d904      	bls.n	800860a <_raise_r+0x14>
 8008600:	2316      	movs	r3, #22
 8008602:	6003      	str	r3, [r0, #0]
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	bd38      	pop	{r3, r4, r5, pc}
 800860a:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800860e:	b112      	cbz	r2, 8008616 <_raise_r+0x20>
 8008610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008614:	b94b      	cbnz	r3, 800862a <_raise_r+0x34>
 8008616:	4628      	mov	r0, r5
 8008618:	f000 f830 	bl	800867c <_getpid_r>
 800861c:	4622      	mov	r2, r4
 800861e:	4601      	mov	r1, r0
 8008620:	4628      	mov	r0, r5
 8008622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008626:	f000 b817 	b.w	8008658 <_kill_r>
 800862a:	2b01      	cmp	r3, #1
 800862c:	d00a      	beq.n	8008644 <_raise_r+0x4e>
 800862e:	1c59      	adds	r1, r3, #1
 8008630:	d103      	bne.n	800863a <_raise_r+0x44>
 8008632:	2316      	movs	r3, #22
 8008634:	6003      	str	r3, [r0, #0]
 8008636:	2001      	movs	r0, #1
 8008638:	e7e6      	b.n	8008608 <_raise_r+0x12>
 800863a:	2100      	movs	r1, #0
 800863c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008640:	4620      	mov	r0, r4
 8008642:	4798      	blx	r3
 8008644:	2000      	movs	r0, #0
 8008646:	e7df      	b.n	8008608 <_raise_r+0x12>

08008648 <raise>:
 8008648:	4b02      	ldr	r3, [pc, #8]	@ (8008654 <raise+0xc>)
 800864a:	4601      	mov	r1, r0
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f7ff bfd2 	b.w	80085f6 <_raise_r>
 8008652:	bf00      	nop
 8008654:	20000018 	.word	0x20000018

08008658 <_kill_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d07      	ldr	r5, [pc, #28]	@ (8008678 <_kill_r+0x20>)
 800865c:	2300      	movs	r3, #0
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	4611      	mov	r1, r2
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	f7f8 ffe6 	bl	8001636 <_kill>
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	d102      	bne.n	8008674 <_kill_r+0x1c>
 800866e:	682b      	ldr	r3, [r5, #0]
 8008670:	b103      	cbz	r3, 8008674 <_kill_r+0x1c>
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	bd38      	pop	{r3, r4, r5, pc}
 8008676:	bf00      	nop
 8008678:	20000f7c 	.word	0x20000f7c

0800867c <_getpid_r>:
 800867c:	f7f8 bfd3 	b.w	8001626 <_getpid>

08008680 <_init>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	bf00      	nop
 8008684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008686:	bc08      	pop	{r3}
 8008688:	469e      	mov	lr, r3
 800868a:	4770      	bx	lr

0800868c <_fini>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	bf00      	nop
 8008690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008692:	bc08      	pop	{r3}
 8008694:	469e      	mov	lr, r3
 8008696:	4770      	bx	lr
